<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Jinsu Playground</title><link>https://umi0410.github.io/blog/</link><description>Recent content in Blogs on Jinsu Playground</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Tue, 06 Dec 2022 01:35:00 +0900</lastBuildDate><atom:link href="https://umi0410.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>VBoxManage(VirtualBox CLI)로 VM 생성하기</title><link>https://umi0410.github.io/blog/companion-server/create-vm-by-vboxmanage/</link><pubDate>Tue, 06 Dec 2022 01:35:00 +0900</pubDate><guid>https://umi0410.github.io/blog/companion-server/create-vm-by-vboxmanage/</guid><description>시작하며 홈서버를 직접 구성해보면서 실제 기기 개수가 많지 않아 좀 아쉬웠는데 최근에는 이를 VM으로 충당해볼까 싶은 생각이 들기도 했다. 갖고 있는 랩탑 하나에 여러 대의 VM을 띄우면 홈서버에서 좀 더 많은 수의 노드가 있는 것처럼 이용할 수 있지 않을까 싶어 VM을 띄워보기로 했다. 하지만 이번에는 단순히 GUI로 VM을 띄우는 것이 아니라 CLI로 VM을 띄우면서 LV(Logical Volume)을 이용해봤다. 해당 내용을 까먹을까봐 이 글을 통해 한 번 정리해본다.
실습 환경 호스트 환경은 아래와 같다.</description></item><item><title>[반려 서버 키우기 사전 작업] Core DNS를 홈랩의 커스텀 DNS 서버로 이용하기</title><link>https://umi0410.github.io/blog/companion-server/core-dns/</link><pubDate>Wed, 30 Nov 2022 01:35:00 +0900</pubDate><guid>https://umi0410.github.io/blog/companion-server/core-dns/</guid><description>시작하며 “반려 서버 키우기”라는 건전한 취미 생활을 본격적으로 시작하기 전에 그 사전 작업 중 하나로 Core DNS를 찍먹해보려한다.
현재 나의 홈랩 상황은 다음과 같다.
(서버 및 장난감) 라즈베리파이 4대 (서버 및 장난감) 랩탑 1대 (서버 관리용) PC 2대 핸드폰 2개 즉 나의 반려 서버는 5대, 반려 서버에 접속하는 장비는 4대(PC + 핸드폰) 정도라고 볼 수 있다.
기존에는 매번 사용하는 PC의 /etc/hosts 를 편집해서 도메인 네임을 이용하곤 했는데 한 대의 PC로만 접속하는 게 아니라 여러 장비로 서버에 접속하게 될 수 있다보니 매번 /etc/hosts를 편집하는 것이 그닥 유쾌하진 않았고, 심지어 모바일에서는 /etc/hosts 를 제어할 수 없어 IP로 직접 접근해야했다.</description></item><item><title>[책] Istio in Action 리뷰</title><link>https://umi0410.github.io/blog/devops/istio-in-action-review/</link><pubDate>Fri, 30 Sep 2022 22:00:00 +0900</pubDate><guid>https://umi0410.github.io/blog/devops/istio-in-action-review/</guid><description>시작하며 저는 데브옵스 엔지니어로 현재(2022년 9월)의 회사에 입사한 후, 기존에 막연하게 궁금증을 가져왔던 Istio라는 제품을 주로 담당하게 됐습니다.
공식 문서와 릴리즈 노트 위주로 Istio를 공부하던 중 팀원분께 Istio in Action이라는 책을 추천받게 됐고, 이 책을 통해 조금 두루뭉실했던 이해와 삽질을 바탕으로 했던 판단들이 좀 더 분명해질 수 있었던 것 같습니다.
그 동안은 지루함으로 인해 책을 다소 멀리 하고 짧은 아티클들을 위주로 학습을 해온 반면 올해 제 목표 중 하나는 책을 통해 좀 더 개념을 잘 정리하고 깊이 있게 공부를 해나가는 것이었습니다.</description></item><item><title>2022년 9월에 적어보는 조금은 뜬금없는 9개월간의 2022년 회고</title><link>https://umi0410.github.io/blog/thought/2022-09-review/</link><pubDate>Sat, 10 Sep 2022 15:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/thought/2022-09-review/</guid><description>시작하며 시간은 정말 나이를 먹을 수록 빠르게 지나가는 것일까? 매번 지난 회고를 돌이켜보면 시간이 빠르게 지나갔다는 얘기로 시작하게 된 것 같다. 올해에도 역시나다. 시간이 참 빠른 것 같다.
이전 회고글과 같이 기술적으로 매력적인 신입이 되고자하는 회고라기보다는 이번 글은 회고라고 적기는 했으나 취준 과정 그리고 입사 이후에 대한 일기라고 볼 수도 있을 것 같다.
되돌아본 2022 크게 올 한해를 정리해보자면 다음과 같다.
2022.01~2022.02 | 당근마켓 플랫폼 서버 Golang 개발자 인턴으로 근무했다. 2022.</description></item><item><title>Virtual Service와 Destination Rule을 이용해 mesh 내부 트래픽을 원하는 대로 라우팅해보기</title><link>https://umi0410.github.io/blog/devops/virtual-service-destination-rule-mesh-internal-traffic/</link><pubDate>Thu, 11 Aug 2022 03:20:00 +0900</pubDate><guid>https://umi0410.github.io/blog/devops/virtual-service-destination-rule-mesh-internal-traffic/</guid><description>시작하며 데브옵스 엔지니어로 입사한 뒤 주로 맡고 있는 작업은 Istio 관련 작업이다. 평소 참 관심 있었던 분야이기도 하고 istio 뿐만 아니라 네트워크에 대해 개인적으로 정말 공부해보고싶었는데 덕분에 재미있게 공부하고 성장하며 근무하고 있는 것 같다. 😊
근데 요즘 들어 점점 단순히 ‘어떻게 저떻게 하니까 돌아는가네~ 오.. 나 istio 좀 파악한듯?ㅋㅋ’ 수준의 자세로는 트러블슈팅을 하거나 올바르게 설계하기가 쉽지 않은 경우들이 잦아졌다.
따라서 평소 궁금했던 내용 중 하나를 살짝 파헤쳐볼까한다.
나는 주로 istio ingress gateway와 관련된 작업을 많이 했었고 이 경우 Virtual Service는 항상 ingress gateway를 참조하도록 설정해왔다.</description></item><item><title>istio와 envoy proxy를 통해 경험해보는 네트워크 인터페이스 (istio 1.10)</title><link>https://umi0410.github.io/blog/devops/istio-1-10-network-interface/</link><pubDate>Sun, 17 Jul 2022 22:00:00 +0900</pubDate><guid>https://umi0410.github.io/blog/devops/istio-1-10-network-interface/</guid><description>시작하며 요즘 istio를 공부하던 중 istio가 변화해온 과정에 대해서도 흥미가 생겨 지난 버전들의 릴리즈 노트들도 읽어보고 있습니다. 그러던 중 현 시점(2022년 7월)에는 이미 공식적인 End of Life가 지난 2021년 3월 처음 릴리즈된 istio 1.10의 릴리즈 노트를 보다가 재미있는 점을 하나 발견할 수 있었는데요.
바로 envoy proxy가 eth0에 대한 요청을 넘겨주는 container의 network interface가 lo 에서 eth0 로 변경되었다는 점입니다. 네트워크에 대해, 그 중에서도 특히 네트워크 인터페이스에 대해 잘 몰랐던 때에는 이 변경사항에 그닥 관심이 안 갔을 것 같은데 최근 네트워크 인터페이스에 대해 공부를 해서인지 이 변경사항에 관심이 갔습니다.</description></item><item><title>쿠버네티스로 Clova AI Custom Extension 배포하기 (feat. Istio, Cert Manager)</title><link>https://umi0410.github.io/blog/clova-ai-on-k8s/</link><pubDate>Wed, 13 Jul 2022 23:00:00 +0900</pubDate><guid>https://umi0410.github.io/blog/clova-ai-on-k8s/</guid><description>시작하며 Clova AI 스피커 올해에는 많은 변화가 있었다!
💼 데브옵스 엔지니어로 회사를 가게 됐고 아주 만족 중이다! 🏠 회사의 좋은 보상, 복지에 힘입어 생애 첫 자취를 하게 됐다. 💻 네트워크나 리눅스, 보안 등 딥한 영역에 좀 더 관심을 갖게 됐다. 🎸 기타를 꾸준히 다니고 있다. 그런 변화들 속에서 자취방에 인터넷 설치를 하게 됐는데 클로바 AI 스피커를 공짜로 주더라.
본가에 있을 때도 쓰긴 했는데 딱히 관심 없다가 직접 클로바 앱을 깔아서 이것저것 써보니 &amp;lsquo;전보다 재밌네.</description></item><item><title>ArgoCD 선언적으로 이용해나가기 - Github을 통한 SSO 및 RBAC</title><link>https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/</link><pubDate>Sat, 07 May 2022 22:00:00 +0900</pubDate><guid>https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/</guid><description>시작하며 저번 글(&amp;ldquo;ArgoCD 선언적으로 이용해나가기 - Helm, App of App&amp;rdquo;)에서는 Helm과 App of App 패턴을 이용해 ArgoCD를 선언적으로 이용해나가는 방법을 다뤘습니다.
바~로 ArgoCD를 좀 더 선언적으로 이용해나가는 것과 관련된 팁부터 글을 적어나가기는 좀 무리가 있을 것 같아 해당 글에서는
배경지식들에 대한 간략한 정리와 핸즈온 같은 느낌의 내용들도 많이 포함하게 됐던 것 같아요.
이번 글에서는 ArgoCD를 실제로 이용하기 위해 필요할만한 이런 저런 설정들을 어떻게 선언적으로 정의해볼 수 있을지를 소개해보려해요!
그리고 그 예시로 RBAC 설정을 해보겠습니다.</description></item><item><title>ArgoCD 선언적으로 이용해나가기 - Helm, App of App</title><link>https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/</link><pubDate>Fri, 22 Apr 2022 14:11:07 +0900</pubDate><guid>https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/</guid><description>시작하며 취준생 기간을 마무리하고 데브옵스 엔지니어로서 커리어를 시작하게 됐습니다! 🎉
근무를 시작하기 전까지 기간이 좀 남아있어서 그 전까지 뭘 해보면 재밌을까 고민하던 중에 새로 생긴 클라우드 동아리인 Cloud Club에서 클라우드와 인프라에 관한 주제로 발표할 기회가 주어져 ArgoCD를 토픽으로 발표를 해보려합니다. 그리고 관련된 내용을 한 번 더 블로그에 정리해보려해요!
주제는 &amp;ldquo;ArgoCD 선언적으로 이용해나가기&amp;rdquo; 이고 주로 다룰 내용은 어떻게 ArgoCD를 좀 더 선언적으로 관리하고 이용해나갈 수 있을지입니다.
ArgoCD가 뭔지, 어떻게 Getting Started할지, GitOps가 뭔지 등을 다루지 않으려는 이유는 이미 그 내용으로는 충분한 양질의 자료가 존재한다고 생각하기 때문입니다.</description></item><item><title>2021년 회고</title><link>https://umi0410.github.io/blog/thought/2021-review/</link><pubDate>Mon, 20 Dec 2021 15:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/thought/2021-review/</guid><description>시작하며 매년 그랬지만 2021년도 참 빠르게 지나간 것 같다. 벌써 연말이라니.
오늘은 2021년을 돌아보며 잘 했던 부분에 대해선 나 자신을 칭찬해주고, 아쉬웠던 부분에 대해서는 개선할 방안을 찾아봄으로써 새해는 더 뜨겁고 의미있게 보내고자한다~!
개발 외적인 거는 개인적으로 정리할 계획이고, 본 회고록에서는 개발 관련된 내용 위주로 작성했다.
2021년 개발 관련 활동 요약 다양한 이유로 미뤄왔던 스프링을 사용해보기 시작했다. 바닥부터 주도적으로 설계/개발해나갈 수 있는 초기 스타트업에 합류해 나름 많은 경험을 해볼 수 있었다. 실제 개발 프로젝트에 여럿 참여해 협업을 해보았다.</description></item><item><title>쿼리 최적화하기 - 조회수와 같은 Count 성격의 작업 최적화하기 (N+1 문제 관련, feat. Redis)</title><link>https://umi0410.github.io/blog/optimizing-count-query-strategy/</link><pubDate>Wed, 24 Nov 2021 03:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/optimizing-count-query-strategy/</guid><description>시작하며 Sentry monitoring - 느려진 API Latency 짧은 영상을 바탕으로 배틀을 할 수 있는 서비스를 Spring Boot MVC + JPA로 개발하던 중 위와 같이 API Latency가 처참하게도 느린 요청들이 감지되기 시작했습니다. 그동안은 쿼리 최적화보다는 로직 개발이 더 우선시하다보니 쿼리 최적화를 미뤄왔는데, 이번 기회에 이에 대해 다뤄보려합니다. 간단하게 코드를 짜서 테스트해보느라 Go 언어를 이용했지만 JPA를 이용하든 뭘 이용하든 문제와 그에 대한 해결책의 요지는 동일할 것입니다.
아무래도 백엔드에서 API를 개발하면서 파일 데이터를 주고 받는 게 아니라면 주로 Latency가 늘어나는 이유는 다음과 같을 것입니다.</description></item><item><title>AWS Lambda + API Gateway를 통해 SSR로 OpenGraph 메타데이터 제공하기</title><link>https://umi0410.github.io/blog/ssr-serverless-og/</link><pubDate>Sun, 07 Nov 2021 03:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/ssr-serverless-og/</guid><description>시작하며 “오픈 그래프 지원해주세요.” 오픈그래프가 사용된 인스타 DM, 페북 메신저, 카톡 예시 서비스 출시를 앞두고 마무리 작업을 하던 중 잊고 있었던 SNS 관련 기능들이 있었습니다. 그 중 OpenGraph를 통해 &amp;ldquo;공유하기&amp;rdquo; 기능 수행 시에 적절한 메타데이터를 제공해줘야 했습니다. 별로 어려운 기능은 아니지만 이를 제공하기 위해 적절한 방향을 찾기가 쉽지 않았던 것 같습니다. 고민과 삽질 끝에 저는 CloudFront, API Gateway, Lambda 서비스들을 이용하기로 결정했고, Serverless framework를 이용해 Golang 바탕의 마이크로서비스를 개발했습니다.
OpenGraph? SSR?</description></item><item><title>2020 카카오 인턴쉽 코딩 테스트 - 보석 쇼핑 풀이</title><link>https://umi0410.github.io/blog/algorithm/kakao-gem-shopping/</link><pubDate>Sun, 06 Sep 2020 19:11:07 +0900</pubDate><guid>https://umi0410.github.io/blog/algorithm/kakao-gem-shopping/</guid><description>문제 설명 문제 출처: https://programmers.co.kr/learn/courses/30/lessons/67258
각각의 보석상은 하나의 보석을 판매 연속된 보석상들을 쇼핑하면서 방문할 때마다 보석을 구매 모든 종류의 보석을 구매할 때까지 진행 모든 종류의 보석을 구매하는 경우 중 가장 조금의 보석을 가장 앞선 보석상에서 구매하는 경우를 구하기 문제 접근 우선 단순하게 문제의 조건을 그림으로 나타내면 위와 같다. 결국 1번 상점부터 방문하는 경우, 2번 상점부터 방문하는 경우, &amp;hellip; 이런 식으로 진행해나간 뒤 가장 보석을 적게, 앞의 상점에서 사는 경우를 구하면 된다.</description></item><item><title>EKS K8s에서 ELB(ALB, NLB) 제대로 설정하며 사용하기</title><link>https://umi0410.github.io/blog/aws/aws_eks_elb/</link><pubDate>Sun, 06 Sep 2020 19:11:07 +0900</pubDate><guid>https://umi0410.github.io/blog/aws/aws_eks_elb/</guid><description>🐶 시작하며 본 게시글은 AWS 대학생 유저그룹인 AUSG의 활동 중 하나로서 본인(박진수)이 작성한 게시물을 포워딩한 것입니다.
preview.png 데브옵스 인턴으로 근무한 지가 벌써 두 달이 되어갑니다. 이것 저것 배운 것이 많았던 시간이었는데, 그 중 꽤나 삽질을 했던 Kubernetes 와 ELB를 이용하는 부분에 대해 정리를 해볼까합니다. jenkins, spinnaker, argo, terraform, ansible, github action, &amp;hellip; 등등 다양한 내용을 경험할 수 있던 시간이었지만, 그 중 kubernetes에서 무슨 작업을 하던 빼놓을 수 없으면서 어딘가 깔끔히 그 흐름이 정리된 곳을 보기 힘들었던 service를 ELB에 연결하기에 대한 내용을 정리해보겠습니다.</description></item></channel></rss>