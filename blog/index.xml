<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Jinsu Playground</title><link>https://umi0410.github.io/blog/</link><description>Recent content in Blogs on Jinsu Playground</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Wed, 24 Nov 2021 03:46:54 +0900</lastBuildDate><atom:link href="https://umi0410.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>2021년 회고</title><link>https://umi0410.github.io/blog/thought/2021-review/</link><pubDate>Sat, 02 Oct 2021 15:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/thought/2021-review/</guid><description>시작하며 매년 그랬지만 2021년도 참 빠르게 지나간 것 같다. 벌써 연말이라니.
오늘은 2021년을 돌아보며 잘 했던 부분에 대해선 나 자신을 칭찬해주고, 아쉬웠던 부분에 대해서는 개선할 방안을 찾아봄으로써 새해는 더 뜨겁고 의미있게 보내고자한다~!
개발 외적인 거는 개인적으로 정리할 계획이고, 본 회고록에서는 개발 관련된 내용 위주로 작성했다.
2021년 개발 관련 활동 요약 다양한 이유로 미뤄왔던 스프링을 사용해보기 시작했다. 바닥부터 주도적으로 설계/개발해나갈 수 있는 초기 스타트업에 합류해 나름 많은 경험을 해볼 수 있었다.</description></item><item><title>쿼리 최적화하기 - 조회수와 같은 Count 성격의 작업 최적화하기 (N+1 문제 관련, feat. Redis)</title><link>https://umi0410.github.io/blog/optimizing-count-query-strategy/</link><pubDate>Wed, 24 Nov 2021 03:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/optimizing-count-query-strategy/</guid><description>시작하며 Sentry monitoring - 느려진 API Latency
짧은 영상을 바탕으로 배틀을 할 수 있는 서비스를 Spring Boot MVC + JPA로 개발하던 중 위와 같이 API Latency가 처참하게도 느린 요청들이 감지되기 시작했습니다. 그동안은 쿼리 최적화보다는 로직 개발이 더 우선시하다보니 쿼리 최적화를 미뤄왔는데, 이번 기회에 이에 대해 다뤄보려합니다. 간단하게 코드를 짜서 테스트해보느라 Go 언어를 이용했지만 JPA를 이용하든 뭘 이용하든 문제와 그에 대한 해결책의 요지는 동일할 것입니다.
아무래도 백엔드에서 API를 개발하면서 파일 데이터를 주고 받는 게 아니라면 주로 Latency가 늘어나는 이유는 다음과 같을 것입니다.</description></item><item><title>AWS Lambda + API Gateway를 통해 SSR로 OpenGraph 메타데이터 제공하기</title><link>https://umi0410.github.io/blog/ssr-serverless-og/</link><pubDate>Sun, 07 Nov 2021 03:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/ssr-serverless-og/</guid><description>시작하며 “오픈 그래프 지원해주세요.&amp;quot;
오픈그래프가 사용된 인스타 DM, 페북 메신저, 카톡 예시
서비스 출시를 앞두고 마무리 작업을 하던 중 잊고 있었던 SNS 관련 기능들이 있었습니다. 그 중 OpenGraph를 통해 &amp;ldquo;공유하기&amp;rdquo; 기능 수행 시에 적절한 메타데이터를 제공해줘야 했습니다. 별로 어려운 기능은 아니지만 이를 제공하기 위해 적절한 방향을 찾기가 쉽지 않았던 것 같습니다. 고민과 삽질 끝에 저는 CloudFront, API Gateway, Lambda 서비스들을 이용하기로 결정했고, Serverless framework를 이용해 Golang 바탕의 마이크로서비스를 개발했습니다.</description></item><item><title>2020 카카오 인턴쉽 코딩 테스트 - 보석 쇼핑 풀이</title><link>https://umi0410.github.io/blog/algorithm/kakao-gem-shopping/</link><pubDate>Sun, 06 Sep 2020 19:11:07 +0900</pubDate><guid>https://umi0410.github.io/blog/algorithm/kakao-gem-shopping/</guid><description>문제 설명 문제 출처: https://programmers.co.kr/learn/courses/30/lessons/67258
각각의 보석상은 하나의 보석을 판매 연속된 보석상들을 쇼핑하면서 방문할 때마다 보석을 구매 모든 종류의 보석을 구매할 때까지 진행 모든 종류의 보석을 구매하는 경우 중 가장 조금의 보석을 가장 앞선 보석상에서 구매하는 경우를 구하기 문제 접근 우선 단순하게 문제의 조건을 그림으로 나타내면 위와 같다. 결국 1번 상점부터 방문하는 경우, 2번 상점부터 방문하는 경우, &amp;hellip; 이런 식으로 진행해나간 뒤 가장 보석을 적게, 앞의 상점에서 사는 경우를 구하면 된다.</description></item><item><title>EKS K8s에서 ELB(ALB, NLB) 제대로 설정하며 사용하기</title><link>https://umi0410.github.io/blog/aws/aws_eks_elb/</link><pubDate>Sun, 06 Sep 2020 19:11:07 +0900</pubDate><guid>https://umi0410.github.io/blog/aws/aws_eks_elb/</guid><description>🐶 시작하며 본 게시글은 AWS 대학생 유저그룹인 AUSG의 활동 중 하나로서 본인(박진수)이 작성한 게시물을 포워딩한 것입니다.
preview.png
데브옵스 인턴으로 근무한 지가 벌써 두 달이 되어갑니다. 이것 저것 배운 것이 많았던 시간이었는데, 그 중 꽤나 삽질을 했던 Kubernetes 와 ELB를 이용하는 부분에 대해 정리를 해볼까합니다. jenkins, spinnaker, argo, terraform, ansible, github action, &amp;hellip; 등등 다양한 내용을 경험할 수 있던 시간이었지만, 그 중 kubernetes에서 무슨 작업을 하던 빼놓을 수 없으면서 어딘가 깔끔히 그 흐름이 정리된 곳을 보기 힘들었던 service를 ELB에 연결하기에 대한 내용을 정리해보겠습니다.</description></item></channel></rss>