<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Jinsu Playground</title><link>https://umi0410.github.io/blog/</link><description>Recent content in Blogs on Jinsu Playground</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Thu, 11 Aug 2022 03:20:00 +0900</lastBuildDate><atom:link href="https://umi0410.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Virtual Service와 Destination Rule을 이용해 mesh 내부 트래픽을 원하는 대로 라우팅해보기</title><link>https://umi0410.github.io/blog/devops/virtual-service-destination-rule-mesh-internal-traffic/</link><pubDate>Thu, 11 Aug 2022 03:20:00 +0900</pubDate><guid>https://umi0410.github.io/blog/devops/virtual-service-destination-rule-mesh-internal-traffic/</guid><description>&lt;img src="https://umi0410.github.io/blog/devops/virtual-service-destination-rule-mesh-internal-traffic/preview.png" alt="Featured image of post Virtual Service와 Destination Rule을 이용해 mesh 내부 트래픽을 원하는 대로 라우팅해보기" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>데브옵스 엔지니어로 입사한 뒤 주로 맡고 있는 작업은 &lt;code>Istio&lt;/code> 관련 작업이다. 평소 참 관심 있었던 분야이기도 하고 istio 뿐만 아니라 네트워크에 대해 개인적으로 정말 공부해보고싶었는데 덕분에 재미있게 공부하고 성장하며 근무하고 있는 것 같다. 😊&lt;/p>
&lt;p>근데 요즘 들어 점점 단순히 ‘어떻게 저떻게 하니까 돌아는가네~ 오.. 나 istio 좀 파악한듯?ㅋㅋ’ 수준의 자세로는 트러블슈팅을 하거나 올바르게 설계하기가 쉽지 않은 경우들이 잦아졌다.&lt;/p>
&lt;p>따라서 평소 궁금했던 내용 중 하나를 살짝 파헤쳐볼까한다.&lt;/p>
&lt;p>나는 주로 istio &lt;code>ingress gateway&lt;/code>와 관련된 작업을 많이 했었고 이 경우 Virtual Service는 항상 ingress gateway를 참조하도록 설정해왔다. 근데 istio를 처음 배울 때는 분명 ‘client 측에서 outbound handler로서의 Envody 사이드카을 통해 알아서 우리가 의도하는 목적지를 찾아서 요청을 보낸다.’ 이런 식으로 배웠던 것 같은데 ‘왜 나는 Virtual Service를 이용할 때 항상 Gateway를 설정해줘야하는 것이었을까?’하는 궁금증이 생겼다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Virtual Service는 Gateway에 ingress gateway를 설정해주지 않아도 되는 것일까?&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Virtual Service에 설정한 내용은 ingress gateway로 들어온 요청뿐만 아니라 mesh 내부에서의 요청에도 적용될 수 있는 것인가?&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Destination Rule은 뭐하는 녀석일까? 주로 얘는 Virtual Service와 함께 쓰는 예시가 많이 보이던데 꼭 Virtual Service와 함께 써야하는 걸까?&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>따라서 이번 글에서는 위와 같은 궁금증들에 대해 삽질해본 내용을 정리해보려한다. 작업해본 내용은 아래와 같다.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>ingress gateway를 통해 들어오는 요청이 아니라 mesh 내부에서 보내는 요청에 대해 적용될 수 있도록 Virtual Service를 정의한 뒤 mesh 내부에서 요청을 보내보기&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Virtual Service 없이 Destination 이용해보기&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h2 id="virtual-service와-destination-rule에-대해-짚고-넘어가보자">Virtual Service와 Destination Rule에 대해 짚고 넘어가보자.&lt;/h2>
&lt;blockquote>
&lt;p>virtual services as how you route your traffic to a given destination, and then you use destination rules to configure what happens to traffic for that destination. Destination rules are applied after virtual service routing rules are evaluated, so they apply to the traffic’s “real” destination.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://istio.io/latest/docs/concepts/traffic-management/#destination-rules" target="_blank" rel="noopener"
>https://istio.io/latest/docs/concepts/traffic-management/#destination-rules&lt;/a>&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;p>istio를 처음 배울 때에는 (물론 이 글을 쓰기 전까지도.. ㅎㅎ;;) Virtual Service와 Destination Rule이 참 헷갈렸다.&lt;/p>
&lt;p>Virtual Service는 Gateway를 통해 &lt;code>hosts&lt;/code> 설정한 호스트를 이용해 들어온 요청을 어떤 기준으로 어떤 (약간은 가상인) 목적지로 보내줄 것인가를 의미한다. 이 말도 좀 헷갈릴 수 있는데 예를 들면 다음과 같다.&lt;/p>
&lt;ul>
&lt;li>ingress gateway 를 통해&lt;/li>
&lt;li>Virtual Service의 hosts인 [”&lt;a class="link" href="http://foo.jinsu.me/" target="_blank" rel="noopener"
>foo.jinsu.me&lt;/a>”] 중 하나인 foo.jinsu.me를 이용해 들어온 요청을&lt;/li>
&lt;li>subset이나 weight에 따라 foo v1 이나 foo v2 로 보낸다.&lt;/li>
&lt;/ul>
&lt;p>위와 같은 설정을 해주는 것이 Virtual Service이다.&lt;/p>
&lt;p>그럼 foo v1과 foo v2는 누가 정의해줄까? 귀신 같이 알아서 v1에 대한 endpoint와 v2에 대한 endpoint를 분류할 수는 없을텐데 말이다. 바로 이때 Destination Rule이 등장한다.&lt;/p>
&lt;p>Destination Rule은 어떤 기준으로 특정 Service(쿠버의 기본 리소스 타입)에 대한 subset을 나눌지 정의할 수 있다. 혹은 그 외에도 기본적으로 Service가 제공하지 않는 유용한 방식들을 통해 Endpoint가 관리될 수 있도록 해준다. 이때 말하는 Endpoint는 쿠버의 기본 리소스 타입 중 하나인 Endpoint가 아니라 Destination Rule을 통해 실제로 트래픽이 흘려보내진다는 의미의 Endpoint를 의미한다.&lt;/p>
&lt;p>근데 뭐,,, 나름대로 두 개념을 정리해보려했는데 시원한 정리는 아닌 것 같다… 쓰다보면 감이오는데 아직 딱 깔끔하게 정리할 수 있는 수준의 이해는 아닌가보다.&lt;/p>
&lt;h2 id="mesh-내부의-통신에서도-virtual-service나-destination-rule이-동작하는가">mesh 내부의 통신에서도 virtual service나 destination rule이 동작하는가?&lt;/h2>
&lt;p>앞서 Virtual Service에 대해 설명할 때 “Gateway를 통해 들어온 요청이 …(생략)” 이라며 설명을 했는데 그렇다면 &lt;strong>Virtual Service는 ingress gateway를 통해 들어온 요청에 대한 설정만 정의가 가능하냐라고하면 그건 당연히 아니다.&lt;/strong> 애초에 istio를 통해 우리가 얻고 싶은 것은 ingress에 대한 기능뿐만 아니라 mesh 내부 통신에 대한 기능도 큰 부분일 것이니 말이다.&lt;/p>
&lt;blockquote>
&lt;p>The reserved word mesh is used to imply all the sidecars in the mesh. When this field is omitted, the default gateway (mesh) will be used, which would apply the rule to all sidecars in the mesh.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://istio.io/latest/docs/reference/config/networking/virtual-service/#VirtualService" target="_blank" rel="noopener"
>https://istio.io/latest/docs/reference/config/networking/virtual-service/#VirtualService&lt;/a>&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;p>&lt;strong>Virtual Service가 &lt;code>mesh&lt;/code> 라는 예약된 gateway 이름을 이용하면 그것은 mesh 내의 sidecar들에게 모두 적용되는 rule이 된다.&lt;/strong> Virtual Service의 gatewaymesh 내부 통신에 있어 Virtual Service의 역할이 큼에도 불구하고 아이러니하게도 위와 같은 내용을 찾아볼 수 있는 문서가 많지는 않았다.&lt;/p>
&lt;p>정리하자면 “mesh 내부의 통신에서도 virtual service나 destination rule이 동작하는가?”에 대한 대답은 아래와 같다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Virtual Service의 gateways에 &lt;code>mesh&lt;/code> 가 포함되어있거나 &lt;code>gateways&lt;/code> 가 생략되었고, client 측 envoy sidecar가 outbound handler 역할을 수행한다면 → YES&lt;/strong>&lt;/li>
&lt;li>Virtual Service의 gateways를 정의했는데 &lt;code>mesh&lt;/code> 가 포함되어있지 않다면 → NO&lt;/li>
&lt;li>client 측 envoy sidecar가 존재하지 않거나 outbound handler 역할을 제대로 수행하지 못한다면 → NO&lt;/li>
&lt;/ul>
&lt;p>그럼 한 번 실습을 통해 확인해보자.&lt;/p>
&lt;h2 id="mesh-내부-통신에서-virtual-service--destination-rule을-통해-service-subset과-weight-이용해보기">mesh 내부 통신에서 Virtual Service + Destination Rule을 통해 Service subset과 weight 이용해보기&lt;/h2>
&lt;p>&lt;code>httpping-without-sidecar&lt;/code>라는 이름의 서비스를 배포해두었고, 이는 golang으로 만들어진 요청이 들어올 때 “pong” 로그를 남기는 단순한 웹 애플리케이션이다. 이 서비스의 Pod들은 Envoy 사이드카를 주입받지 않는다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get pod -l &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>httpping-without-sidecar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">httpping-without-sidecar-v1-7fd6bfdb57-bcpdh 1/1 Running &lt;span class="m">0&lt;/span> 2m54s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">httpping-without-sidecar-v1-7fd6bfdb57-s4smn 1/1 Running &lt;span class="m">0&lt;/span> 2m54s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">httpping-without-sidecar-v1-7fd6bfdb57-zg8td 1/1 Running &lt;span class="m">0&lt;/span> 2m54s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">httpping-without-sidecar-v2-5df8b7f656-n4cvh 1/1 Running &lt;span class="m">0&lt;/span> 2m53s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">httpping-without-sidecar-v2-5df8b7f656-nfm6q 1/1 Running &lt;span class="m">0&lt;/span> 2m53s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">httpping-without-sidecar-v2-5df8b7f656-vbgpr 1/1 Running &lt;span class="m">0&lt;/span> 2m53s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>v1 과 v2에 대한 Deployment 각각 배포해두었다.&lt;/p>
&lt;p>각 버전별로 3개의 Pod가 배포되어있다.&lt;/p>
&lt;p>버전 별로 Pod들은 다음과 같이 라벨이 붙어있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># v1 Pod의 경우&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpping-without-sidecar&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># v2 Pod의 경우&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpping-without-sidecar&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Service, Destination Rule, Virtual Service는 다음과 같다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">infra-jinsu-lab&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpping-without-sidecar&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpping-without-sidecar&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Service는 version을 명시하지 않은 채 app만을 명시하는 수퍼셋으로서 정의했다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.istio.io/v1alpha3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DestinationRule&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">infra-jinsu-lab&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpping-without-sidecar-destination&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpping-without-sidecar&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">subsets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpping-without-sidecar&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpping-without-sidecar&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Destination Rule은 Service에 해당하는 Endpoint들의 Subset처럼 정의된다.&lt;/p>
&lt;p>version 라벨이 추가되었다.&lt;/p>
&lt;p>host는 Service를 가리킬 수 있는 이름이어야한다. 같은 네임스페이스일 경우 Short name으로 표현할 수도 있고, 언제는 FQDN(e.g. httpping-with-sidecar.infra-jinsu.lab.svc.cluster.local)으로 표현할 수도 있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.istio.io/v1alpha3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">VirtualService&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">infra-jinsu-lab&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpping-without-sidecar&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hosts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;httpping-without-sidecar&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gateways&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">mesh&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">match&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">uri&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">prefix&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">route&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">destination&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpping-without-sidecar&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">subset&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">number&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">weight&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">destination&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpping-without-sidecar&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">subset&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">number&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">weight&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">90&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>앞서 말한대로 클러스터 내부 통신에 대해 Virtual Service를 적용하려면 &lt;code>gateways&lt;/code> 를 생략하거나 &lt;code>mesh&lt;/code> 라는 예약된 이름의 게이트웨이를 포함시켜준다. 또한 mesh 내부 통신에 대해서는 hosts에 Destination Rule처럼 Service를 참조할 수 있는 이름을 적어준다.&lt;/p>
&lt;p>그리고서는 Destination Rule에서 정의한 v1 subset은 weight를 10으로, v2 subset은 weight를 90으로 설정해줬다. 이렇게 되면 &lt;strong>누군가가 서비스를 향해 요청을 보냈을 때 v1과 v2가 1대9의 비율로 로드밸런스가 될 것이다&lt;/strong> 🙂&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">curl -H &lt;span class="s1">&amp;#39;foo: bar&amp;#39;&lt;/span> http://httpping-without-sidecar.infra-jinsu-lab:8080/ping
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/virtual-service-destination-rule-mesh-internal-traffic/weight.png"
width="2558"
height="1409"
srcset="https://umi0410.github.io/blog/devops/virtual-service-destination-rule-mesh-internal-traffic/weight_hu479968be15567657f18e71d11f31e69a_283588_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/virtual-service-destination-rule-mesh-internal-traffic/weight_hu479968be15567657f18e71d11f31e69a_283588_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="좌측은 weight가 10인 v1 Pod 3개 | 우측은 weight가 90인 v2 Pod 3개"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;p>Envoy 사이드카가 삽입된 어떤 Pod에서 위의 커맨드를 통해 &lt;code>httpping-without-sidecar&lt;/code> 서비스로 요청을 보낸 경우의 모습이다. 좌측 로그는 v1 Pod 3개의 로그이고, 우측 로그는 v2 Pod 3개의 로그이다.&lt;/p>
&lt;p>&lt;strong>Virtual Service에서 정의한대로 대부분의 트래픽은 v2로 흘러갔고 Destination Rule에서 정의한 대로 v1, v2에 대한 subset이 잘 분류된 듯하다!&lt;/strong>&lt;/p>
&lt;p>참고로 당연히도 클라이언트 측에서 Enovy가 outbound handling을 해주지 못한다면(혹은 sidecar가 삽입되지 않았다면) weight 조절도 되지 않고 그냥 라운드로빈으로 부하가 분산될 것이다.&lt;/p>
&lt;h2 id="virtual-service-없이-destination-rule만으로-원하는-방식을-통해-부하-분산시키기">Virtual Service 없이 Destination Rule만으로 원하는 방식을 통해 부하 분산시키기&lt;/h2>
&lt;p>이번에는 &lt;strong>Virtual Service 없이 Destination Rule의 기능 중 하나인 consistentHash를 통한 로드밸런스를 해볼 것이다. 이를 이용하면 특정 키에 대한 값을 해싱해서 해당 해시 값을 담당하는 Pod에게 요청을 보낼 것이다!&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl delete virtualservice httpping-without-sidecar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">virtualservice.networking.istio.io &lt;span class="s2">&amp;#34;httpping-without-sidecar&amp;#34;&lt;/span> deleted
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Virtual Service 없이 동작함을 분명히 하기 위해 삭제해준다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.istio.io/v1alpha3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DestinationRule&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">infra-jinsu-lab&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpping-without-sidecar-destination&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpping-without-sidecar&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">trafficPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">loadBalancer&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">consistentHash&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">httpHeaderName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이번에는 Destination을 위와 같이 작성해줌으로써 헤더 중 foo라는 키에 대한 값에 따라 부하가 분산되도록 할 것이다. &lt;strong>같은 값으로 요청을 보내면 담당하는 해시 값이 변경되지 않는 한 같은 Pod로만 요청&lt;/strong>이 갈 것이다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">curl -H &lt;span class="s1">&amp;#39;foo: bar&amp;#39;&lt;/span> http://httpping-with-sidecar.infra-jinsu-lab:8080/ping
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Envoy 사이드카가 삽입되어 outbound handler가 잘 동작 중인 다른 Pod에서 위와 같이 요청을 여러 차례 보내봤다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/virtual-service-destination-rule-mesh-internal-traffic/consistent-hash.png"
width="2560"
height="1395"
srcset="https://umi0410.github.io/blog/devops/virtual-service-destination-rule-mesh-internal-traffic/consistent-hash_huec96e079d93944483a2dbb05770995ea_198415_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/virtual-service-destination-rule-mesh-internal-traffic/consistent-hash_huec96e079d93944483a2dbb05770995ea_198415_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Consistent Hash 설정 후 foo: bar라는 동일한 헤더로 요청을 보낸 경우의 로그"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="440px"
>&lt;/p>
&lt;p>위와 같이 하나의 Pod로만 요청이 간 것을 확인할 수 있었다!&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>이번 주에 업무가 정말 많았는데 이래 저래 오갔던 대화 중에 헷갈리는 부분이 있어서 갑자기 야밤에 이렇게 내용을 정리해봤다. 공식 문서를 다시 한 번 정독한 뒤 ‘아~ 얘의 역할은 이거니까 이렇게 하면 이렇게 되겠군!’이라며 살짝쿵 이해를 한 뒤에 실습을 해봤고 결과가 잘 나와서 뿌듯하다. 맘 편히 잘 수 있을 듯.&lt;/p>
&lt;p>다만 문서 내용과 컨셉들의 “역할&amp;quot;이나 “의미&amp;quot;에 대한 이해 뿐만 아니라 실제 동작 플로우까지도 알고 싶은 마음은 있는데 너무 조급해하는 것보다는 빠르진 않더라도 꾸준하게 이렇게 하나 하나 공부해나가면 될 것이라고 믿는다!&lt;/p>
&lt;h2 id="참고">참고&lt;/h2>
&lt;ul>
&lt;li>각종 istio 문서들
&lt;ul>
&lt;li>Traffic Management 컨셉 &lt;a class="link" href="https://istio.io/latest/docs/concepts/traffic-management/" target="_blank" rel="noopener"
>https://istio.io/latest/docs/concepts/traffic-management/&lt;/a>&lt;/li>
&lt;li>Traffic Management, Networking config 관련 문서 &lt;a class="link" href="https://istio.io/latest/docs/reference/config/networking/" target="_blank" rel="noopener"
>https://istio.io/latest/docs/reference/config/networking/&lt;/a>
&amp;laquo;&amp;laquo;&amp;laquo;&amp;lt; HEAD&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Using Istio VirtualService from inside of the cluster - &lt;a class="link" href="https://stackoverflow.com/questions/65626962/using-istio-virtualservice-from-inside-of-the-cluster" target="_blank" rel="noopener"
>https://stackoverflow.com/questions/65626962/using-istio-virtualservice-from-inside-of-the-cluster&lt;/a>
=======&lt;/li>
&lt;li>Using Istio VirtualService from inside of the cluster - &lt;a class="link" href="https://stackoverflow.com/questions/65626962/using-istio-virtualservice-from-inside-of-the-cluster" target="_blank" rel="noopener"
>https://stackoverflow.com/questions/65626962/using-istio-virtualservice-from-inside-of-the-cluster&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;blockquote>
&lt;blockquote>
&lt;blockquote>
&lt;blockquote>
&lt;blockquote>
&lt;blockquote>
&lt;p>a5aea5fa65117a37072d4d860951c123a5333dcf&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;/blockquote>
&lt;/blockquote>
&lt;/blockquote>
&lt;/blockquote>
&lt;/blockquote></description></item><item><title>istio와 envoy proxy를 통해 경험해보는 네트워크 인터페이스 (istio 1.10)</title><link>https://umi0410.github.io/blog/devops/istio-1-10-network-interface/</link><pubDate>Sun, 17 Jul 2022 22:00:00 +0900</pubDate><guid>https://umi0410.github.io/blog/devops/istio-1-10-network-interface/</guid><description>&lt;img src="https://umi0410.github.io/blog/devops/istio-1-10-network-interface/preview.png" alt="Featured image of post istio와 envoy proxy를 통해 경험해보는 네트워크 인터페이스 (istio 1.10)" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>요즘 istio를 공부하던 중 istio가 변화해온 과정에 대해서도 흥미가 생겨 지난 버전들의 릴리즈 노트들도 읽어보고 있습니다. 그러던 중 현 시점(2022년 7월)에는 이미 공식적인 End of Life가 지난 &lt;strong>2021년 3월 처음 릴리즈된 istio 1.10의 릴리즈 노트를 보다가 재미있는 점을 하나 발견&lt;/strong>할 수 있었는데요.&lt;/p>
&lt;p>바로 &lt;strong>envoy proxy가 &lt;code>eth0&lt;/code>에 대한 요청을 넘겨주는 container의 network interface가 &lt;code>lo&lt;/code> 에서 &lt;code>eth0&lt;/code> 로 변경되었다&lt;/strong>는 점입니다. 네트워크에 대해, 그 중에서도 특히 네트워크 인터페이스에 대해 잘 몰랐던 때에는 이 변경사항에 그닥 관심이 안 갔을 것 같은데 최근 네트워크 인터페이스에 대해 공부를 해서인지 이 변경사항에 관심이 갔습니다.&lt;/p>
&lt;p>그래서 이번 글에서는 네트워크 인터페이스와 관련된 &lt;code>istio&lt;/code> &lt;code>1.9&lt;/code> → &lt;code>1.10&lt;/code>의 변경사항을 실제 작업을 통해 확인해보려합니다. 실제 작업은 다음과 같습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>istio 1.9&lt;/strong> - 서버를 &lt;code>lo&lt;/code> (루프백 인터페이스)의 IP(127.0.0.1)로 띄운 경우 Service에 요청을 보내 성공적인 응답을 받을 수 있음을 확인&lt;/li>
&lt;li>&lt;strong>istio 1.9&lt;/strong> - 서버를 &lt;code>eth0&lt;/code> 의 IP로 띄운 경우 Service에 요청을 보내도 요청이 제대로 전달되지 않음을 확인&lt;/li>
&lt;li>&lt;strong>istio 1.10&lt;/strong> - 서버를 &lt;code>lo&lt;/code> (루프백 인터페이스)의 IP(127.0.0.1)로 띄운 경우 Service에 요청을 보내도 요청이 제대로 전달되지 않음을 확인&lt;/li>
&lt;li>&lt;strong>istio 1.10&lt;/strong> - 서버를 &lt;code>eth0&lt;/code> 의 IP로 띄운 경우 Service에 요청을 보내 성공적인 응답을 받을 수 있음을 확인&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/istio-1-10-network-interface/version-compatibility.png"
width="2602"
height="710"
srcset="https://umi0410.github.io/blog/devops/istio-1-10-network-interface/version-compatibility_hu9ee91d2674eb5146d2a8fafcbb1eff3a_90034_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/istio-1-10-network-interface/version-compatibility_hu9ee91d2674eb5146d2a8fafcbb1eff3a_90034_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="istio &amp;lt;-&amp;gt; k8s 버전 호환성"
class="gallery-image"
data-flex-grow="366"
data-flex-basis="879px"
>&lt;/p>
&lt;p>&lt;code>k8s&lt;/code> 버전은 istio 1.9와 istio 1.10 모두와 호환되는 k8s &lt;code>1.20&lt;/code> 을 이용할 것이고 k8s는 &lt;code>minikube&lt;/code>를 통해 로컬에서 구성할 것입니다.&lt;/p>
&lt;p>⚠️ 참고로 M1 맥북의 minikube에선 envoy proxy가 동작하지 않아서인지 istio를 제대로 이용할 수 없습니다. 따라서 저는 ubuntu에서 minikube를 통해 작업했습니다.&lt;/p>
&lt;h2 id="istio-19--110-변경사항-중-재미있는-점">istio 1.9 → 1.10 변경사항 중 재미있는 점&lt;/h2>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/istio-1-10-network-interface/networking-change.png"
width="2280"
height="970"
srcset="https://umi0410.github.io/blog/devops/istio-1-10-network-interface/networking-change_hu6fe6d6382b53ebbea105f054157c1f5e_208679_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/istio-1-10-network-interface/networking-change_hu6fe6d6382b53ebbea105f054157c1f5e_208679_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="1.10 릴리즈 노트"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="564px"
>&lt;/p>
&lt;p>(참고: &lt;a class="link" href="https://istio.io/latest/news/releases/1.10.x/announcing-1.10/" target="_blank" rel="noopener"
>https://istio.io/latest/news/releases/1.10.x/announcing-1.10/&lt;/a>)&lt;/p>
&lt;p>1.10 버전의 변경사항에 대해 좀 더 자세히 알아보겠습니다. 이전 버전에서는 Sidecar Envoy Proxy가 &lt;code>eth0&lt;/code>으로 들어온 요청을 &lt;code>lo&lt;/code>로 넘겨줘왔는데 이번 버전(1.10)에서부터는 &lt;code>eth0&lt;/code>로 들어온 요청을 eth0로 넘겨준다는 것입니다.&lt;/p>
&lt;p>대부분 서버를 띄울 때 &lt;code>0.0.0.0&lt;/code>을 통해 loopback interface와 ethernet interface 모두에 서버를 띄우는 경우가 많아 해당 내용이 큰 변화를 가져오진 않을 수 있습니다.&lt;/p>
&lt;p>하지만 만약 기존에 특정 interface의 IP만을 지정해서 서버를 띄우는 경우가 있었다면 이 변경사항으로 인해 통신 장애가 발생할 수 있습니다.&lt;/p>
&lt;ul>
&lt;li>loopback interface의 IP로만 서버를 띄운 경우 → &lt;code>eth0&lt;/code>로 보낸 요청을 sidecar를 거쳐 &lt;code>lo&lt;/code>가 받을 수 있던 컨테이너가 요청을 받을 수 없어짐.&lt;/li>
&lt;li>eth0 interface의 IP로만 서버를 띠운 경우 → &lt;code>eth0&lt;/code>로 보낸 요청을 sidecar를 거쳐 여전히 &lt;code>eth0&lt;/code>가 요청을 받을 수 있어짐.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>이러한 변경 사항이 추가된 이유는?&lt;/strong>&lt;/p>
&lt;p>On-premise나 non-k8s 환경에서는 보통 &lt;code>lo&lt;/code> 에 서버를 띄우는 경우는 외부에서의 접속을 막으려는 경우일 것입니다. 반면 &lt;code>eth0&lt;/code> 에 서버를 띄우는 경우는 외부에서의 접속을 허용하려는 경우일 것입니다.&lt;/p>
&lt;p>하지만 이전에는 이러한 기존 환경에서 istio를 도입하게 되면 기존의 의도와 반대되게 오히려 &lt;code>lo&lt;/code> 에 서버를 띄운 경우 오히려 envoy sidecar에게 요청을 전달받을 수 있어지고, &lt;code>eth0&lt;/code> 에 서버를 띄운 경우는 오히려 enovy sidecar에게 요청을 전달받을 수 없었던 모순된 상황이 발생했다고 합니다.&lt;/p>
&lt;p>따라서 이러한 모순된 상황들을 방지하고자 이러한 변경사항이 추가되었다고 합니다.&lt;/p>
&lt;h2 id="minikube를-통해-k8s-12015-환경-구축하기">minikube를 통해 k8s 1.20.15 환경 구축하기&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ minikube start --profile k8s-1-20 --kubernetes-version 1.20.15
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위의 명령어를 통해 특정 k8s 버전(1.20.15)의 환경을 로컬에 구축할 수 있습니다.&lt;/p>
&lt;h2 id="k8s에-istio-19와-110-설치하기">k8s에 istio 1.9와 1.10 설치하기&lt;/h2>
&lt;p>istioctl을 통해 두 버전의 istio를 k8s cluster에 배포해줄 것입니다.&lt;/p>
&lt;p>istioctl의 버전에 맞게 istio가 설치되기 때문에 그때 그때 편리하게 istioctl의 버전을 변경해야합니다. 따라서 저는 &lt;a class="link" href="https://github.com/asdf-vm/asdf" target="_blank" rel="noopener"
>asdf&lt;/a>라는 도구를 사용했습니다. 스타 수는 적지만 &lt;a class="link" href="https://github.com/virtualstaticvoid/asdf-istioctl" target="_blank" rel="noopener"
>asdf의 istioctl plugin&lt;/a>을 이용하기도 했습니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/istio-1-10-network-interface/istioctl-profiles.png"
width="3182"
height="582"
srcset="https://umi0410.github.io/blog/devops/istio-1-10-network-interface/istioctl-profiles_huc2f3f759952870d04254f07cdea3bebc_60119_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/istio-1-10-network-interface/istioctl-profiles_huc2f3f759952870d04254f07cdea3bebc_60119_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="미리 정의되어 있는 Profile 목록"
class="gallery-image"
data-flex-grow="546"
data-flex-basis="1312px"
>&lt;/p>
&lt;p>참고: &lt;a class="link" href="https://istio.io/latest/docs/setup/additional-setup/config-profiles/" target="_blank" rel="noopener"
>https://istio.io/latest/docs/setup/additional-setup/config-profiles/&lt;/a>&lt;/p>
&lt;p>istioctl을 통해 istio를 클러스터에 배포할 때에는 미리 정의되어있는 profile이라는 것을 이용해 좀 더 편리하게 설정을 해줄 수 있습니다. 이번 작업에서 gateway들은 필요 없기 때문에 저는 minimal profile을 통해 설치해주겠습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">asdf plugin-add istioctl https://github.com/virtualstaticvoid/asdf-istioctl.git &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>asdf install istioctl 1.9.9 &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>asdf install istioctl 1.10.6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위의 명령어를 통해 istioctl 1.9.9와 1.10.6 두 버전을 모두 설치할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ asdf global istioctl 1.9.9 &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> istioctl version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">no running Istio pods in &lt;span class="s2">&amp;#34;istio-system&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1.9.9
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>istioctl 1.9.9를 이용하도록 설정합니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">istioctl install --set &lt;span class="nv">profile&lt;/span>&lt;span class="o">=&lt;/span>minimal --set &lt;span class="nv">revision&lt;/span>&lt;span class="o">=&lt;/span>1-9 --set values.global.proxy.holdApplicationUntilProxyStarts&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">! values.global.proxy.holdApplicationUntilProxyStarts is deprecated&lt;span class="p">;&lt;/span> use meshConfig.defaultConfig.holdApplicationUntilProxyStarts instead
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">! Istio is being downgraded from 1.9.0 -&amp;gt; 1.9.9.This will install the Istio 1.9.9 minimal profile with &lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;Istio core&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;Istiod&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span> components into the cluster. Proceed? &lt;span class="o">(&lt;/span>y/N&lt;span class="o">)&lt;/span> y
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✔ Istio core installed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✔ Istiod installed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✔ Installation &lt;span class="nb">complete&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>istio 1.9.9를 &lt;code>1-9&lt;/code>라는 revision으로 깔아줍니다.&lt;/p>
&lt;p>&lt;code>values.global.proxy.holdApplicationUntilProxyStarts&lt;/code>와 &lt;code>meshConfig.defaultConfig.holdApplicationUntilProxyStarts&lt;/code>는 envoy proxy가 준비된 뒤에
우리가 정의한 실제 컨테이너를 시작하는 옵션입니다. 전자는 Deprecated 되었다고 경고가 뜨지만 적용해본 결과 1.9 버전 대에서는 여전히 전자를 사용하는 것 같더라구요.
따라서 저는 1.9.9 버전에서는 전자의 인자를, 1.10.6 버전에서는 후자의 인자를 적용해주었습니다.&lt;/p>
&lt;p>만약 envoy proxy가 완전히 준비되기 전에 다른 컨테이너에서 네트워크 작업을 수행하면 해당 작업은 성공적으로 수행되지 않을 것입니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ asdf global istioctl 1.10.6 &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> istioctl version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">client version: 1.10.6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">control plane version: 1.9.9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data plane version: none
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>istioctl 1.10.6을 이용하도록 설정합니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ istioctl install --set &lt;span class="nv">profile&lt;/span>&lt;span class="o">=&lt;/span>minimal --set &lt;span class="nv">revision&lt;/span>&lt;span class="o">=&lt;/span>1-10 --set meshConfig.defaultConfig.holdApplicationUntilProxyStarts&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WARNING: Istio is being upgraded from 1.9.9 -&amp;gt; 1.10.6.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WARNING: Before upgrading, you may wish to use &lt;span class="s1">&amp;#39;istioctl analyze&amp;#39;&lt;/span> to check forIST0002 and IST0135 deprecation warnings.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">This will install the Istio 1.10.6 minimal profile with &lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;Istio core&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;Istiod&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span> components into the cluster. Proceed? &lt;span class="o">(&lt;/span>y/N&lt;span class="o">)&lt;/span> y
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✔ Istio core installed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✔ Istiod installed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✔ Installation &lt;span class="nb">complete&lt;/span> Thank you &lt;span class="k">for&lt;/span> installing Istio 1.10. Please take a few minutes to tell us about your install/upgrade experience! https://forms.gle/KjkrDnMPByq7akrYA
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>istio 1.10.6을 &lt;code>1-10&lt;/code>이라는 revision으로 깔아줍니다.&lt;/p>
&lt;p>워닝이 떠있긴 하지만 그닥 상관은 없습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get pod -n istio-system
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">istiod-1-10-5cd4d5b44d-b98xm 1/1 Running &lt;span class="m">0&lt;/span> 84s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">istiod-1-9-6b549b9d87-9f76b 1/1 Running &lt;span class="m">0&lt;/span> 2m56s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>잘 깔렸다면 위와 같이 Pod들이 성공적으로 떴을 것입니다.&lt;/p>
&lt;h2 id="istio-sidecar가-injected된-netcat-server--client-pod-배포하기">istio sidecar가 injected된 netcat server &amp;amp; client Pod 배포하기&lt;/h2>
&lt;p>이제 netcat server이자 client가 될 Pod 들을 배포해줄 것입니다.&lt;/p>
&lt;p>배포할 리소스들은 모두 다음과 같습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Namespace rev-1-9&lt;/strong> - istio 1.9의 sidecar inject를 받을 Namespace&lt;/li>
&lt;li>&lt;strong>Namespace rev-1-10&lt;/strong> - istio 1.10의 sidecar inject를 받을 Namespace&lt;/li>
&lt;li>&lt;strong>Pod netcat-client&lt;/strong> - &lt;code>default&lt;/code> Namespace에서 각 Service를 통해 netcat 요청을 날려줄 client&lt;/li>
&lt;li>&lt;strong>Pod netcat-lo&lt;/strong> - &lt;code>lo&lt;/code> 인터페이스의 IP 에 netcat 서버를 띄우는 Pod.&lt;/li>
&lt;li>&lt;strong>Pod netcat-eth0&lt;/strong> - &lt;code>eth0&lt;/code> 인터페이스의 IP에 netcat 서버를 띄우는 Pod.&lt;/li>
&lt;li>&lt;strong>Service lo&lt;/strong> - &lt;code>lo&lt;/code> 인터페이스의 IP에 netcat 서버를 띄운 Pod를 노출시켜줄 Service&lt;/li>
&lt;li>&lt;strong>Service eth0&lt;/strong> - &lt;code>eth0&lt;/code> 인터페이스의 IP에 netcat 서버를 띄운 Pod를 노출시켜줄 Service&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>(netcat 서버 Pod는 8080 포트에 요청이 TCP 커넥션이 형성되면 “pong”으로 응답하는 Pod입니다.)&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Namespace&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">istio.io/rev&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1-9&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-9&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Namespace&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">istio.io/rev&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1-10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">netcat-client&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu:22.04&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;/bin/bash&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;-c&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> apt update &amp;amp;&amp;amp; apt install -y ncat
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> while true;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> do sleep 60;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> done;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">netcat-client&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-9&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">netcat-lo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-9-lo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu:22.04&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;/bin/bash&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;-c&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> apt update &amp;amp;&amp;amp; apt install -y net-tools ncat
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> ifconfig eth0 | grep &amp;#39;inet &amp;#39; | awk &amp;#39;{print $2}&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> while true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> do echo &amp;#39;pong&amp;#39; | nc -l 127.0.0.1 8080
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> sleep 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> done&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">netcat-lo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">istio.io/rev&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1-10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-10-lo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu:22.04&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;/bin/bash&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;-c&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> apt update &amp;amp;&amp;amp; apt install -y net-tools ncat
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> while true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> do echo &amp;#39;pong&amp;#39; | nc -l 127.0.0.1 8080
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> sleep 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> done&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-9&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">netcat-eth0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">istio.io/rev&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1-9&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-9-eth0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu:22.04&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;/bin/bash&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;-c&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> apt update &amp;amp;&amp;amp; apt install -y net-tools ncat
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> ifconfig eth0 | grep &amp;#39;inet &amp;#39; | awk &amp;#39;{print $2}&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> while true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> do echo &amp;#39;pong&amp;#39; | nc -l $(ifconfig eth0 | grep &amp;#39;inet &amp;#39; | awk &amp;#39;{print $2}&amp;#39;) 8080
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> sleep 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> done&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">netcat-eth0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">istio.io/rev&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1-10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-10-eth0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu:22.04&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;/bin/bash&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;-c&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> apt update &amp;amp;&amp;amp; apt install -y net-tools ncat
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> ifconfig eth0 | grep &amp;#39;inet &amp;#39; | awk &amp;#39;{print $2}&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> while true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> do echo &amp;#39;pong&amp;#39; | nc -l $(ifconfig eth0 | grep &amp;#39;inet &amp;#39; | awk &amp;#39;{print $2}&amp;#39;) 8080
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> done&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-9&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">lo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-9-lo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-9&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">eth0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-9-eth0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">lo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-10-lo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">eth0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rev-1-10-eth0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl apply -f tmp.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">namespace/rev-1-9 created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">namespace/rev-1-10 created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pod/netcat-client created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pod/netcat-lo created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pod/netcat-lo created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pod/netcat-eth0 created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pod/netcat-eth0 created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">service/lo created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">service/eth0 created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">service/lo created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">service/eth0 created
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위의 명령어들을 이용해 sidecar가 injected될 netcat 서버와 클라이언트 Pod를 배포해줍니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get pod -A
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAMESPACE NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">default netcat-client 1/1 Running &lt;span class="m">0&lt;/span> 15m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">istio-system istiod-1-10-5cd4d5b44d-8lv2h 1/1 Running &lt;span class="m">0&lt;/span> 145m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">istio-system istiod-1-9-5ccbd888d8-scdzz 1/1 Running &lt;span class="m">0&lt;/span> 107m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rev-1-10 netcat-eth0 2/2 Running &lt;span class="m">0&lt;/span> 18m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rev-1-10 netcat-lo 2/2 Running &lt;span class="m">0&lt;/span> 18m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rev-1-9 netcat-eth0 2/2 Running &lt;span class="m">1&lt;/span> 17m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rev-1-9 netcat-lo 2/2 Running &lt;span class="m">1&lt;/span> 17m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get svc -A
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAMESPACE NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span class="o">(&lt;/span>S&lt;span class="o">)&lt;/span> AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">default kubernetes ClusterIP 10.96.0.1 &amp;lt;none&amp;gt; 443/TCP 3h10m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">istio-system istiod-1-10 ClusterIP 10.110.227.112 &amp;lt;none&amp;gt; 15010/TCP,15012/TCP,443/TCP,15014/TCP 3h3m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">istio-system istiod-1-9 ClusterIP 10.107.205.100 &amp;lt;none&amp;gt; 15010/TCP,15012/TCP,443/TCP,15014/TCP 145m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-system kube-dns ClusterIP 10.96.0.10 &amp;lt;none&amp;gt; 53/UDP,53/TCP,9153/TCP 3h10m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rev-1-10 eth0 ClusterIP 10.111.38.103 &amp;lt;none&amp;gt; 8080/TCP 35m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rev-1-10 lo ClusterIP 10.106.100.209 &amp;lt;none&amp;gt; 8080/TCP 35m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rev-1-9 eth0 ClusterIP 10.105.29.177 &amp;lt;none&amp;gt; 8080/TCP 35m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rev-1-9 lo ClusterIP 10.100.228.64 &amp;lt;none&amp;gt; 8080/TCP 35m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>성공적으로 배포했다면 위와 같을 것입니다.&lt;/p>
&lt;h2 id="netcat-서버들에게-요청-보내보기">netcat 서버들에게 요청 보내보기&lt;/h2>
&lt;p>kubectl exec와 netcat 명령어를 통해 &lt;code>netcat-client&lt;/code> 의 이름으로 배포한 Pod로 각 Service들을 거쳐 각 Pod에게 요청을 보내볼 것입니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">exec&lt;/span> -n default netcat-client -- bash -c &lt;span class="s2">&amp;#34;echo &amp;#39;ping&amp;#39; | nc lo.rev-1-9 8080&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pong
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">exec&lt;/span> -n default netcat-client -- bash -c &lt;span class="s2">&amp;#34;echo &amp;#39;ping&amp;#39; | nc eth0.rev-1-9 8080&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Ncat: Connection reset by peer.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">command&lt;/span> terminated with &lt;span class="nb">exit&lt;/span> code &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>각 Pod의 netcat server가 성공적으로 실행되면 위와 같이 &lt;code>netcat-client&lt;/code> Pod를 이용해 명령을 날려 응답을 받아볼 수 있습니다.&lt;/p>
&lt;p>(&lt;strong>초기 서버가 구동되기까지 다소 시간이 걸릴 수 있습니다.&lt;/strong> 이 경우 서버의 로그를 통해 서버가 구동됐는지를 확인해보는 것이 좋습니다.)&lt;/p>
&lt;p>&lt;code>eth0&lt;/code>의 IP에 서버를 띄운 Pod를 목적지로 하는 Service에게 요청을 보낼 경우 해당 목적지 Pod가 istio 1.9에 의해 sidecar injection 되었다면 Pod 내의 서버는 올바르게 요청을 전달받을 수 없습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">exec&lt;/span> -n default netcat-client -- bash -c &lt;span class="s2">&amp;#34;echo &amp;#39;ping&amp;#39; | nc lo.rev-1-10 8080&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Ncat: Connection reset by peer.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">command&lt;/span> terminated with &lt;span class="nb">exit&lt;/span> code &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">exec&lt;/span> -n default netcat-client -- bash -c &lt;span class="s2">&amp;#34;echo &amp;#39;ping&amp;#39; | nc eth0.rev-1-10 8080&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pong
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>istio 1.10을 이용한 경우 결과는 예상대로 istio 1.9와 반대입니다.&lt;/p>
&lt;p>&lt;code>lo&lt;/code> 의 IP에 서버를 띄운 Pod를 목적지로 하는 Service에게 요청을 보낼 경우 해당 목적지 Pod가 istio 1.10에 의해 sidecar injection 되었다면 Pod 내의 서버는 올바르게 요청을 전달받을 수 없습니다.&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>요즘 버전이 참 중요하다는 생각이 듭니다. 실제로 &lt;strong>이렇게 버전에 따라 통신이 되고 안 되고가 결정될 수 있다는 것을 확인해보니 한층 더 버전이 중요하게 느껴집니다.&lt;/strong>&lt;/p>
&lt;p>따로 컨테이너 이미지를 제작하고 imagePullSecret을 기입하기 귀찮아서 기존에 존재하는 Ubuntu 이미지를 활용하려다 보니 간단하게 네트워크 통신을 하기 위해 netcat을 적극 활용해봤습니다. 오히려 너무 코드가 길어졌나 싶기도하네요.&lt;/p>
&lt;p>이 작업을 하면서 완전히 이해하지 못한 부분이 한 가지 존재하긴 합니다. 작업하며 경험한 바로는 Pod의 IP로 요청을 보내는 경우에는 istio 버전에 무관하게 eth0의 IP로 서버를 띄워야만 외부(동료 Pod들)에서는 접속이 가능하고, lo의 IP로 서버를 띄우는 경우 Pod의 IP로 접속이 불가능했는데요. 사실 이로 인해 많은 삽질을 했습니다… 왜 서비스로 접속할 때에는 예상대로 버전에 맞는 동작을 하는데, Pod의 IP로 직접 접속할 때에는 무조건 eth0의 IP로 서버를 띄운 경우에만 외부에서 접근이 가능한지는 잘 모르겠습니다.&lt;/p>
&lt;p>하지만 과거 버전의 istio를 통해 네트워크 인터페이스의 동작을 확인해보는 것은 이 정도로 충분할 것 같다고 생각이 들어 이번 글은 여기서 마무리 지으려합니다. 🙂&lt;/p></description></item><item><title>쿠버네티스로 Clova AI Custom Extension 배포하기 (feat. Istio, Cert Manager)</title><link>https://umi0410.github.io/blog/clova-ai-on-k8s/</link><pubDate>Wed, 13 Jul 2022 23:00:00 +0900</pubDate><guid>https://umi0410.github.io/blog/clova-ai-on-k8s/</guid><description>&lt;img src="https://umi0410.github.io/blog/clova-ai-on-k8s/preview.png" alt="Featured image of post 쿠버네티스로 Clova AI Custom Extension 배포하기 (feat. Istio, Cert Manager)" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>&lt;img src="https://umi0410.github.io/blog/clova-ai-on-k8s/preview.png"
width="827"
height="555"
srcset="https://umi0410.github.io/blog/clova-ai-on-k8s/preview_hu0de35698344aa28c3f5141b2d5dcaef6_812038_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/clova-ai-on-k8s/preview_hu0de35698344aa28c3f5141b2d5dcaef6_812038_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Clova AI 스피커"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="357px"
>&lt;/p>
&lt;p>&lt;strong>올해에는 많은 변화가 있었다!&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>💼 &lt;strong>데브옵스 엔지니어&lt;/strong>로 회사를 가게 됐고 아주 만족 중이다!&lt;/li>
&lt;li>🏠 회사의 좋은 보상, 복지에 힘입어 생애 첫 &lt;strong>자취&lt;/strong>를 하게 됐다.&lt;/li>
&lt;li>💻 &lt;strong>네트워크&lt;/strong>나 &lt;strong>리눅스&lt;/strong>, &lt;strong>보안&lt;/strong> 등 딥한 영역에 좀 더 관심을 갖게 됐다.&lt;/li>
&lt;li>🎸 &lt;strong>기타&lt;/strong>를 꾸준히 다니고 있다.&lt;/li>
&lt;/ul>
&lt;p>그런 변화들 속에서 자취방에 인터넷 설치를 하게 됐는데 &lt;strong>클로바 AI 스피커&lt;/strong>를 공짜로 주더라.&lt;/p>
&lt;p>본가에 있을 때도 쓰긴 했는데 딱히 관심 없다가 직접 클로바 앱을 깔아서 이것저것 써보니 &amp;lsquo;전보다 재밌네..? ㅎㅎ&amp;rsquo; 싶었고, &amp;lsquo;아니 이거 직접 만들지는 못하나&amp;rsquo;하는 생각이 들던 참에 &amp;ldquo;스킬 스토어”라는 게 눈에 띄었다. 스킬 스토어에는 개별 개발사들이 개발한 자기네 기능들이 소개되어있었다.&lt;/p>
&lt;p>요즘 재미있게 딥한 영역을 공부해나가고 있긴 하지만 너무 딥한 것만 하다보니 심심풀이 작업 좀 즐기고 싶은 마음에 나도 하나 스킬을 만들어보고자 했다. 마침 요즘 &lt;code>istio&lt;/code>에도 관심이 많이 갔고 적용해보고 싶었는데 갖고 있던 k8s 클러스터에 istio는 배포해놓은 상태였고, &lt;code>Gateway&lt;/code>, &lt;code>VirtualService&lt;/code> 등의 &lt;code>CRD&lt;/code>와 &lt;code>인증서&lt;/code>만 잘 만져주면 스킬을 공개할 수 있을 것 같았다.&lt;/p>
&lt;p>그리하여 &amp;ldquo;&lt;strong>우미, 미스터 디버거&lt;/strong>&amp;ldquo;라는 스킬을 개발하고자 했고 이 녀석의 기능은 사용자가 &amp;ldquo;디버거, 디버깅 팁 좀 알려줘&amp;quot;라는 식으로 요청하면 미리 정의해놓은 디버깅 팁(e.g. &amp;ldquo;환경변수가 잘 설정되어있나요?&amp;rdquo;) 중에서 랜덤으로 팁을 알려주는 것이다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>이번 글은 그냥 일기장 같은 느낌으로 CS 지식은 일부 제외하고 적어보려합니다.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;em>이번 글에서 사용한 소스코드는 Github &lt;a class="link" href="https://github.com/umi0410/umi-mrdebugger" target="_blank" rel="noopener"
>umi0410/umi-mrdebugger&lt;/a>에서 찾아보실 수 있습니다.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;h2 id="환경-및-버전-정보">환경 및 버전 정보&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>이름&lt;/th>
&lt;th>버전&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>k8s cluster&lt;/td>
&lt;td>1.22&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Istio&lt;/td>
&lt;td>1.11.8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cert-manager&lt;/td>
&lt;td>1.8.2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>실제로 실무를 다루고 최신 기술들을 이용하다보니 &lt;strong>최근 버전으로 인한 삽질이 잦았다&lt;/strong>. 따라서 혹시 참고하실 분이 계실까 싶어 내 클러스터의 환경 및 버전 정보를 정리해봤다. &lt;strong>버전은 참 중요하다&lt;/strong>. 각 도구들의 호환성을 잘 확인해봐야한다.&lt;/p>
&lt;p>나는 클러스터를 한동안 업그레이드 해주지 않아 2022년 7월 기준으로 그냥 저냥 최신은 아닌 &lt;a class="link" href="https://kubernetes.io/releases/patch-releases/#1-22" target="_blank" rel="noopener"
>1.22 버전&lt;/a>의 k8s 클러스터를 갖고 있었고 istio는 k8s 1.22와 호환되는 버전 중 가장 오래된 minor 버전의 &lt;a class="link" href="https://istio.io/latest/docs/releases/supported-releases/" target="_blank" rel="noopener"
>1.11.8&lt;/a>을 사용했다. istio를 최대한 구버전으로 이용해본 이유는 istio를 업그레이드해나가면서 istio의 변경사항, 역사등을 공부하면 좋을 것 같기 때문이었다. 때로는 업그레이드 작업을 실제로 진행해야할 수도 있고 말이다.&lt;/p>
&lt;p>&lt;code>cert-manager&lt;/code>는 가끔 CRD api version이 변경되는 경우가 있어서 그냥 기록해놨다.&lt;/p>
&lt;p>&lt;code>k8s&lt;/code>는 &lt;code>GKE&lt;/code>를 이용 중이고 &lt;code>istio&lt;/code>는 &lt;code>istioct&lt;/code>l로, &lt;code>cert-manager&lt;/code>는 &lt;code>Helm3&lt;/code>로 관리 중이다.&lt;/p>
&lt;h2 id="서버-개발하기">서버 개발하기&lt;/h2>
&lt;p>서버 개발은 별거 없다. 그냥 HTTP Post 요청 분석 후 응답을 주면 된다. 실제로 정말 그 정도 수준이라 퇴근 후 몇 시간 만에 개발 → 배포까지 완료할 수 있었다. 생각보다 금방이었다.&lt;/p>
&lt;p>직상된 지 몇 년은 된 듯하면서 &lt;a class="link" href="https://developers.naver.com/docs/clova/custom_ext/Develop/Guides/Build_Custom_Extension.md" target="_blank" rel="noopener"
>그닥 친절하진 않은 공식 문서&lt;/a>와 &lt;a class="link" href="https://developers.naver.com/docs/clova/custom_ext/Develop/Examples/Extension_Examples.md#CoinHelper" target="_blank" rel="noopener"
>예시 프로젝트(코인헬퍼)&lt;/a>를 참고하면 쉽게 만들어볼 수 있다. 나는 예시 프로젝트인 코인헬퍼 레포지토리를 포크 떠서 개발했다.&lt;/p>
&lt;p>&amp;ldquo;우미, 미스터 디버거&amp;rdquo; 레포지토리: &lt;a class="link" href="https://github.com/umi0410/umi-mrdebugger" target="_blank" rel="noopener"
>https://github.com/umi0410/umi-mrdebugger&lt;/a>&lt;/p>
&lt;p>(&lt;em>일기장스러운 글이므로 코드를 해석하진 않겠습니다.&lt;/em>)&lt;/p>
&lt;p>많은 예시 프로젝트 중 코인헬퍼를 골라 개발해나간 이유는 유일하게 Go언어로 개발된 예시 프로젝트였기 때문일 뿐이었다. 실제로는 그냥 타입 선언이랑 유틸 함수 정도만 가져오고 나머진 다 재구현하게 되긴 했다. 기존엔 내장 &lt;code>http&lt;/code> package를 사용했는데 &lt;code>fiber&lt;/code>라는 웹프레임워크 이용하도록 변경하는 등..&lt;/p>
&lt;h2 id="쿠버네티스에-배포하기">쿠버네티스에 배포하기&lt;/h2>
&lt;p>쿠버네티스에 배포된 istio를 통해 외부에서 서버 Pod로 접속 가능하게끔 해줄 것이고, cert-manager를 통해 인증서 발급 후 해당 인증서와 관련된 시크릿을 istio가 가져가서 tls를 제공한다.&lt;/p>
&lt;p>&lt;em>(k8s manifest file 또한 앞서 언급했듯 &lt;a class="link" href="https://github.com/umi0410/umi-mrdebugger" target="_blank" rel="noopener"
>https://github.com/umi0410/umi-mrdebugger&lt;/a> 에서 찾아보실 수 있습니다.)&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">umi-mrdebugger/k8s $ tree 4s 00:38:42
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── certificate.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── cluster-issuer.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── deployment.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── gateway.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── svc.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── virtual-svc.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>필요한 항목들은 k8s 리소스들은 위와 같다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># cluster-issuer.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cert-manager.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterIssuer&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">clova-issuer&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cert-manager&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">acme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># The ACME server URL&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://acme-v02.api.letsencrypt.org/directory&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">email&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dev.umijs@gmail.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Name of a secret used to store the ACME account private key&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">privateKeySecretRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">clova-issuer-secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">solvers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">http01&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ingress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">class&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">istio&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>cert-manager가 Let&amp;rsquo;s Encrypt로 인증서를 발급받을 수 있게 해주는 ClusterIssuer를 작성한다. 아마 Certificate와 동일 네임스페이스를 이용한다면 ClusterIssuer가 아닌 Issuer여도 괜찮을 것이다.&lt;/p>
&lt;p>그리고 기존에는 Challenge 방식을 DNS01로 했었는데 DNS01 방식이 약간 가물 가물해져서 우선은 HTTP01 방식으로 도메인을 인증하기로 했다.&lt;/p>
&lt;p>참고로 HTTP01 방식을 이용하는 경우 인증서를 발급받기 전부터 미리 HTTP → HTTPS 를 설정해두면 Challenge가 성공적으로 이루어지지 않는 듯하다. 아마 HTTPS로 리다이렉트 되는데 인증서가 없다보니 HTTPS 통신이 원활하지 않아서겠다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># certificate.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cert-manager.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Certificate&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger-cert&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">istio-system&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">secretName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger-cert-secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">commonName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger.clova.jinsu.me&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">issuerRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">clova-issuer&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterIssuer&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cert-manager.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">dnsNames&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;mrdebugger.clova.jinsu.me&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>HTTP01 방식으로 Challenge를 진행하기 때문에 와일드카드(*, asterisk)는 사용하지 못해 그냥 사용할 도메인 네임인 &lt;a class="link" href="http://mrdebugger.clova.jinsu.me" target="_blank" rel="noopener"
>mrdebugger.clova.jinsu.me&lt;/a> 를 적어주었다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># deployment.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">revisionHistoryLimit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">terminationGracePeriodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">umi0410/mrdebugger&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">readinessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/health&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">timeoutSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">successThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">failureThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># svc.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterIP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이번엔 그저 그런 평범한 서버 Pod를 배포해줄 Deployment와 그것을 노출시켜주는 Service를 작성해줬다. 이건 뭐 설명할 건 없다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># gateway.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.istio.io/v1alpha3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">istio&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ingressgateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">servers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">number&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hosts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;mrdebugger.clova.jinsu.me&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c">#tls:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># httpsRedirect: true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">number&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">443&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTPS&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hosts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;mrdebugger.clova.jinsu.me&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tls&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">mode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">SIMPLE&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">credentialName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger-cert-secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>istio의 Gateway CRD를 정의하자. 배포되어있는 istio ingress gateway를 selector로 선택해주고 아까 정의한 인증서가 담길 secret을 TLS에서 사용하도록 한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># virtual-svc.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.istio.io/v1alpha3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">VirtualService&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hosts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;*&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gateways&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">mrdebugger&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">match&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">uri&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">prefix&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">route&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">destination&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mrdebugger&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">number&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>마지막으로 istio의 VirtualService CRD를 정의해주면 된다. 그냥 모든 요청을 mrdebugger 서비스로 넘겨준다고 보면 된다.&lt;/p>
&lt;p>💡 몇 가지 istio CRD에 대해 헷갈리는 부분들을 정의해보자면 다음과 같다.&lt;/p>
&lt;ul>
&lt;li>Gateway는 istio ingress gateway와 다르다.
&lt;ul>
&lt;li>Gateway는 CRD이고, ingress gateway는 자신을 selector로 설정한 Gateway를 보고 해당 설정을 적용한다.&lt;/li>
&lt;li>마치 Ingress와 Nginx Ingress Controller 같은 느낌이랄까&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>istio ingress gateway는 보통 istio-system 네임스페이스에 존재한다.&lt;/li>
&lt;li>Gateway는 아무 네임스페이스에 만들어도 된다.&lt;/li>
&lt;li>VirtualSevice 또한 아무 네임스페이스에 만들어도 된다.
&lt;ul>
&lt;li>단, VirtualService의 destination은 접근 가능한 mesh 내의 호스트여야하고 네임스페이스가 다른 경우 적절한 도메인 네임을 써야할 수 있다.&lt;/li>
&lt;li>같은 네임스페이스의 경우 service name만으로 이용 가능하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Service, Deployment, Pod, … 또한 아무 네임스페이스에 만들어도 된다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">umi-mrdebugger $ kubectl create ns mrdebugger
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">namespace/mrdebugger created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">umi-mrdebugger $ kubectl label namespace mrdebugger istio-injection&lt;span class="o">=&lt;/span>enabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">namespace/mrdebugger labeled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">umi-mrdebugger $ kubectl apply -n mrdebugger -f k8s/!&lt;span class="o">[&lt;/span>clova-extension.png&lt;span class="o">](&lt;/span>clova-extension.png&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">certificate.cert-manager.io/mrdebugger-cert created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">clusterissuer.cert-manager.io/clova-issuer created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment.apps/mrdebugger created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gateway.networking.istio.io/mrdebugger created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">service/mrdebugger created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">virtualservice.networking.istio.io/mrdebugger created
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>한 번에 리소스가 빵 떠서 잘 연결되면 좋겠지만,,, 당연히도 현실실은 그렇진 않다. 🥲&lt;/p>
&lt;p>자잘한 이슈들을 해결해주고 나면 다음과 같이 서버에게 성공적으로 응답을 받을 수 있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 인증서가 READY 되었다!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get cert -n istio-system mrdebugger-cert
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME READY SECRET AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mrdebugger-cert True mrdebugger-cert-secret 28m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ curl https://mrdebugger.clova.jinsu.me/health
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OK
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>🎉 굿. 좋당!&lt;/p>
&lt;h2 id="clova-ai-console에서-custom-extension-등록하기">Clova AI Console에서 Custom Extension 등록하기&lt;/h2>
&lt;p>&lt;img src="https://umi0410.github.io/blog/clova-ai-on-k8s/clova-extension.png"
width="2644"
height="1168"
srcset="https://umi0410.github.io/blog/clova-ai-on-k8s/clova-extension_hu30a22d310386de55f6d8e7b01bdb85ec_145585_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/clova-ai-on-k8s/clova-extension_hu30a22d310386de55f6d8e7b01bdb85ec_145585_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Clova AI Console"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="543px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://developers.naver.com/console/clova/cek/#/list" target="_blank" rel="noopener"
>Clova AI Console&lt;/a>에 가서 자신의 Extension을 생성하면 된다. 만드는 과정은 별건 없다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/clova-ai-on-k8s/invoke-name.png"
width="988"
height="388"
srcset="https://umi0410.github.io/blog/clova-ai-on-k8s/invoke-name_huecd3aea919113a87c5572f6224b5da9d_24552_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/clova-ai-on-k8s/invoke-name_huecd3aea919113a87c5572f6224b5da9d_24552_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="호출 이름 설정"
class="gallery-image"
data-flex-grow="254"
data-flex-basis="611px"
>&lt;/p>
&lt;p>이것만 잘 설정해주면 되는데 보통 &amp;ldquo;{{호출 이름}} 시작해줘&amp;quot;로 스킬이 시작되는 것 같다. 그 이후는 세션이 끊어지지 않으면 세션의 컨텍스트를 살려 대화할 수는 있는듯 하다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/clova-ai-on-k8s/build-interaction.png"
width="1822"
height="1292"
srcset="https://umi0410.github.io/blog/clova-ai-on-k8s/build-interaction_hu5f82ae87db59611aea885b4d853686af_141265_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/clova-ai-on-k8s/build-interaction_hu5f82ae87db59611aea885b4d853686af_141265_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Interaction 모델 빌드"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="338px"
>&lt;/p>
&lt;p>그리고 나선 Interaction 모델 설정에 들어가 빌드를 해줘야한다. 자신이 Custom Intent를 사용하지 않는다해도 무조건 한 번은 빌드를 해줘야한다. 문서 상으로는 3~5분 정도 소요된다고 하는데 체감상 한 10분은 걸린듯하다… 최초 1번이 오래 걸리는 것 같고 그 이후로는 금방 되는 듯? (사이트 UI가 그닥 친절하진 않다. 약간은 버려진 느낌…?)&lt;/p>
&lt;p>그러고 나면 테스터 ID를 등록해줘야한다. 보통은 심사, 실제 퍼블리시까지는 귀찮기 때문에… 혼자만 쓸 거라던가 그냥 재미삼아 만들어본 경우에는 뭐 테스터만으로 사용하는 것도 충분할 것 같다. 네이버 API 등등은 주로 이렇게 출시 심사 전까지 테스트 ID를 사용할 수 있게 해주더라.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/clova-ai-on-k8s/on-skill-store.png"
width="1080"
height="2280"
srcset="https://umi0410.github.io/blog/clova-ai-on-k8s/on-skill-store_huaaaec7118a99371c40755dcdb78fc351_364049_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/clova-ai-on-k8s/on-skill-store_huaaaec7118a99371c40755dcdb78fc351_364049_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="47"
data-flex-basis="113px"
>&lt;/p>
&lt;p>테스터 아이디를 등록한 뒤 네이버 클로바 앱에 자신의 네이버 아이디로 로그인하면 스킬 스토어 페이지에서 위와 같이 자신이 등록한 스킬을 볼 수 있다. 문서상으론 시간이 꽤 걸릴 수도 있다고 했는데 아마 바로 보였던 것 같다.&lt;/p>
&lt;p>그럼 아마 아까 콘솔에서 설정한 &amp;ldquo;{{호출 이름}} 시작해줘&amp;quot;로 스킬을 시작할 수 있을 것이다. 나는 끝에 &amp;ldquo;시작해줘&amp;quot;를 안 붙여도 되는 줄 알고 호출 이름을 &amp;ldquo;디버깅 도와줘&amp;quot;로 했는데 고생을 좀 했다. 호출 이름이 &amp;ldquo;디버깅 도와줘&amp;quot;인 경우 실제로는 &amp;ldquo;디버깅 도와줘 시작해줘&amp;rdquo; 이런 식으로 말해야 실행이 되기 때문이다… ㅜㅜ&lt;/p>
&lt;p>그럼 결과를 확인해보자.&lt;/p>
&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/gfkeh1Si_no"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>🎉 귀엽게 디버깅을 도와줘는 &amp;ldquo;&lt;strong>미스터 디버거 우미&lt;/strong>&amp;ldquo;를 만나볼 수 있었다. 🥳&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>오랜만에 딥한 기술을 탐구하는 것에서 벗어나 유흥스러운 개발을 해보았다. 사이드 프로젝트를 시작으로 가꾸게 됐던 GKE 클러스터에 &lt;strong>istio를 구축만 해놓고 제대로 도입은 못해본 상태였는데 이번 서버 배포를 진행하면서 한 번 데모처럼 istio를 사용해볼 수 있었어서 좋았다&lt;/strong>. istio를 도입해본 걸 생각하면 그닥 유흥스럽다기 보단 기술 탐구스러웠을지도..? ㅎㅎ&lt;/p>
&lt;p>새로 회사를 들어가고나서는 궁금한 것, 공부하고 싶은 것이 넘쳐나고 재미있게 공부해나가고 있지만 다소 블로그에 정리하긴 어려운 내용들이 많은 것 같다. 어려운 내용들이다보니 공부는 했더라도 1번의 공부만으로 의미있는 글을 담아내긴 어렵기도 했다.&lt;/p>
&lt;p>하지만 바쁘기도 한데다가 뭔가 깊이 있는 글을 쓰려다보니 요즘 블로그에 글을 오히려 안 쓰게 되고 &amp;lsquo;아 이것도 써보고 싶은데 저것도 써보고 싶은데…&amp;rsquo; 생각만 하다 벌써 마지막으로 글을 쓴지도 엄청 오래된 것 같다.&lt;/p>
&lt;p>그래서 앞으로는 CS 지식이나 정확한 정보는 아니더라도 가끔 이렇게 개발 일기스러운 글도 적어볼까한다. 그런 글은 남에게 정보를 전달하려는 목적보단 나를 기록하는 용도기 때문에 &amp;lsquo;&lt;em>…입니다.&lt;/em>&amp;rsquo; 체보다는 &amp;lsquo;&lt;em>…이다&lt;/em>&amp;rsquo; 체로 그냥 가볍게 적어나가려한다.&lt;/p>
&lt;p>&lt;em>그럼, 다음에 또 만나용.&lt;/em>&lt;/p></description></item><item><title>ArgoCD 선언적으로 이용해나가기 - Github을 통한 SSO 및 RBAC</title><link>https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/</link><pubDate>Sat, 07 May 2022 22:00:00 +0900</pubDate><guid>https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/</guid><description>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/logo.png" alt="Featured image of post ArgoCD 선언적으로 이용해나가기 - Github을 통한 SSO 및 RBAC" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>저번 글(&lt;a class="link" href="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/" target="_blank" rel="noopener"
>&amp;ldquo;ArgoCD 선언적으로 이용해나가기 - Helm, App of App&amp;rdquo;&lt;/a>)에서는
&lt;code>Helm&lt;/code>과 &lt;code>App of App&lt;/code> 패턴을 이용해 ArgoCD를 선언적으로 이용해나가는 방법을 다뤘습니다.&lt;/p>
&lt;p>바~로 ArgoCD를 좀 더 선언적으로 이용해나가는 것과 관련된 팁부터 글을 적어나가기는 좀 무리가 있을 것 같아 해당 글에서는&lt;/p>
&lt;p>배경지식들에 대한 간략한 정리와 핸즈온 같은 느낌의 내용들도 많이 포함하게 됐던 것 같아요.&lt;/p>
&lt;p>이번 글에서는 &lt;strong>ArgoCD를 실제로 이용하기 위해 필요할만한 이런 저런 설정들을 어떻게 선언적으로 정의해볼 수 있을지&lt;/strong>를 소개해보려해요!&lt;/p>
&lt;p>그리고 그 예시로 &lt;code>RBAC 설정&lt;/code>을 해보겠습니다. 이번 글에서 수행해볼 작업은 &lt;strong>Github 계정을 ArgoCD와 연동시켜 역할(Role) 기반으로 ArgoCD의 권한을 제어&lt;/strong>하는 것이에요.&lt;/p>
&lt;p>&amp;lsquo;&lt;em>왜 RBAC을 ArgoCD 커스터마이징의 예시로 했는가?&lt;/em>&amp;lsquo;는 제가 사이드 프로젝트에서 ArgoCD를 이용하면서 Local user(ArgoCD의 자체 계정)을 이용하는 데에 불편이 있었기 때문이에요.
저는 &lt;strong>ArgoCD와 Github 계정을 연동해 RBAC을 이용함으로써 해결&lt;/strong>했습니다. 이제는 Admin 계정의 패스워드를 암기할 필요도 새로운 팀원에게 새 계정을 생성해 전달할 일도 필요가 없어졌습니다! 또한 Github 계정 별로 권한을 갖도록 (e.g. readonly) 설정할 수도 있어졌습니다.&lt;/p>
&lt;p>그리고 글의 내용은 &amp;lsquo;&lt;em>제 글만 무조건 따라하면 됩니다&lt;/em>&amp;lsquo;보다는 &amp;lsquo;&lt;em>저는 이런 식으로 자료를 찾았고 이렇게 적용해봤어요.&lt;/em>&amp;lsquo;식의 내용들을 다뤄보겠습니다.&lt;/p>
&lt;h3 id="본-글에서-사용하는-환경">본 글에서 사용하는 환경&lt;/h3>
&lt;ul>
&lt;li>핸즈온 과정 참고 레포지토리 - &lt;a class="link" href="https://github.com/umi0410/declarative-argocd/tree/master/configuring-rbac" target="_blank" rel="noopener"
>https://github.com/umi0410/declarative-argocd/tree/master/configuring-rbac&lt;/a>&lt;/li>
&lt;li>Minikube를 이용한 K8s Cluster&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/argoproj/argo-helm/tree/main/charts/argo-cd" target="_blank" rel="noopener"
>ArgoCD Helm Chart&lt;/a>를 이용해 argocd namespace에 배포한 ArgoCD&lt;/li>
&lt;/ul>
&lt;h2 id="rbac이란">RBAC이란?&lt;/h2>
&lt;p>&lt;code>RBAC&lt;/code>은 &lt;code>Role-Based Access Contol&lt;/code>의 약자로 쉽게 말하자면 그냥 역할 기반 권한 제어입니다.&lt;/p>
&lt;p>속성 기반으로 나름 복잡한 로직에 의해 어떤 유저가 어떤 리소스에 어떤 작업을 수행할 수 있는지를 정의하는 &lt;code>ABAC(Attribute-Base Access Control)&lt;/code>에 비해 그저 간단히 역할에 권한들을 부여하고 유저들은 그 역할을 부여받음으로써 권한을 체크하게 됩니다.&lt;/p>
&lt;p>개인적으로는 많은 경우에 간단히 RBAC만으로도 권한 제어가 충분한 경우가 많은 것 같습니다. 그리고 많은 솔루션들이 RBAC 기능을 지원하는 것 같았어요. ArgoCD 또한 마찬가지로 RBAC을 지원하고 있습니다.&lt;/p>
&lt;h2 id="github-organization--team으로-argocd-rbac-이용하기">Github organization + team으로 ArgoCD RBAC 이용하기&lt;/h2>
&lt;p>자, 그럼 Github의 Organization, Team을 통해 ArgoCD에서 RBAC을 이용해보는 과정을 진행해봅시다!&lt;/p>
&lt;h3 id="1-argocd에-rbac-설정하기">1. ArgoCD에 RBAC 설정하기&lt;/h3>
&lt;p>요즘 인기있는 솔루션들은 &lt;code>RBAC&lt;/code> 및 기타 권한 제어 기능이 대부분 존재합니다. 보안과 권한 관리는 아주 중요하기 때문입니다. 그리고 그런 권한 제어의 방법 중 가장 대중적인 방법은 바로 &lt;code>RBAC&lt;/code> 입니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/rbac.png"
width="1204"
height="883"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/rbac_hu8a1d47df067db6e35deb191bf75329be_273516_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/rbac_hu8a1d47df067db6e35deb191bf75329be_273516_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="공식 문서 속 RBAC 설명"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="327px"
>&lt;/p>
&lt;p>공식 문서는 언제나 가장 좋은 교과서입니다. 자세한 방법은 &lt;a class="link" href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/" target="_blank" rel="noopener"
>공식 문서&lt;/a>에서 찾아보실 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/helm-chart-rbac.png"
width="1262"
height="74"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/helm-chart-rbac_hu21132895ae0aab5f81e1c0650669ee11_33874_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/helm-chart-rbac_hu21132895ae0aab5f81e1c0650669ee11_33874_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ArgoCD Helm Chart 속 Configuration"
class="gallery-image"
data-flex-grow="1705"
data-flex-basis="4092px"
>&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/default-values.png"
width="1109"
height="573"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/default-values_hu2c68e4165a00fec2142fab308f6a57c0_319110_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/default-values_hu2c68e4165a00fec2142fab308f6a57c0_319110_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="default values.yaml"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="464px"
>&lt;/p>
&lt;p>또한 제가 사용한 &lt;a class="link" href="https://github.com/argoproj/argo-helm/tree/main/charts/argo-cd" target="_blank" rel="noopener"
>ArgoCD Helm Chart에서 제공하는 README.md&lt;/a> 속 Configuration 부분과 &lt;a class="link" href="https://github.com/argoproj/argo-helm/blob/main/charts/argo-cd/values.yaml" target="_blank" rel="noopener"
>default values.yaml&lt;/a> 보면&lt;/p>
&lt;p>Helm Chart를 통해 배포한 ArgoCD의 경우 어떻게 values.yaml을 통해 rbac을 설정할 수 있는지 나와있습니다.&lt;/p>
&lt;p>기본 원리는 다음과 같습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>p, &amp;lt;role/user/group&amp;gt;, &amp;lt;resource&amp;gt;, &amp;lt;action&amp;gt;, &amp;lt;appproject&amp;gt;/&amp;lt;object&amp;gt;&lt;/code> - AppProject에 속한 Object(e.g. Application)에 대한 권한을 정의한다.&lt;/li>
&lt;li>&lt;code>p, &amp;lt;role/user/group&amp;gt;, &amp;lt;resource&amp;gt;, &amp;lt;action&amp;gt;, &amp;lt;object&amp;gt;&lt;/code> - AppProject에 속하지 않는 Object(e.g. Clusters, AppProject, Repositories, &amp;hellip;)에 대한 권한을 정의한다.&lt;/li>
&lt;/ul>
&lt;p>그리고 위에서 말하는 Resource나 Action은 다음과 같습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Resources&lt;/strong>: &lt;code>clusters&lt;/code>, &lt;code>projects&lt;/code>, &lt;code>applications&lt;/code>, &lt;code>repositories&lt;/code>, &lt;code>certificates&lt;/code>, &lt;code>accounts&lt;/code>, &lt;code>gpgkeys&lt;/code>&lt;/li>
&lt;li>&lt;strong>Actions&lt;/strong>: &lt;code>get&lt;/code>, &lt;code>create&lt;/code>, &lt;code>update&lt;/code>, &lt;code>delete&lt;/code>, &lt;code>sync&lt;/code>, &lt;code>override&lt;/code>, &lt;code>action&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>공식 문서의 설명이 좀 부족하긴하지만 Github SSO를 이용해 인증하는 경우 RBAC은 다음과 같이 설정할 수 있다고 합니다.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-csv" data-lang="csv">p, role:org-admin, applications, *, */*, allow
p, role:org-admin, clusters, get, *, allow
p, role:org-admin, repositories, get, *, allow
p, role:org-admin, repositories, create, *, allow
p, role:org-admin, repositories, update, *, allow
p, role:org-admin, repositories, delete, *, allow
g, your-github-org:your-team, role:org-admin
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>의미: org-admin이라는 Role이 갖는 권한들을 정의하고 해당 &lt;!-- raw HTML omitted -->:&lt;!-- raw HTML omitted -->에 속하는 Github user로 로그인한 경우 org-admin Role에 허용된 권한들을 갖는다.&lt;/li>
&lt;/ul>
&lt;p>그리고 저는 다음과 같은 요구사항을 가정하려합니다.&lt;/p>
&lt;p>&lt;strong>RBAC 요구사항&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>나의 Github Organization &lt;code>khu-dev&lt;/code>의 &lt;code>khumu-devops&lt;/code> 팀의 유저들은 admin 권한을 갖는다.&lt;/li>
&lt;li>나의 Github Organization &lt;code>khu-dev&lt;/code>의 &lt;code>khumu-devops&lt;/code> 팀의 유저들은 readonly 권한을 갖는다.&lt;/li>
&lt;/ul>
&lt;p>그 경우 저는 다음과 같이 values.yaml을 작성한 뒤 helm release를 update 해주면 됩니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># values.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">rbacConfig&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">policy.csv&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> g, khu-dev:khumu-developer, role:readonly
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> g, khu-dev:khumu-devops, role:admin&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>readonly&lt;/code>와 &lt;code>admin&lt;/code>이라는 Role은 공식문서에도 나와있듯 &lt;code>builtin-policy&lt;/code>로서 &lt;a class="link" href="https://github.com/argoproj/argo-cd/blob/master/assets/builtin-policy.csv" target="_blank" rel="noopener"
>이곳&lt;/a>에 작성되어 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> helm upgrade -n argocd argocd &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="go"> argo/argo-cd -f values.yaml
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>그럼 위의 커맨드를 통해 RBAC 설정을 적용시켜주겠습니다.&lt;/p>
&lt;h3 id="2-argocd에-github을-통한-sso-설정하기">2. ArgoCD에 Github을 통한 SSO 설정하기&lt;/h3>
&lt;p>ArgoCD는 &lt;a class="link" href="https://github.com/dexidp/dex" target="_blank" rel="noopener"
>Dex&lt;/a>라는 인증 관련 각종 기능을 담당하는 컴포넌트를 함께 제공하고 있습니다. &lt;code>Github&lt;/code>의 &lt;code>OAuth2&lt;/code>를 이용해 &lt;code>SSO(Single Sign On)&lt;/code>을 이용하는 과정은 &lt;a class="link" href="https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#dex" target="_blank" rel="noopener"
>공식문서 Dex 부분&lt;/a>에도
소개되어있고, 사실 이대로 따라만하면 됩니다. ㅎㅎ&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/github-oauth-app.png"
width="660"
height="777"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/github-oauth-app_hu395b1c716fc41f43b835749ac9fe7844_64355_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/github-oauth-app_hu395b1c716fc41f43b835749ac9fe7844_64355_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Github OAuth app 생성하기"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="203px"
>&lt;/p>
&lt;p>&lt;code>Organization&lt;/code> - &lt;code>Settings&lt;/code> - &lt;code>Developer Settings&lt;/code> - &lt;code>OAuth Apps&lt;/code> 에서 위와 같이 OAuth App을 만들어주고 이후 생성되는 &lt;code>Client ID&lt;/code>와 &lt;code>Client Secret&lt;/code>을 다음과 같이 &lt;code>dex.config&lt;/code>에 전달하면 됩니다.
(사실 Organization이 아니라 개인 계정에서 App을 생성해도 동작합니다.)&lt;/p>
&lt;p>단, &lt;code>dex.config&lt;/code>는 &lt;code>argocd-cm&lt;/code>이라는 Configmap의 &lt;code>.data&lt;/code>의 필드로 존재하기 때문에 우리는 Helm chart의 values.yaml에 &lt;code>dex.config&lt;/code>를 올바르게 전달해야합니다.
이를 위해선 &lt;code>server.config.dex.config&lt;/code>를 다음과 같이 작성해주면 됩니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">dex.config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> connectors:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> # Github OAuth를 통해 SSO하려는 경우
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - type: github
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> id: github # 상관 없을 듯 뭘로 하든
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> name: GitHub # 상관 없을 듯 뭘로 하든
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> config:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> clientID: &amp;lt;your github oauth app client id&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> clientSecret: &amp;lt;your github oauth app client secret&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> orgs:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - name: &amp;lt;your github organization name&amp;gt; # e.g. khu-dev&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>server.config.dex.config에 작성해야한다는 것은 어떻게 알 수 있는가?&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#quick-reference" target="_blank" rel="noopener"
>ArgoCD의 공식 문서&lt;/a>에서는 &lt;code>argocd-cm.yaml&lt;/code>을 &amp;lsquo;General Argo CD configuration&amp;rsquo;로 소개하고 있습니다.&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/argoproj/argo-helm/tree/main/charts/argo-cd" target="_blank" rel="noopener"
>ArgoCD Helm Chart Github&lt;/a>에서는 &lt;code>values.yaml&lt;/code> 속 &lt;code>server.config&lt;/code>를 동일하게 &amp;lsquo;General Argo CD configuration&amp;rsquo;로 소개하고 있습니다.&lt;/li>
&lt;li>따라서 &lt;code>values.yaml&lt;/code> 속 &lt;code>server.config&lt;/code>에 정의하는 내용이 곧 &lt;code>argocd-cm.yaml&lt;/code>의 &lt;code>.data&lt;/code>가 됨을 유추할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> helm upgrade -n argocd argocd &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="go"> argo/argo-cd -f values.yaml
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>한 번 더 위의 커맨드를 통해 RBAC 설정을 적용시켜주겠습니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/login-via-github.png"
width="1534"
height="916"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/login-via-github_hu9c113ddcd41c506471c69869b28b5ba9_827681_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/login-via-github_hu9c113ddcd41c506471c69869b28b5ba9_827681_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="LOG IN VIA GITHUB 버튼이 추가된 모습"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/p>
&lt;p>성공적으로 Github을 통한 SSO가 활성화되면 ArgoCD에 접속할 때 위와 같이 &lt;code>LOG IN VIA GITHUB&lt;/code> 버튼이 추가된 것을 확인할 수 있습니다.&lt;/p>
&lt;p>그럼 요구사항대로 &lt;code>khu-dev&lt;/code>라는 Github Organization의 &lt;code>khumu-developer&lt;/code> Team에 속한 계정으로 ArgoCD에 로그인해보겠습니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/user-info.png"
width="823"
height="469"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/user-info_hucef4272cca453302126c4eebb9e78a82_85359_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/user-info_hucef4272cca453302126c4eebb9e78a82_85359_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="User info"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/p>
&lt;p>성공적으로 로그인한 뒤 &lt;code>&amp;lt;your argocd url&amp;gt;/user-info&lt;/code>로 이동하면 위와 같이 &lt;!-- raw HTML omitted -->:&lt;!-- raw HTML omitted --> 이라는 이름의 그룹에 속한 모습을 볼 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/permission-denied.png"
width="730"
height="925"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/permission-denied_hua5411c757f7472ef3825c63a839272be_139750_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/permission-denied_hua5411c757f7472ef3825c63a839272be_139750_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Permission denied"
class="gallery-image"
data-flex-grow="78"
data-flex-basis="189px"
>&lt;/p>
&lt;p>이후 만약 어떤 Application을 Sync하려해도 현재 속한 그룹인 &lt;code>khu-dev:khumu-developer&lt;/code>는 &lt;code>readonly&lt;/code> Role을 부여받았기에 어떠한 App도 Sync할 권한이 없어 위와 같이 Permission Denied 라는 에러를
맞이하게 됩니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/user-info-2.png"
width="826"
height="471"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/user-info-2_hu2b0412c75c988732975fb3f78c2d2f2f_85455_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/user-info-2_hu2b0412c75c988732975fb3f78c2d2f2f_85455_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="User info"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;p>🎉🎉🎉 하지만 위와 같이 &lt;code>khu-dev:khumu-devops&lt;/code>에 속한 계정으로 로그인한 뒤 동일하게 어떤 App을 Sync해보면 이번에는 성공적으로 App이 Sync되는 모습을 볼 수 있습니다. &lt;code>khu-dev:khumu-devops&lt;/code> 그룹은 admin Role을 부여받았기 때문입니다!&lt;/p>
&lt;p>자, 그럼 이제는 admin 계정을 비롯한 username, password 기반의 계정을 이용할 필요 없이 Github을 이용해 ArgoCD의 인증/인가를 수행할 수 있습니다 ㅎㅎ&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>새로운 회사에 입사하고 행복하게 적응해나가면서 운동, 취미, 업무까지 챙기다보니 글을 작성해놓고 마무리를 오랜 시간 동안 짓지 못하다가 급히 지방선거일을 기회 삼아 글을 마무리 지어봤습니다.
우선은 ArgoCD를 Helm chart와 함께 선언적으로 이용해나가는 내용은 이 글을 끝으로 2편으로 마무리 지어보려합니다. 사이드 프로젝트에서 ArgoCD를 이용하면서 ArgoCD는 선언적으로 관리가 가능하다는 장점을 많이
써먹지 못하고 좀 더러운 형태로 억지로 사용하다보니 번거롭게 느껴졌던 경우가 많았는데 저 스스로도 이를 선언적인 형태로 개선하면서 많이 편해졌고, 그 과정들을 이렇게 글로 기록하고나니 나름 뿌듯합니다.&lt;/p>
&lt;p>ArgoCD 관련한 또 다른 내용으로는 &lt;a class="link" href="https://argocd-applicationset.readthedocs.io/en/stable/" target="_blank" rel="noopener"
>Applpicaitonset&lt;/a>에 관해 추후에 기회가 되면 다뤄볼까 생각 중입니다.&lt;/p>
&lt;p>몇 년 전에 처음 데브옵스 엔지니어 인턴으로서 이쪽 일을 시작했을 때 제가 알던 ArgoCD는 &amp;lsquo;ArgoCD라고 요즘 쿠버네티스 환경에서 쓸만한 CD 툴이 있다더라&amp;rsquo; 정도의 도구였던 것 같은데 이제는 자체 CD툴만을 사용하는 기업을 제외하면
쿠버네티스를 사용하는 경우는 대부분이 ArgoCD를 이용할 정도로 대중적인 기술이 된 것 같고, 그 시절보다 많은 기능들을 편리하게 제공하는 기술이 된 것 같아 새삼 기특하단 생각이 들었습니다 ㅎㅎ.&lt;/p>
&lt;p>데브옵스로 입사하면서 거대한 규모의 클라우드 인프라를 다루다보니 네트워크 관련된 내용을 자주 접하게 되고, 이론적으로는 제가 약한 부분이라고 생각이 들어서 앞으로는 DevOps 서비스들보다는 네트워크 공부를 우선적으로 해볼까합니다!
곧 자취를 시작할텐데 라즈베리 파이로 자취방에서 재밌는 무언가를 해볼 수 있을까 싶은 생각도 있구요 ㅎㅎ.
시간이 되면 관련 내용을 틈틈이 기록해보겠습니다! 감사합니다.&lt;/p>
&lt;h2 id="참고자료">참고자료&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.okta.com/kr/identity-101/role-based-access-control-vs-attribute-based-access-control/" target="_blank" rel="noopener"
>RBAC vs ABAC - Okta&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://argo-cd.readthedocs.io/en/stable/" target="_blank" rel="noopener"
>ArgoCD 공식 문서&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/argoproj/argo-helm/tree/main/charts/argo-cd" target="_blank" rel="noopener"
>ArgoCD Helm Chart&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>ArgoCD 선언적으로 이용해나가기 - Helm, App of App</title><link>https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/</link><pubDate>Fri, 22 Apr 2022 14:11:07 +0900</pubDate><guid>https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/</guid><description>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/logo.png" alt="Featured image of post ArgoCD 선언적으로 이용해나가기 - Helm, App of App" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>&lt;strong>취준생 기간을 마무리&lt;/strong>하고 &lt;strong>데브옵스 엔지니어로서 커리어를 시작&lt;/strong>하게 됐습니다! 🎉&lt;/p>
&lt;p>근무를 시작하기 전까지 기간이 좀 남아있어서 그 전까지 뭘 해보면 재밌을까 고민하던 중에
새로 생긴 클라우드 동아리인 &lt;strong>Cloud Club&lt;/strong>에서 클라우드와 인프라에 관한 주제로 발표할 기회가 주어져 ArgoCD를 토픽으로 발표를 해보려합니다.
그리고 관련된 내용을 한 번 더 블로그에 정리해보려해요!&lt;/p>
&lt;p>주제는 &amp;ldquo;&lt;em>&lt;code>ArgoCD&lt;/code> 선언적으로 이용해나가기&lt;/em>&amp;rdquo; 이고 주로 다룰 내용은 어떻게 ArgoCD를 좀 더
선언적으로 관리하고 이용해나갈 수 있을지입니다.&lt;/p>
&lt;p>ArgoCD가 뭔지, 어떻게 Getting Started할지, GitOps가 뭔지 등을 다루지 않으려는 이유는 이미 그 내용으로는 충분한 양질의 자료가
존재한다고 생각하기 때문입니다.
ArgoCD나 GitOps의 개념 자체 같은 내용보다는 새로운 기술(ArgoCD)을 접할 때 어떻게 입맛대로 커스터마이징해나가는지
그리고 그 작업을 &lt;strong>어떻게 좀 더 유지보수하기 쉽도록 즉 선언적으로 해나갈 수 있을지&lt;/strong>에 대한 저의 작업 과정을 소개해보려합니다 ☺️&lt;/p>
&lt;p>이번 글에서는 크게 다음과 같은 작업을 다루게 될 거에요.&lt;/p>
&lt;ol>
&lt;li>&lt;code>minikube&lt;/code>를 통해 로컬에 kubernetes 환경을 구축합니다.&lt;/li>
&lt;li>&lt;code>helm&lt;/code>을 통해 ArgoCD를 install 합니다.&lt;/li>
&lt;li>&lt;code>ArgoCD&lt;/code>를 이용해보기 위해 &lt;code>CRD&lt;/code>인 &lt;code>AppProject&lt;/code>와 &lt;code>Application&lt;/code>을 생성합니다.&lt;/li>
&lt;li>실제로 GitOps의 형태로 CD가 잘 동작하는지 확인~&lt;/li>
&lt;li>1~4번 과정을 helm을 통해 좀 더 선언적으로 수행할 수 있도록 개선합니다.&lt;/li>
&lt;/ol>
&lt;p>해당 과정들을 실습해보고 싶으신 분들은 제가 작성해둔 Repository(&lt;a class="link" href="https://github.com/umi0410/declarative-argocd" target="_blank" rel="noopener"
>https://github.com/umi0410/declarative-argocd&lt;/a>)를 포크한 뒤 작업하시면 편하실 것 같습니다.&lt;/p>
&lt;h2 id="glossary-용어-사전">Glossary (용어 사전)&lt;/h2>
&lt;p>간단하게 이번 글에서 다루게 될 용어들을 정리해보겠습니다. 자세한 내용이 궁금하시다면 따로 찾아보시는 것을 추천드리겠습니다.
이번 글에서 전부를 다루긴 힘들기 때문이에요 ㅜㅅㅜ&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Glossary&lt;/strong> - 용어 사전&lt;/li>
&lt;li>&lt;strong>minikube&lt;/strong> - &amp;ldquo;minikube is local Kubernetes, focusing on making it easy to learn and develop for Kubernetes.&amp;rdquo; from &lt;a class="link" href="https://minikube.sigs.k8s.io/docs/start/" target="_blank" rel="noopener"
>Minikube Docs&lt;/a>&lt;/li>
&lt;li>&lt;strong>ArgoCD&lt;/strong> - &amp;ldquo;Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes.&amp;rdquo; - from &lt;a class="link" href="https://argo-cd.readthedocs.io/en/stable/" target="_blank" rel="noopener"
>ArgoCD Documents&lt;/a>&lt;/li>
&lt;li>&lt;strong>CRD&lt;/strong>(Custom Resource Definition) - K8s의 표준 Resource는 아니지만 개별적으로 정의하여 사용할 수 있는 리소스 kind들을 말함.&lt;/li>
&lt;li>&lt;strong>Application&lt;/strong> - ArgoCD가 사용하는 CRD 중 하나. 어떤 K8s 리소스들을 어떤 Repository에서 가져와서 어떤 식으로 배포할 지를 정의함.&lt;/li>
&lt;li>&lt;strong>AppProject&lt;/strong> 혹은 Project - Application이 속하는 그룹.&lt;/li>
&lt;li>&lt;strong>GitOps&lt;/strong> - DevOps의 실현 형태 중 하나. 인프라나 애플리케이션 운영 정보에 대한 Single Source of Truth로서 Git Repository를 활용하는 형태&lt;/li>
&lt;li>&lt;strong>Helm&lt;/strong> - K8s application을 패키징하여 편리하게 관리할 수 있도록 해주는 도구&lt;/li>
&lt;li>&lt;strong>Chart&lt;/strong> - Helm을 통해 배포되는 것. Chart는 다양한 k8s 리소스들을 패키징한 형태이다.&lt;/li>
&lt;li>&lt;strong>선언적&lt;/strong>(Declarative) - 절차적(Procedural) 혹은 명령적(Imperative) 방식과 달리 과정을 생략하고 간결하게 Desired State를 선언적으로 정의하는 것.&lt;/li>
&lt;/ul>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>minikube&lt;/strong>
&lt;ul>
&lt;li>&lt;code>brew install minikube &amp;amp;&amp;amp; minikube start&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>kubectl&lt;/strong>
&lt;ul>
&lt;li>&lt;code>brew install kubectl &amp;amp;&amp;amp; kubectl version&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>helm&lt;/strong>
&lt;ul>
&lt;li>&lt;code>brew install helm &amp;amp;&amp;amp; helm version&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Github account&lt;/strong>
&lt;ul>
&lt;li>예시 코드 레포(&lt;a class="link" href="https://github.com/umi0410/declarative-argocd" target="_blank" rel="noopener"
>https://github.com/umi0410/declarative-argocd&lt;/a>)를 포크뜬 뒤 자신의 레포를 통해 Continuouse Deploy하기 위함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="argocd를-구축하고-관리하는-방법">ArgoCD를 구축하고 관리하는 방법&lt;/h2>
&lt;p>쿠버네티스에서는 어떤 서비스를 배포하고 관리해나가는 데에는 다음과 같은 방법들이 있습니다.&lt;/p>
&lt;ul>
&lt;li>Plain k8s manifest yaml&lt;/li>
&lt;li>Kustomize&lt;/li>
&lt;li>Helm Chart&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>이외에도 다양한 방법들이 있을 수 있지만 일단 제가 사용해본 방법들은 위의 3개와 같아요.&lt;/p>
&lt;p>저는 복잡한 형태를 가진 오픈소스를 배포할 때에는 Helm Chart를, 우리 팀의 서비스를 각각 배포할 때에는 가볍게
인자를 수정하는 등의 용도로 Kustomize를 사용하고 있습니다.
Plain k8s manifest yaml은 실제 업무나 프로젝트에서는 거의 사용하지 않고, 쿠버네티스 관련 tutorial 등에서 주로 사용하고 있습니다.&lt;/p>
&lt;p>복잡한 형태의 오픈소스를 배포할 때에는 Helm Chart를 사용하는 이유는 Helm Chart는 &lt;code>values.yaml&lt;/code>과 같은 설정 파일을
통해 필요한 대부분의 것을 편리하게 설정하게 하고 관리할 수 있기 때문입니다. 오픈소스 프로젝트를 직접 Plain k8s manifest 파일들로 관리하기에는
너무나도 벅차기 때문입니다. Deployment만 해도 한 손가락으로 세기 힘든 경우도 있고, Configmap에 전달해야하는 값도 변경될 수 있는데, 또 새로운 버전이 출시되면
그 manifest 파일들을 하나 하나 비교하는 것도 너무 힘들죠. 그래서 저는 보통 &lt;code>Nginx Ingress Controller&lt;/code>, &lt;code>Cert manager&lt;/code>, &lt;code>ArgoCD&lt;/code> 와 같은 오픈소스들은 Helm으로 관리하는 것을 선호합니다.&lt;/p>
&lt;p>반면 우리 팀 서비스를 배포하는 경우 대부분 Image tag만 변경하면 되는데 이런 케이스에는 가볍게 &lt;code>Kustomize&lt;/code>를 사용하는 것이 적절하다고 생각됩니다.&lt;/p>
&lt;p>그래서! &lt;strong>이번 글에서는 &lt;code>ArgoCD&lt;/code>를 &lt;code>Helm&lt;/code>으로 배포&lt;/strong>해보려 합니다.&lt;/p>
&lt;h2 id="helm으로-간단하게-구축해보기">Helm으로 간단하게 구축해보기&lt;/h2>
&lt;h3 id="argocd-helm-chart-설치">ArgoCD Helm Chart 설치&lt;/h3>
&lt;p>Helm 으로 ArgoCD를 설치하는 방법은 &lt;a class="link" href="https://github.com/argoproj/argo-helm/tree/master/charts/argo-cd" target="_blank" rel="noopener"
>ArgoCD Helm Chart Github&lt;/a>에서 확인하실 수 있습니다.
참 간단합니다.&lt;/p>
&lt;p>대신 저는 namespace를 &lt;code>argocd&lt;/code>로 고정하여 설치할게요! 그렇지 않으면 &lt;code>default&lt;/code> namespace에 설치더라구요. Release name은 &lt;code>argocd-demo&lt;/code>로 하겠습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> minikube start
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">😄 minikube v1.25.2 on Darwin 12.2 (arm64)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> kubectl create ns argocd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> helm repo add argo https://argoproj.github.io/argo-helm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">&amp;#34;argo&amp;#34; has been added to your repositories
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> helm install -n argocd argocd-demo argo/argo-cd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">NAME: argocd-demo
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">LAST DEPLOYED: Sat Apr 23 05:37:32 2022
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">NAMESPACE: argocd
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">STATUS: deployed
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">REVISION: 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">TEST SUITE: None
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">NOTES:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">In order to access the server UI you have the following options:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="go">1. kubectl port-forward service/argocd-demo-server -n argocd 8080:443
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="go"> and then open the browser on http://localhost:8080 and accept the certificate
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="go">2. enable ingress in the values file `server.ingress.enabled` and either
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go"> - Add the annotation for ssl passthrough: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#option-1-ssl-passthrough
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go"> - Add the `--insecure` flag to `server.extraArgs` in the values file and terminate SSL at your ingress: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#option-2-multiple-ingress-objects-and-hosts
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="go">After reaching the UI the first time you can login with username: admin and the random password generated during the installation. You can find the password by running:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="go">kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=&amp;#34;{.data.password}&amp;#34; | base64 -d
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="go">(You should delete the initial secret afterwards as suggested by the Getting Started Guide: https://github.com/argoproj/argo-cd/blob/master/docs/getting_started.md#4-login-using-the-cli)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>대부분의 경우 helm chart를 install한 뒤 표시되는 안내문이 많은 도움이 됩니다.&lt;/p>
&lt;p>1번 - 브라우저에서 ArgoCD를 열기 위한 Port forwarding 설명이에요.&lt;/p>
&lt;p>2번 - Ingress나 TLS Termination 관련 설명이에요.&lt;/p>
&lt;p>나머지 - admin과 랜덤 패스워드에 대한 설명이에요.&lt;/p>
&lt;h3 id="브라우저로-로그인해보기">브라우저로 로그인해보기&lt;/h3>
&lt;p>자동으로 생성된 admin 비밀번호를 얻은 뒤 콘솔에 접속하기 위해 Port forward한 뒤 접속해볼게요.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> kubectl -n argocd get secret argocd-initial-admin-secret -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;{.data.password}&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> base64 -d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">5VYjI5YcfOo6XMHx
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> kubectl port-forward service/argocd-demo-server -n argocd 8080:443
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">Forwarding from 127.0.0.1:8080 -&amp;gt; 8080
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">Forwarding from [::1]:8080 -&amp;gt; 8080
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/login.png"
width="1573"
height="1049"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/login_hu7e8078ba43c639b9075fb1b2acd2ff79_623918_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/login_hu7e8078ba43c639b9075fb1b2acd2ff79_623918_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="로그인 화면"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>
TLS 설정을 올바르게 해주지 않았기 떄문에 브라우저에서 인증서나 HTTPS 문제가 경고될 수 있어요. 일단은 &amp;lsquo;&lt;em>무시하고 페이지 진행하기&lt;/em>&amp;lsquo;와 같은 버튼들을 통해 진행해줍시다. 로컬에서 데모해보는 것이니까요.
그럼 벌써 손쉽게 로그인 창이 뜬 것을 볼 수 있고, 아까 조회한 admin에 대한 패스워드를 통해 &lt;code>admin&lt;/code> / &lt;code>{{YOUR_PASSWORD}}&lt;/code>로 로그인해줍니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/console.png"
width="1379"
height="906"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/console_hu0ae6017bda3c97e28afa119368517377_147411_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/console_hu0ae6017bda3c97e28afa119368517377_147411_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="콘솔 화면"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="365px"
>&lt;/p>
&lt;p>🎉 짜잔~! &lt;strong>ArgoCD 콘솔 화면이 등장&lt;/strong>했어요!!!&lt;/p>
&lt;h3 id="application을-통해-cd-동작을-테스트해보기">Application을 통해 CD 동작을 테스트해보기&lt;/h3>
&lt;p>ArgoCD에는 &lt;code>Repository&lt;/code>, &lt;code>AppProject&lt;/code>, &lt;code>Application&lt;/code> 과 같은 개념들이 존재합니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Repository&lt;/strong> - Private Repository 및 다양한 Repository에 대한 설정들을 담당해요.&lt;/li>
&lt;li>&lt;strong>AppProject&lt;/strong> - Application이 속할 수 있는 그룹으로 해당 Project내의 Application들이 수행할 수 있는, 혹은 Project Token이 수행할 수 있는 동작을 제한할 수 있어요.&lt;/li>
&lt;li>&lt;strong>Application&lt;/strong> - 원하는 k8s 리소스들을 어떤 식으로 CD할 지에 대한 설정이에요.&lt;/li>
&lt;/ul>
&lt;p>Application이 가장 중요해요~! Private repository를 이용하기 전까지는 아마 Repository가 필요하진 않을 거고, default project 외의 프로젝트를
생성해서 사용할 게 아니면 AppProject도 필요하진 않을 거에요.&lt;/p>
&lt;p>다만 Application은 필수로 새로 생성해야 CD 동작을 확인해볼 수 있어요!&lt;/p>
&lt;p>ArgoCD에서 쓰이는 대부분의 리소스는 쿠버네티스 CRD(e.g. Repository, AppProject, Application)로 관리되고 그 외의 것들도 configmap에 설정을 기입함으로써 설정할 수 있습니다!&lt;/p>
&lt;p>따라서 우리는 ArgoCD CRD 중 하나인 Application을 만들어볼 거에요. 공식 문서의 Getting Started에서는 직접 ArgoCD CLI로 Application을 만들지만
ArgoCD CLI나 콘솔 화면을 통해 Application을 만들게 되면 추후에 Application을 yaml 코드로 나타내어 선언적으로 이용하려는 경우 기존의 Application을 코드로 나타내려면 어떻게 해야하는지 혼란스러우실 수도 있습니다.
따라서 저는 &lt;strong>직접 Application을 yaml로 작성해서 적용&lt;/strong>해주겠습니다.&lt;/p>
&lt;p>하지만 만약 아직 ArgoCD가 낯서시다면 단순히 콘솔에서 직접 Application을 생성하는 방법도 추천드립니다. 이후 어떤 설정들이 있는지 감을 잡아보시고 그런 설정들을 어떻게 CRD(yaml)로 나타내는지를
찾아나가며 IaC로 관리하는 것도 하나의 방법이라고 생각합니다.&lt;/p>
&lt;p>제가 본 게시글을 위해 만들어놓은 Repository(&lt;a class="link" href="https://github.com/umi0410/declarative-argocd" target="_blank" rel="noopener"
>https://github.com/umi0410/declarative-argocd&lt;/a>)를 &lt;strong>Fork하셔서&lt;/strong> 사용하시면 되겠습니다. 그리고 &lt;strong>아래 항목들을 잘 수행해주세요.&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>⚠️ 아래의 kubectl apply 수행 시 URL을 본인의 Github username 혹은 Organization name으로 변경하기&lt;/li>
&lt;li>⚠️ fork 뜬 Repository의 &lt;code>getting-started/argocd/application.yml&lt;/code> 파일에서 &lt;code>spec.source.repoURL&lt;/code> 값을 자신의 fork 뜬 Repository URL로 올바르게 수정하기&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>fork를 뜨는 이유&lt;/strong>는 이후에 &lt;strong>GitOps 방식으로 CD하기 위해 image tag를 변경해서 푸시&lt;/strong>한 뒤 업데이트 되는 모습을 보기 위함이에요!&lt;/p>
&lt;p>저희는 &lt;strong>샘플 프로젝트로 Guestbook(방명록) 프로젝트를 배포하고 확인&lt;/strong>해볼거에요.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> kubectl apply -n argocd -f https://raw.githubusercontent.com/umi0410/declarative-argocd/master/getting-started/argocd/application.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/guestbook-created.png"
width="790"
height="580"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/guestbook-created_hubfe9081d55e0da841eb34d3069f41f17_117409_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/guestbook-created_hubfe9081d55e0da841eb34d3069f41f17_117409_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="guestbook 앱이 잘 등록된 모습"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="326px"
>&lt;/p>
&lt;p>그럼 위와 같이 guestbook 앱이 등록되어 sync된 모습을 볼 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> kubectl port-forward service/guestbook-ui -n default 8888:80
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">Forwarding from 127.0.0.1:8888 -&amp;gt; 80
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">Forwarding from [::1]:8888 -&amp;gt; 80
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>마찬가지로 방금 배포한 guestbook이 잘 동작하는지 확인해보기 위해 guestbook-ui 서비스를 port forward해주겠습니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/guestbook:0.1.png"
width="866"
height="276"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/guestbook:0.1_hue167aac1c39dc47c9109555cba7e0443_28723_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/guestbook:0.1_hue167aac1c39dc47c9109555cba7e0443_28723_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ks-guestbook-demo:0,1"
class="gallery-image"
data-flex-grow="313"
data-flex-basis="753px"
>&lt;/p>
&lt;p>&lt;code>0.1&lt;/code> 버전으로 설치했다면 위와 같이 &lt;strong>검은 타이틀의 Guestbook&lt;/strong> UI를 확인하실 수 있을 것입니다!&lt;/p>
&lt;p>그럼 과연 다른 버전의 이미지로 업데이트하려면 어떻게 해볼 수 있을까요?!&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/supported-image-tags.png"
width="914"
height="363"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/supported-image-tags_hu33d7f97eadfa03b4c5afdfa040d65e6b_62565_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/supported-image-tags_hu33d7f97eadfa03b4c5afdfa040d65e6b_62565_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="지원되는 이미지 태그 목록.png"
class="gallery-image"
data-flex-grow="251"
data-flex-basis="604px"
>&lt;/p>
&lt;p>지원되는 이미지 태그 목록은 &lt;a class="link" href="https://console.cloud.google.com/gcr/images/heptio-images/global/ks-guestbook-demo" target="_blank" rel="noopener"
>이곳&lt;/a>에서 확인하실 수 있습니다.&lt;/p>
&lt;p>우리는 GitOps를 위한 도구인 ArgoCD를 이용하고 있고 guestbook application은 Auto Sync 설정을 해놓았기 때문에
단순히 image tag를 &lt;code>0.2&lt;/code>로 변경한 뒤 푸시해주기만 하면 됩니다!&lt;/p>
&lt;p>그럼 fork 뜨신 레포지토리에서 &lt;code>getting-started/k8s/deployment.yml&lt;/code>의 &lt;code>spec.template.spec.containers[0].image&lt;/code> tag 값을 &lt;code>0.1&lt;/code> -&amp;gt; &lt;code>0.2&lt;/code> 로 변경해주시고 푸시해주세요.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/guestbook:0.2-pod.png"
width="1036"
height="624"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/guestbook:0.2-pod_hud3e3fc0dda262da7b041e8cd14e9271e_139239_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/guestbook:0.2-pod_hud3e3fc0dda262da7b041e8cd14e9271e_139239_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ks-guestbook-demo:0.2로 배포된 Pod"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="398px"
>&lt;/p>
&lt;p>위와 같이 Pod의 컨테이너의 이미지 태그가 &lt;code>0.2&lt;/code>로 변경된 것을 확인할 수 있고&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/guestbook:0.2.png"
width="865"
height="278"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/guestbook:0.2_huf37d3e4e0787326a08405c425180883f_38731_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/guestbook:0.2_huf37d3e4e0787326a08405c425180883f_38731_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ks-guestbook-demo:0.2"
class="gallery-image"
data-flex-grow="311"
data-flex-basis="746px"
>&lt;/p>
&lt;p>기존에는 &lt;strong>검정색 타이틀의 &amp;ldquo;Guestbook&amp;rdquo;&lt;/strong> 이었지만 이제는 &lt;strong>알록달록한 &amp;ldquo;Fancy Guestbook&amp;rdquo;&lt;/strong> 이 된 것을 확인할 수 있어요~!&lt;/p>
&lt;h3 id="이런-식의-작업-방식에서-불편한-점들">이런 식의 작업 방식에서 불편한 점들&lt;/h3>
&lt;p>성공적으로 CD 작업을 수행할 수 있었습니다. 하지만 실제로 ArgoCD를 도입하고 꾸준히 사용하기 위해서는 방금과 같은 방식으로
작업하게 되면 몇 가지 불편 사항들이 존재할 수 있어요.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>helm으로 ArgoCD를 설치한 뒤 추가적으로 수동으로 Application을 등록&lt;/strong>해줘야 합니다.
&lt;ul>
&lt;li>이렇게 되면 또 다른 클러스터에 동일한 설정으로 ArgoCD를 설치하거나 재구축할 때 많이 번거로울 수 있어요.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이후에도 &lt;strong>Application을 새로 생성할 때나 변경할 때마다 kubectl을 직접 수행&lt;/strong>해야합니다.
&lt;ul>
&lt;li>우리는 GitOps의 형태로 ArgoCD를 통해 &lt;code>Deployment&lt;/code>, &lt;code>Service&lt;/code>, &lt;code>Configmap&lt;/code> 등을 관리하고 있지만
&lt;code>Application&lt;/code>은 직접 &lt;code>kubectl&lt;/code>로 관리하고 있어요.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="app-of-app-패턴을-통해-좀-더-선언적으로-관리하기">App of App 패턴을 통해 좀 더 선언적으로 관리하기&lt;/h2>
&lt;p>따라서 위와 같은 불편 사항들을 해소하기 위해서 ArgoCD에는 &lt;code>App of App&lt;/code>이라는 패턴이 존재합니다.
&lt;code>App of App 패턴&lt;/code>이란 &lt;strong>ArgoCD로 관리할 Application들을 관리하는 우두머리 Application을 두는 패턴&lt;/strong>을 말해요.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/app-of-app.png"
width="1148"
height="286"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/app-of-app_hu0da6b93538f9bdd5fb228fadd6643369_67514_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/app-of-app_hu0da6b93538f9bdd5fb228fadd6643369_67514_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="공식문서에서도 관련 내용을 찾아볼 수 있어요."
class="gallery-image"
data-flex-grow="401"
data-flex-basis="963px"
>&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/app-of-app-example.png"
width="1322"
height="903"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/app-of-app-example_hu4e77d9db36c888cbfc316420e8661632_239899_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/app-of-app-example_hu4e77d9db36c888cbfc316420e8661632_239899_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="예를 들어 App of App 패턴을 이용하면 다음과 같이 다른 앱들을 관리할 수 있게 돼요."
class="gallery-image"
data-flex-grow="146"
data-flex-basis="351px"
>
그럼 위에서 2번으로 언급한 문제는 어느 정도 해결할 수 있지만, 그럼 그 우두머리 App은 어떻게 생성/관리할 것인가(1번 문제)가 여전히 문제에요.&lt;/p>
&lt;p>저는 이 문제를 우리가 직접 App을 생성/관리하는 것이 아니라 ArgoCD helm chart의 추가적인 설정을 통해 선언적으로 관리함으로써 해결하려합니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/additional-applications.png"
width="1230"
height="220"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/additional-applications_hu850b8bb10c85e0c5221cd6515a150d15_59547_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/additional-applications_hu850b8bb10c85e0c5221cd6515a150d15_59547_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ArgoCD Helm Chart README.md에 소개된 부분"
class="gallery-image"
data-flex-grow="559"
data-flex-basis="1341px"
>&lt;/p>
&lt;p>설정값 예시는 &lt;a class="link" href="https://github.com/argoproj/argo-helm/blob/master/charts/argo-cd/values.yaml" target="_blank" rel="noopener"
>이곳&lt;/a>에서 확인하실 수 있습니다.&lt;/p>
&lt;p>즉, ArgoCD Helm Chart를 통해 관리할 Application을 &lt;code>values.yaml&lt;/code>에 작성할 수 있다는 것입니다.&lt;/p>
&lt;p>그럼 &lt;code>getting-started/values.yaml&lt;/code>의 &lt;code>server.additionalApplications[0].source.repoURL&lt;/code>을 마찬가지로 본인이 fork 뜨신 레포지토리의 URL로 변경해주시고 아래의 명령어로 helm chart를 업그레이드해주세요.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> helm upgrade -n argocd argocd-demo argo/argo-cd -f getting-started/values.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이후에는 아래와 같이 &lt;code>app-of-app&lt;/code>이라는 &lt;code>guestbook&lt;/code> Applicaiton을 관리하는 Application이 생성된 것을 보실 수 있을 거에요 :)&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/app-of-app-2.png"
width="1273"
height="793"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/app-of-app-2_hu6c80cf78a2d14fbf6c7e90b1ee9bab49_215714_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/app-of-app-2_hu6c80cf78a2d14fbf6c7e90b1ee9bab49_215714_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="app-of-app 패턴이 적용된 모습"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;p>app-of-app은 guestbook application을 관리하고 있습니다. 만약 &lt;strong>추가적으로 Application을 생성하거나 삭제하고 싶다면 직접 kubectl을 통해 관리할 것이 아니라
변경하고싶은 사항을 &lt;code>getting-started/argocd&lt;/code>에 작성한 뒤 Git push하면 ArgoCD가 알아서 적용&lt;/strong>해주게 됩니다! 대단하죠?!&lt;/p>
&lt;p>그럼 위의 작업을 통해 우리가 앞서 언급했던 불편들이 해소되었는지 확인해볼게요.
제가 바라는 건 &lt;strong>백지 상태의 클러스터에서도 제가 선언해놓은 설정 파일들만을 통해 &lt;code>helm install&lt;/code> 명령어 한 줄만으로
현재와 동일한 ArgoCD 상태, guestbook 상태를 갖는 것&lt;/strong>이에요! 아주 선언적이죠?!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> minikube delete
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">Deleting &amp;#34;minikube&amp;#34; in docker ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">🔥 Deleting container &amp;#34;minikube&amp;#34; ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> minikube start
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">😄 minikube v1.25.2 on Darwin 12.2 (arm64)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">✨ Automatically selected the docker driver
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">#&lt;/span> ArgoCD나 guestbook 관련 Pod나 리소스가 없음을 확인해볼게요
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> kubectl get pod --all-namespaces
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">NAMESPACE NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">kube-system coredns-64897985d-pd57n 1/1 Running 0 36s
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> kubectl create ns argocd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">namespace/argocd created
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> helm install -n argocd argocd-demo argo/argo-cd -f getting-started/values.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">NAME: argocd-demo
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">LAST DEPLOYED: Sat Apr 23 07:27:22 2022
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">NAMESPACE: argocd
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>그럼 시원하게 minikube를 통해 구축한 쿠버네티스 환경을 날려버리고 다시 생성한 뒤 ArgoCD를 helm chart로 깔아볼게요.
이번에는 helm chart 설치 시 &lt;code>getting-started/values.yaml&lt;/code>을 설정파일로 이용해야합니다.&lt;/p>
&lt;p>helm install이 완료되면 동일한 방법으로 새로운 Admin 패스워드를 조회한 뒤 다시 port forward해주시고 콘솔에 로그인해주세요.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/declarative-result.png"
width="1273"
height="786"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/declarative-result_hu069aa837df522d39bd59ebc72e1dc62b_218299_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/declarative-result_hu069aa837df522d39bd59ebc72e1dc62b_218299_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="선언적으로 관리된 ArgoCD. guestbook은 Sync 중이에요 :)"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/guestbook:0.2.png"
width="865"
height="278"
srcset="https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/guestbook:0.2_huf37d3e4e0787326a08405c425180883f_38731_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/guestbook:0.2_huf37d3e4e0787326a08405c425180883f_38731_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="선언적으로 관리된 guestbook"
class="gallery-image"
data-flex-grow="311"
data-flex-basis="746px"
>&lt;/p>
&lt;p>🎉 와우.. 새로운 클러스터에서도 &lt;strong>우리가 선언적으로 작성한 코드들만 있다면 위와 같이 기존과 동일한 상태로 구축이 가능&lt;/strong>하네요! 좋습니다 좋아요~&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;ol>
&lt;li>ArgoCD를 Helm으로 install 해보기&lt;/li>
&lt;li>Application을 생성하고 guestbook 프로젝트를 통해 CD 테스트해보기&lt;/li>
&lt;li>그 과정에서의 불편이나 문제사항을 발견해내고 선언적으로 해결해나가기
&lt;ul>
&lt;li>&lt;code>App of App&lt;/code> 패턴 이용하기&lt;/li>
&lt;li>ArgoCD Helm Chart가 지원하는 &lt;code>additionalApplications&lt;/code> 설정을 이용하기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>이번 글에서 위의 과정들을 통해 ArgoCD를 어떻게 좀 더 선언적으로 관리할 수 있을지 또 그런 작업을 수행할 때
자료들을 어디서 찾아볼 수 있는지에 대해 알아봤습니다.&lt;/p>
&lt;p>좀 더 제가 어떻게 자료를 찾아나가는 지 그런 요령이나 과정들을 적어보려했는데 글이 길어지면서 기능 자체의 내용에 집중하게 된 감이 있네요 🥲..&lt;/p>
&lt;p>다음 편에서는 ArgoCD에서 RBAC 설정을 해보면서 &amp;lsquo;&lt;em>어떻게 새로운 기능들을 찾고 적용해나가는지&lt;/em>&amp;lsquo;에 좀 더 포커스를 맞춰보려해요. 또한 이런 과정들은 &lt;code>ArgoCD&lt;/code> 뿐만 아니라
&lt;code>Kafka&lt;/code>, &lt;code>ELK&lt;/code>, &lt;code>Jenkins&lt;/code> 등의 오픈소스들을 사용할 때에도 도움이 될 수 있을 것이라 생각합니다. &amp;lsquo;&lt;em>아~ 이런 식으로 자료를 찾아볼 수 있구나&lt;/em>&amp;rsquo; 하고 말이죠 ㅎㅎ&lt;/p>
&lt;p>이번 글이 &lt;strong>ArgoCD를 처음 이용해보시는 분들&lt;/strong>, &lt;strong>이용해오면서 조금 불편하셨던 분들&lt;/strong>, &lt;strong>새로운 오픈소스를 어떻게 학습하고 적용해나갈지 잘 모르겠는 분들&lt;/strong>께
도움이 될 수 있는 글이었기를 바랍니다! 감사합니다~ 😆&lt;/p></description></item><item><title>2021년 회고</title><link>https://umi0410.github.io/blog/thought/2021-review/</link><pubDate>Mon, 20 Dec 2021 15:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/thought/2021-review/</guid><description>&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>매년 그랬지만 2021년도 참 빠르게 지나간 것 같다. 벌써 연말이라니.&lt;/p>
&lt;p>오늘은 2021년을 돌아보며 잘 했던 부분에 대해선 나 자신을 칭찬해주고, 아쉬웠던 부분에 대해서는 개선할 방안을 찾아봄으로써
새해는 더 뜨겁고 의미있게 보내고자한다~!&lt;/p>
&lt;p>개발 외적인 거는 개인적으로 정리할 계획이고, 본 회고록에서는 개발 관련된 내용 위주로 작성했다.&lt;/p>
&lt;h2 id="2021년-개발-관련-활동-요약">2021년 개발 관련 활동 요약&lt;/h2>
&lt;ul>
&lt;li>다양한 이유로 미뤄왔던 &lt;strong>스프링&lt;/strong>을 사용해보기 시작했다.&lt;/li>
&lt;li>바닥부터 주도적으로 설계/개발해나갈 수 있는 초기 &lt;strong>스타트업에 합류&lt;/strong>해 나름 많은 경험을 해볼 수 있었다.&lt;/li>
&lt;li>실제 개발 프로젝트에 여럿 참여해 협업을 해보았다. (교내 사이드 프로젝트, 개발 동아리, 스타트업)&lt;/li>
&lt;li>CS 지식을 넘어 개발자로서 필요할 만한 내용들을 많이 접하고 공부했다.
&lt;ul>
&lt;li>DB, Transaction, Cache, Redis, Concurrent programming, TDD&lt;/li>
&lt;li>MSA, DDD, 메시지 큐, CQRS, SAGA 등에 대해&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>AUSG(AWS 대학생 동아리)와 SOPT(개발 동아리)에서 진행한 세미나에서 ElasticBeanstalk 관련 세션을 진행했다.&lt;/li>
&lt;li>취준을 시작했다.&lt;/li>
&lt;li>AWS SAA 자격증을 공부 중이다.&lt;/li>
&lt;li>백엔드/클라우드 분야에 있어 대부분의 기술 세미나와 기술 블로그 글들을 어느 정도 다 이해할 수 있어졌다.&lt;/li>
&lt;li>무엇보다 올해에는 &lt;strong>마음이 맞는 소중한 사람들을 많이 만나게 된 것 같아 감사하다&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;h2 id="좋았던-점">좋았던 점&lt;/h2>
&lt;p>&lt;strong>스타트업에 합류해 많이 성장할 수 있었다!&lt;/strong>&lt;/p>
&lt;p>작년까진 대부분의 프로젝트를 혼자해왔던 것 같은데 그러다보니 기획, 디자인, 프론트 등에 너무 에너지를 뺐겨서 백엔드에 집중하기가 힘들었던 것 같다. 이런 점에서 아쉬움을 느꼈고, 최대한 실무와 유사한 경험을 해보고 싶다. 그래서 제대로 사이드 프로젝트를 구하는 플랫폼에서 팀을 구해보고자 했다.&lt;/p>
&lt;p>당시에 개발 동아리가 아닌 팀을 따로 구하고자 했던 이유는 사실 개발 동아리는 인터뷰 과정을 거쳐 팀을 정할 수 있는 게 아니라 보통 동아리원들 중 랜덤으로 팀 빌딩이 이루어지다보니 사실 팀 빌딩에 있어 운이 많은 부분을 차지하지만 내 프로젝트를 그렇게 운에 맡기고 싶지 않았기 때문이었다. 실제로 대부분의 동아리가 한 1/3 정도는 프로젝트나 협업이 원활히 이루어지지 않는 것 같다.&lt;/p>
&lt;p>어쨌든 나름의 그런 판단하에 개발 동아리보단 따로 사이드 프로젝트 팀을 구해서 합류하는 게 더 좋은 팀원들을 만날 수 있을 것 같았고, 결과적으로는 사이드 프로젝트가 아니라 초기 스타트업에 합류하게 되어 학생으로서는 적지 않은 급여를 받으며 주도적으로 개발해나가고 많이 성장할 수 있었던 것 같다.&lt;/p>
&lt;p>나는 이 팀에서 개발 리드를 하며 클라우드 인프라 설계/구축, Spring Boot RESTful API 서버 개발, 프론트 일정 관리 및 QA 등의 업무를 담당했다.&lt;/p>
&lt;p>Spring도 JPA도 테스트 코드도 처음이었는데, 잘 적용해볼 수 있었다. 지인들과 스터디 그룹을 만들어 토의하고 인프런에서 강의를 수강하며 기술을 공부하고 적용해나갔다. 서비스를 개발하면서 N+1 쿼리의 문제점 같은 부분들을 실제로 경험해볼 수도 있었고 개선해나가면서 Latency가 낮은 서비스 제공하기위한 전략들에 대한 관심도 갖게 된 것 같다.&lt;/p>
&lt;p>&lt;strong>CS 지식을 넘어 개발자로서 필요할 만한 내용들을 많이 접하고 공부했다.&lt;/strong>&lt;/p>
&lt;p>‘MSA에 관심있다, 관심있다.’ 말만 하다가 지인이 선물해준 “마이크로서비스 패턴”이라는 책을 시작으로 DDD라는 주제와 조금 더 자세한 MSA에 대해 알게 되었다.&lt;/p>
&lt;p>실질적으로 마이크로서비스들이 어떻게 낮은 의존성과 느슨한 결합으로 동작할 수 있는지 공부해보다보니 메시지 큐와 CQRS, SAGA와 같은 내용들도 알게 되었다.&lt;/p>
&lt;p>그리고 캐시나 테스트 코드들은 막연하게만 알고 있던 상태였는데 실제로 도입해보면서 주니어 치고는 썩 나쁘지 않은 정도까지는 알게 된 것 같다!&lt;/p>
&lt;p>그리고 기술 관련된 아티클을 읽는 걸 참 좋아하는데 열심히 읽은 내용들이 그냥 스쳐지나가는 것이 아쉽기도 하고 남들은 어떻게 생각하나 궁금해서 아티클 내용에 대한 요약이나 내 생각을 적어나가기 시작했다. 이렇게하니 확실히 내용이 잘 기억나기도 하고, 가끔 본인의 생각을 공유해주시는 경우도 있어서 그를 통해 배워나가기도 한 것 같다.&lt;/p>
&lt;p>이런 공부들을 바탕으로 결과적으로는 과거에 내가 꿈꿨던 개발자 상에 좀 더 가까워진 것 같다. 당시엔 대부분의 기술 세미나가 오프라인으로 진행됐었고 나는 뭐라도 배워보려고 세미나에 참여했으나 대부분의 내용을 이해하지 못했고, 주변을 둘러보며 ‘아니&amp;hellip; 여기있는 사람들은 저 얘기를 다 이해할 수 있는건가..? 대단하다’라는 생각을 가지곤했다.&lt;/p>
&lt;p>그래서 나도 나중에는 이런 내용을 다 이해하고 공감할 수 있는 개발자가 되고 싶었다. 그리고 올해를 마무리하며 돌이켜보니 이제 대부분의 기술 세미나는 무리 없이 이해할 수 있었던 것 같아 뿌듯하다. +_+&lt;/p>
&lt;p>올해에 재미있게 봤던 세션들은 대충 다음과 같았던 것 같다.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=l195D5WT_tE&amp;amp;list=PL7488rl_eFkEoy_YpfTuBdF8cr9YjpXpV&amp;amp;index=10" target="_blank" rel="noopener"
>[2019] PAYCO 쇼핑 마이크로서비스 아키텍처(MSA) 전환기&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=BnS6343GTkY&amp;amp;list=PL7488rl_eFkEoy_YpfTuBdF8cr9YjpXpV&amp;amp;index=7" target="_blank" rel="noopener"
>[우아콘2020] 배달의민족 마이크로서비스 여행기&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=mPB2CZiAkKM&amp;amp;list=PL7488rl_eFkEoy_YpfTuBdF8cr9YjpXpV&amp;amp;index=5" target="_blank" rel="noopener"
>[우아한테크세미나] 191121 우아한레디스 by 강대명님&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=f6kdp27TYZs" target="_blank" rel="noopener"
>Google I/O 2012 - Go Concurrency Patterns&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=mLIthm96u2Q&amp;amp;t=8s" target="_blank" rel="noopener"
>당근마켓의 고언어 도입기, 그리고 활용법&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=92NizoBL4uA" target="_blank" rel="noopener"
>[NHN FORWARD 2021] Redis 야무지게 사용하기&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>생각을 공유하고 공감할 수 있는 소중한 사람들 만나게 됐다.&lt;/strong>&lt;/p>
&lt;p>사실 그동안은 이런 저런 이유로 전역한 뒤로는 나랑 잘 맞는 사람들을 만날 기회가 적었다. 아무래도 학교가 고립되어 있고 너무 어렸던 게 주된 원인이었던 것 같다.&lt;/p>
&lt;p>하지만 올해에는 잘 맞는 사람들을 만나 함께 취업 준비를 하면서 각자가 가진 커리어에 대한 가치관이나 가고 싶어하는 회사 기준을 공유하면서 서로 자기 자신에 대해서도 잘 알아갈 수 있었던 것 같고 많은 힘이 됐던 것 같다.&lt;/p>
&lt;p>개발하다가 드는 궁금증이나 이해 안되는 점을 마음 놓고 공유할 수 있는 그룹이 생겼다. ㅎㅎ.&lt;/p>
&lt;p>‘왜 세션 말고 JWT를 쓸까’, ‘데이터랑 트래픽이 얼마나 커져야 RDB가 감당하기 힘든 수준이 될까’, ‘인터페이스와 구현체로 구분할까 그냥 구현체만 쓸까’ 이런 내용들에 대해 자주 대화를 나눴던 것 같은데 딱 정해진 정답이 있는 질문들은 아닌 것 같다. 하지만 그에 대해 혼자서 고민만 하기보다 ‘나도 그거 궁금해’ 하면서 같이 고민하고 공부해나가다보니 훨씬 더 재밌더라!&lt;/p>
&lt;h2 id="아쉬웠던-점-개선할-점">아쉬웠던 점, 개선할 점&lt;/h2>
&lt;p>&lt;strong>선택과 집중을 잘 하지 못했던 것 같다.&lt;/strong>&lt;/p>
&lt;p>개인적인 일로 슬럼프가 찾아왔던 것 같고 그를 끊어내려고 이래 저래 일을 벌렸던 것 같다. 그러다보니 한 활동이나 프로젝트에 몰입하지 못하고 병렬적으로 진행하면서 약간 늘어지게 된 것 같은데, 확실하게 하나씩 하나씩 쳐냈으면 더 좋지 않았을까 싶다.&lt;/p>
&lt;p>그리고 프로젝트 뿐만 아니라 공부에 있어서도 나름 깊게 파는 걸 좋아한다고 생각했는데 면접 준비를 하면서 내가 아직 많이 부족하단 걸 느끼게 됐고, 그동안 선택과 집중을 잘 하지 못했다는 걸 알게 되었다.&lt;/p>
&lt;p>클라우드 인프라 조금, 컨테이너 조금, Java spring 조금, DB 조금, MSA/DDD 조금, 캐시/Redis 조금, Go 조금, &amp;hellip; 뭔가 다 두루두루 알고는 있는데 클라우드 인프라를 제외하면 깊이가 그리 깊진 못했던 것 같다. 게다가 사이드프로젝트에서 안드로이드도 건드리고 리액트도 살짝 건드리고 쿠버 생태계쪽도 건드리고 그러다보니 집중이 분산된 것도 있는 것 같다.&lt;/p>
&lt;p>&lt;strong>개발을 즐기는 건 너무 좋지만, 결국 프로가 되려면 즐기면서 재밌는 것만 할 수는 없는 것 같다. 때로는 조금 재미가 없는 것도 감수하고 노력해야 프로가 될 수 있는 것 같다.&lt;/strong>&lt;/p>
&lt;p>그래서 새해에는 &lt;strong>관심있는 분야 폭을 정해 책을 통해 좀 더 확실히 다이브&lt;/strong>를 해보고자한다. 각 분야별로 베스트셀러 같은 책들을 한 권씩은 읽어보고자 결심했다.&lt;/p>
&lt;ul>
&lt;li>RDB - Real MySQL&lt;/li>
&lt;li>NoSQL - Real MongoDB&lt;/li>
&lt;li>NoSQL - 각 NoSQL 비교하는 내용의 어떤 책 하나&lt;/li>
&lt;li>DDD/MSA - 도메인 주도 설계로 시작하는 마이크로서비스 개발&lt;/li>
&lt;li>Redis - Redis in Action&lt;/li>
&lt;li>Spring Boot - Spring Boot를 다룬 어떤 책 하나&lt;/li>
&lt;li>Go - Effective Go&lt;/li>
&lt;li>기타 - 가상 면접 사례로 배우는 대규모 시스템 설계 기초&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>멘탈이 약했다.&lt;/strong>&lt;/p>
&lt;p>취업 준비를 시작하기 전부터 멘탈이 많이 흔들렸던 것 같다. 나는 그냥 설계하고 개발하는 게 좋은데 취업을 위해선 코딩 테스트를 준비해야한다는 것부터 스트레스였고 JD를 보면 요구 조건은 물론 우대 사항까지 모두 자신있어야만 할 것 같은 압박도 스트레스였던 것 같다.&lt;/p>
&lt;p>그러다보니 지레 겁을 먹고 지원 자체를 미루거나 지원과 동시에 갑자기 피로감이 몰려오곤 했던 것 같다. 그러다보니 일상 생활이나 공부에도 지장이 있었던 것 같다.&lt;/p>
&lt;p>그래서 새해에는 커리어와 관련해서 좀 더 강한 멘탈로 열정적으로 임하면 더 좋을 것 같다.&lt;/p>
&lt;h2 id="2022-목표">2022 목표&lt;/h2>
&lt;ul>
&lt;li>지식의 깊이를 더 깊게 해야겠다
&lt;ul>
&lt;li>분야별 책 읽기&lt;/li>
&lt;li>동영상 강의 꾸준히 시청하기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>선택과 집중을 하자
&lt;ul>
&lt;li>너무 다양한 분야보다는 내가 우선순위에 둔 기술들을 위주로 개수는 적더라도 깊이있게 공부해나가자&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>운동을 소홀히 하지말자
&lt;ul>
&lt;li>요 몇 달 운동을 소홀히 했더니 몸이 뻐근해지기 시작한 것 같다. 새해에도 운동을 꾸준히 해야겠다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>자신감 있되 겸손한, 한결 같이 열정적인 개발자가 되고 싶다.&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>올해에는 계속해서 ‘&lt;strong>길게 보자&lt;/strong>’는 말을 되새겼던 것 같다. 지금 당장 내가 코딩 테스트에 통과했는지, 기술 면접에 통과했는지에 집착하기보다는 나 자신이 그러한 지식들을 숙지한 엔지니어가 되는 것을 목표로 하는 것이 더 중요하다고 생각하기 때문이다.&lt;/p>
&lt;p>하지만 사람 마음이라는 게 참&amp;hellip; 머리로는 알아도 ‘&lt;strong>혹시라도 구렁이 담 넘어가듯 운 좋으면 어떻게 될 수도 있지 않을까&amp;hellip;?&lt;/strong>’ 이런 알량한 기대를 하게 되더라.&lt;/p>
&lt;p>새해에는 좀 더 본질적으로 지식이 깊고 실력 있는 개발자가 되기 위해 여유를 갖고 나아가야할 것 같다!&lt;/p></description></item><item><title>쿼리 최적화하기 - 조회수와 같은 Count 성격의 작업 최적화하기 (N+1 문제 관련, feat. Redis)</title><link>https://umi0410.github.io/blog/optimizing-count-query-strategy/</link><pubDate>Wed, 24 Nov 2021 03:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/optimizing-count-query-strategy/</guid><description>&lt;img src="https://umi0410.github.io/blog/optimizing-count-query-strategy/index.png" alt="Featured image of post 쿼리 최적화하기 - 조회수와 같은 Count 성격의 작업 최적화하기 (N+1 문제 관련, feat. Redis)" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>&lt;img src="https://umi0410.github.io/blog/optimizing-count-query-strategy/monitoring.png"
width="1012"
height="437"
srcset="https://umi0410.github.io/blog/optimizing-count-query-strategy/monitoring_hu3985549258cc81ebaf9b1ddb4dd53245_70044_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/optimizing-count-query-strategy/monitoring_hu3985549258cc81ebaf9b1ddb4dd53245_70044_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Sentry monitoring - 느려진 API Latency"
class="gallery-image"
data-flex-grow="231"
data-flex-basis="555px"
>&lt;/p>
&lt;p>&lt;strong>짧은 영상을 바탕으로 배틀을 할 수 있는 서비스를 &lt;code>Spring Boot MVC&lt;/code> + &lt;code>JPA&lt;/code>로 개발&lt;/strong>하던 중 위와 같이 API &lt;strong>Latency가 처참하게도 느린 요청&lt;/strong>들이 감지되기 시작했습니다. 그동안은 쿼리 최적화보다는 로직 개발이 더 우선시하다보니 쿼리 최적화를 미뤄왔는데,
이번 기회에 이에 대해 다뤄보려합니다. 간단하게 코드를 짜서 테스트해보느라 Go 언어를 이용했지만 &lt;strong>JPA를 이용하든 뭘 이용하든 문제와 그에 대한 해결책의 요지는 동일할 것&lt;/strong>입니다.&lt;/p>
&lt;p>아무래도 백엔드에서 API를 개발하면서 파일 데이터를 주고 받는 게 아니라면 주로 Latency가 늘어나는 이유는 다음과 같을 것입니다.&lt;/p>
&lt;ul>
&lt;li>너무 많은 Write&lt;/li>
&lt;li>불필요한 Column(필드) 혹은 관계를 Eager Loading. 추가적으로 경우에 따라 &lt;strong>N+1 쿼리 문제&lt;/strong> 발생&lt;/li>
&lt;li>필요한 Column(필드) 혹은 관계를 뒤늦게 Lazy Loading. 추가적으로 경우에 따라 &lt;strong>N+1 쿼리 문제&lt;/strong> 발생&lt;/li>
&lt;li>&lt;strong>요청마다 매번 수행되는 Join이나 일종의 연산들&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;code>N+1&lt;/code> 쿼리 문제? - N개의 데이터를 조회한 경우, 각 데이터들의 연관 관계를 추가적으로 조회하기 위해 한 번씩 더 조회해야하는 문제&amp;hellip; 아주 악명 높은 문제로 자료를 쉽게 찾아볼 수 있다.&lt;/p>
&lt;/blockquote>
&lt;p>사실 어떻게 보면 N+1 쿼리 문제가 워낙 악명이 높아 그에 대한 해결책들도 간단하게는 많이 소개되는 것 같기도 합니다. 따라서 이번 글에서는 조금은 특이하게 &lt;strong>조회수나 댓글 개수처럼 일종의 Count 기능이 필요한 경우의 N+1 쿼리 문제나 요청마다 매번 수행되는 Join이나 연산들로 인한
오버헤드들을 줄여 최적화&lt;/strong>하는 방법은 어떤 것들이 있을지에 대한 제 고민을 소개해보려 합니다.&lt;/p>
&lt;p>&lt;strong>&lt;em>(이 글은 RDB를 메인 DB로 사용하는 경우를 기준으로 작성했습니다.)&lt;/em>&lt;/strong>&lt;/p>
&lt;h2 id="영상-조회수-같은-count-성격의-값에-대한-작업을-최적화하지-않으면">영상 조회수 같은 Count 성격의 값에 대한 작업을 최적화하지 않으면?!&lt;/h2>
&lt;ul>
&lt;li>쏟아지는 영상 조회 이벤트마다 RDB에 데이터를 Write =&amp;gt; RDB에 너무 큰 부하&lt;/li>
&lt;li>매번 특정 영상과 관련된 조회 내역을 RDB에서 Join 후 그 개수를 계산 =&amp;gt; RDB에 부하, 느린 작업&lt;/li>
&lt;li>RDB에 영상 조회 이벤트를 Write할 때 영상 정보 테이블에 view_count 컬럼을 추가한 뒤 view_count 컬럼에 조회수를 캐시 =&amp;gt; 캐시 정확도 문제, 테이블 정의 변경 필요&lt;/li>
&lt;/ul>
&lt;p>영상 조회수 같은 Count 성격의 값을 최적화해주지 않으면 위와 같은 문제들이 발생할 수 있다고 봅니다.&lt;/p>
&lt;p>따라서 영상 조회 이벤트처럼 쏟아지는 데이터는 너무 많은 Write 요청은 RDB가 아닌 NoSQL을 사용하는 게 좋을 수 있을 것입니다.&lt;/p>
&lt;p>하지만 NoSQL에 영상 조회 이벤트를 저장한다 해도 매번 영상 조회 내역을 가져온 뒤 그 개수를 계산하는 방식은 어떤 DB를 사용하던 불필요한 Read도 많이 발생할 것이고, 당연히 느리겠죠. 만약 어떤 영상의 조회수가 10만인 경우 10만개의 이벤트들을 조회한 뒤 그 개수를 이용해야할테니 말입니다.
경우에 따라서는 영상 조회 시 각 영상에 대한 조회 내역을 추가적으로 조회하게 되는 N+1 쿼리 문제를 겪을 수도 있습니다.&lt;/p>
&lt;p>따라서 &lt;strong>&lt;code>view_count&lt;/code> 같은 column을 추가적으로 두는 건 어떨까&lt;/strong>싶기도 합니다만 일반적으로는 &lt;strong>동시성 이슈로 인해 view_count의 정확도가 떨어지게 될 것&lt;/strong>입니다. 또한 &lt;strong>스키마가 강요되는 RDB의 특성에 의해 테이블 정의가 변경되어야할 수도 있습니다&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>동시성 이슈 - 만약 100명의 유저에 대한 영상 조회를 동시에 처리하는 경우 100개의 스레드는 모두 view_count=0 으로 조회를 한 뒤 자신의 조회 이벤트로 인한 +1을 더해 view_count=1로 업데이트 커맨드를 날리겠지만 사실 view_count는 1이 아닌 100이 되어야 정확한 것이다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="redis를-도입해보면-어떨까">Redis를 도입해보면 어떨까&lt;/h2>
&lt;p>&lt;code>Redis&lt;/code>는 메모리를 기반으로하는 Key-Value 형태의 NoSQL라서 일반적인 RDB에 비해 아주 빠르면서 싱글 스레드 기반이기 때문에 정확한 Count와 Increment가 가능합니다. 따라서 아까 발생했던 문제들을 다음과 같이 해결할 수 있을 것입니다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>쏟아지는 영상 조회 이벤트마다 RDB에 데이터를 Write&lt;/p>
&lt;p>=&amp;gt; &lt;del>RDB에 너무 큰 부하&lt;/del> (X), &lt;strong>빠른 Write&lt;/strong> (O)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>매번 특정 영상과 관련된 조회 내역을 RDB에서 Join 후 그 개수를 계산&lt;/p>
&lt;p>=&amp;gt; &lt;del>RDB에 부하, 느린 작업&lt;/del> (X), &lt;strong>Redis에 최근 조회 내역을 저장&lt;/strong>, 상황에 따라 NoSQL에서 Replicate해서 영구화하는 것도 좋음 (O)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RDB에 영상 조회 이벤트를 Write할 때 영상 정보 테이블에 view_count 컬럼을 추가한 뒤 view_count 컬럼에 조회수를 캐시&lt;/p>
&lt;p>=&amp;gt; &lt;del>캐시 정확도 문제&lt;/del> (X), &lt;strong>Redis의 싱글스레드 기반의 정확한 계산&lt;/strong>&lt;/p>
&lt;p>=&amp;gt; &lt;del>테이블 정의 변경 필요&lt;/del> (X), &lt;strong>NoSQL의 유연함&lt;/strong> (O)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>이런 이유로 인해 추후에 &lt;strong>조회수나 댓글 수, 팔로워 수 등등에 대해 Redis를 이용하면 어떨까 싶은 생각이 드네요~!&lt;/strong> 그럼 실제로 앞서 소개했던 문제 상황이나 해결 방법들이 각각 성능이 어떨지 직접 데이터와 쿼리를 이용해 실험해보겠습니다.&lt;/p>
&lt;h2 id="실제-실험을-통해-각각의-방식-성능-비교">실제 실험을 통해 각각의 방식 성능 비교&lt;/h2>
&lt;h3 id="상황-소개">상황 소개&lt;/h3>
&lt;ul>
&lt;li>Local에서 Redis container, MySQL container을 이용. Go언어로 가볍게 애플리케이션 작성&lt;/li>
&lt;li>MySQL의 Video 테이블에 1000개의 영상 데이터 존재. 조회수를 캐시해놓은 view_count 컬럼 존재.&lt;/li>
&lt;li>MySQL의 View 테이블에 약 2천만 개의 조회 내역 존재.(즉 영상 당 수천개의 조회 내역 존재) 인덱스는 잘 걸어놓음.&lt;/li>
&lt;li>Redis에 &lt;code>key=video_view_count:{{video_id}}&lt;/code>, &lt;code>value={{view_count}}&lt;/code> 형태로 view_count 캐시&lt;/li>
&lt;li>&lt;strong>랜덤하게 5개의 영상에 대한 정보를 제공할 것인데 이때 조회수도 포함되어야한다.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="비교할-방식들-소개">비교할 방식들 소개&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Select 후 Redis에 캐시된 조회수 이용&lt;/strong>
&lt;ul>
&lt;li>영상에 대한 정보 자체는 Video 테이블을 이용해 Read&lt;/li>
&lt;li>조회수는 Redis에 캐시된 값을 MGET을 통해 배치(벌크)로 조회해와서 이용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Select 하며 Column에 캐시된 조회수 이용&lt;/strong>
&lt;ul>
&lt;li>영상 정보와 조회수 모두 Video 테이블을 통해 바로 Read&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Select 후 Batch로 In-Query&lt;/strong>
&lt;ul>
&lt;li>JPA를 이용하면서 흔히 발생했던 N+1 쿼리를 Batch로 해결할 때와 동일하게 Video 테이블 조회 후 View 테이블에서 view.id in (?,?,&amp;hellip;) 의 형태로 In-Query를 이용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Select 후 나중에 각각을 Join&lt;/strong>
&lt;ul>
&lt;li>N+1 쿼리 문제 그 자체..!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="실험-결과">실험 결과&lt;/h3>
&lt;p>&lt;img src="https://umi0410.github.io/blog/optimizing-count-query-strategy/result-1.png"
width="2520"
height="783"
srcset="https://umi0410.github.io/blog/optimizing-count-query-strategy/result-1_hu2b8142f32263cafd399ddd7e1ab96ace_456229_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/optimizing-count-query-strategy/result-1_hu2b8142f32263cafd399ddd7e1ab96ace_456229_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="실험 결과 1"
class="gallery-image"
data-flex-grow="321"
data-flex-basis="772px"
>&lt;/p>
&lt;ol>
&lt;li>🥇 &lt;strong>Select 하며 Column에 캐시된 조회수 이용&lt;/strong>&lt;/li>
&lt;li>🥈 &lt;strong>Select 후 Redis에 캐시된 조회수 이용&lt;/strong>&lt;/li>
&lt;li>🥉 &lt;strong>Select 후 나중에 각각을 Join&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Select 후 Batch로 In-Query&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>우선은 어떤 쪽으로든 캐싱을 이용하는 게 참 빠르구나 싶었습니다. 하지만 조금 의아할 수 있는 부분들도 존재하는데요.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Redis에 조회수를 캐싱한 경우보다 MySQL에 캐싱한 경우가 더 빠르네..?&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>어떻게보면 당연하겠지만 &lt;strong>MySQL에서 Join 없이 view_count를 조회할 수만 있다면 Redis를 거치는 것보다 MySQL만으로 처리하는 것이 더 빠를 것&lt;/strong>입니다.&lt;/p>
&lt;p>하지만 Redis를 사용하는 이유가 Read 속도때문만은 아닐 것입니다. 앞서 말씀드린 대로 &lt;strong>싱글 스레드 기반의 정확한 count&lt;/strong>가 가능할 것이고, RDB의 &lt;strong>테이블 스키마를 변경할 필요도 없죠&lt;/strong>.&lt;/p>
&lt;p>그리고 무엇보다 영상 조회 이벤트 발생마다 RDB의 특정 row의 조회수를 +1 하여 update 하는 것보다는 redis에서 increment하는 것이 빠를 것입니다! 즉, &lt;strong>write까지 고려하면 속도 측면에서도 redis가 빠를 것&lt;/strong>입니다.&lt;/p>
&lt;ol start="2">
&lt;li>&lt;strong>N+1 쿼리 문제를 야기하는 방식이 Batch로 In-Query하는 방식보다 빠르네..?&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>이 부분은 정확한 원인은 모르겠지만 아마 추측컨대 Batch 방식으로 한 번에 몇 만개 수준의 너무나 많은 데이터를 카티션 곱으로 조회한 뒤 각 video의 조회수 내역으로 넣어주려다보니 조회 후 연산이 많은 시간을 잡아먹은 게 아닐까 싶습니다.
반면 N+1 쿼리 방식은 각 video에 대해 한 번씩 쿼리한 뒤 바로 그 결과 count 할 수 있으니 이런 특수한 경우(데이터가 엄~청 많은 경우)에는 오히려 Batch 방식이 느릴 수 있는 게 아닐까 싶습니다.&lt;/p>
&lt;p>실제로 조회수가 약 10개 정도인 영상을 똑같이 5개 조회해보니 우리의 일반적인 예상대로 Batch 방식이 N+1 쿼리보다 빨랐는데요! 아마 카티션 곱이 일어났지만 양 자체가 적은 쿼리 결과를 처리하는 것이 redis와의 N번의 통신이 더 느리기 때문이 아닐까 싶습니다.&lt;/p>
&lt;h2 id="조회수를-위해-가장-이상적인-아키텍쳐는">조회수를 위해 가장 이상적인 아키텍쳐는?!&lt;/h2>
&lt;p>&lt;img src="https://umi0410.github.io/blog/optimizing-count-query-strategy/architecture.png"
width="1315"
height="1236"
srcset="https://umi0410.github.io/blog/optimizing-count-query-strategy/architecture_hu2e0266c55b356006b8efd84bbe6e386e_394889_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/optimizing-count-query-strategy/architecture_hu2e0266c55b356006b8efd84bbe6e386e_394889_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="상상 속 아키텍쳐"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/p>
&lt;p>실험 결과에서도 Redis를 사용하는 것이 나쁘지 않은 것으로 보여집니다. 그래서 저라면 정말 이런 식으로 &lt;strong>최적화를 해볼 수 있는 기회가 있다면 Redis를 도입&lt;/strong>해볼 것 같습니다. 그 동안 수없이 고통받아왔던 N+1 쿼리 문제도 어느 정도 해결할 수 있겠죠?!
&lt;strong>불필요한 양방향 연관 관계는 최대한 단방향 연관 관계로 제한하고, Count가 필요할 때 각 엔티티마다의 특정 Count 값을 위해 N번의 쿼리를 수행할 필요도 없어질 것&lt;/strong>입니다.&lt;/p>
&lt;p>하지만 Redis를 도입한다고 만사가 해결되는 것은 아닐 것입니다. Redis는 영속성이 보장되지 않으므로 영상 조회 내역이 증발해버릴 수도 있고, 양이 한정적일 수 있죠. 그래서 저는 단순 Redis 뿐만 아니라 다음과 같은 방식은 어떨까 생각해보고 있습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>최근 영상 조회 내역&lt;/strong>은 &lt;code>view_histories:{{username}}&lt;/code> 형태의 key, &lt;code>{{video_id}}&lt;/code> 형태의 value로 1차적으로 Redis에 저장한다. &lt;strong>조회수&lt;/strong>는 &lt;code>view_count:{{vide_id}}&lt;/code> 형태의 key, &lt;code>{{view_count}}&lt;/code> 형태의 value로 Redis에 캐시한다.
&lt;ul>
&lt;li>최근 영상 조회 내역을 redis를 통해 빠르게 읽고 쓸 수 있다.&lt;/li>
&lt;li>영상 조회수를 Redis의 Increment로 비교적 정확하게 계산할 수 있다.&lt;/li>
&lt;li>유저의 최근 영상 조회 내역을 각 유저별로 TTL을 걸 수 있다. =&amp;gt; Redis 메모리 절약&lt;/li>
&lt;li>영상의 조회수를 영상별로 TTL 걸 수 있다 =&amp;gt; Redis 메모리 절약&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>영상 조회 이벤트 저장 시 Redis의 &lt;code>event:video_viewed&lt;/code> 라는 key의 List에 앞서 언급한 조회 내역과 동일한 조회 내역을 저장한다.(메시지 큐에 Enqueue하는 느낌)
&lt;ul>
&lt;li>SQS 같은 Message queue는 조회수 이벤트가 쏟아지는 것에 비해 latency가 느림. 따라서 Redis를 큐로 사용하는 것도 괜찮아보임.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Redis &lt;code>event:video_viewed&lt;/code> 라는 List에서 조회 이벤트를 뽑아 서버리스한 NoSQL인 DynamoDB에 유저의 조회 내역을 영구적으로 저장한다.
&lt;ul>
&lt;li>영상 조회 내역을 redis에 캐시할 뿐만 아니라 영구적으로 저장하기 위함.&lt;/li>
&lt;li>마치 Redis를 버퍼, Write-back cache로 이용하는 느낌인데 NoSQL이라해도 주기적인 Bulk write은 주기때마다 부담될 수 있음. 그리고 조회 이벤트는 계속 계속 빠르게 확장될 수 있기 때문에 NoSQL 중에도 서버리스인 DynamoDB를 사용하면 어떨까 싶음. (주의: DynamoDB 안써봄&amp;hellip;)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>(단 위의 아키텍쳐는 제 개인적인 생각일 뿐, 실제로는 어떻게들 사용하시는지 궁금하네요..! 이렇게 직접 한 필드에 대해 복잡한 방식을 이용하기보단 좀 더 단순히 캐싱 프레임워크를 이용하는 것도 좋은 선택지일 수도 있을 것 같구요.)&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>이렇게 Count 성향의 작업을 어떻게 최적화할 수 있을지 상상과 실험을 통해 정리해봤습니다. 중요한 것은 하나의 정답이 존재하는 것이 아니고, 처한 상황마다 천차만별의 솔루션들이 있을테니 각각을 잘 비교해보고 잘 PoC 한 뒤 사용하는 것인 듯합니다.&lt;/p>
&lt;p>캐시나 Redis에 대해 관심이 많은 편이지만, 아직 많이 부족하다보니 좋은 말씀 댓글로 달아주시면 감사히 배워나가겠습니다~! 감사합니다.&lt;/p></description></item><item><title>AWS Lambda + API Gateway를 통해 SSR로 OpenGraph 메타데이터 제공하기</title><link>https://umi0410.github.io/blog/ssr-serverless-og/</link><pubDate>Sun, 07 Nov 2021 03:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/ssr-serverless-og/</guid><description>&lt;img src="https://umi0410.github.io/blog/ssr-serverless-og/architecture.png" alt="Featured image of post AWS Lambda + API Gateway를 통해 SSR로 OpenGraph 메타데이터 제공하기" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>&lt;img src="https://umi0410.github.io/blog/ssr-serverless-og/slack.png"
width="625"
height="123"
srcset="https://umi0410.github.io/blog/ssr-serverless-og/slack_hudb8034cbbfca01c01c6729f95196f0c8_28468_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/ssr-serverless-og/slack_hudb8034cbbfca01c01c6729f95196f0c8_28468_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="&amp;ldquo;오픈 그래프 지원해주세요.&amp;rdquo;"
class="gallery-image"
data-flex-grow="508"
data-flex-basis="1219px"
>&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/ssr-serverless-og/examples.png"
width="2376"
height="966"
srcset="https://umi0410.github.io/blog/ssr-serverless-og/examples_hu6e9e1789e6f5add8639186b233630288_1362646_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/ssr-serverless-og/examples_hu6e9e1789e6f5add8639186b233630288_1362646_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="오픈그래프가 사용된 인스타 DM, 페북 메신저, 카톡 예시"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="590px"
>&lt;/p>
&lt;p>서비스 출시를 앞두고 마무리 작업을 하던 중 잊고 있었던 SNS 관련 기능들이 있었습니다. 그 중 OpenGraph를 통해 &amp;ldquo;공유하기&amp;rdquo; 기능 수행 시에
적절한 메타데이터를 제공해줘야 했습니다. 별로 어려운 기능은 아니지만 이를 제공하기 위해 적절한 방향을 찾기가 쉽지 않았던 것 같습니다.
고민과 삽질 끝에 저는 CloudFront, API Gateway, Lambda 서비스들을 이용하기로 결정했고, Serverless framework를 이용해 Golang 바탕의
마이크로서비스를 개발했습니다.&lt;/p>
&lt;h2 id="opengraph-ssr">OpenGraph? SSR?&lt;/h2>
&lt;blockquote>
&lt;p>본 글은 아키텍쳐나 기술 선정에 대한 내용을 많이 담을 것이라서 정의에 대한 자세한 설명은 생략하겠습니다.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>OpenGraph&lt;/code>는 &lt;code>&amp;lt;head&amp;gt;&lt;/code> 태그 안에 &lt;code>&amp;lt;meta property=&amp;quot;og:title&amp;quot; content=&amp;quot;배틀팡::짧고 재밌는 동영상 배틀&amp;quot; /&amp;gt;&lt;/code> 과 같은 형태로 &lt;strong>메타데이터들을 정의해
SNS나 크롤링 봇들이 사이트의 정보를 좀 더 통일된 방법으로 데이터를 수집&lt;/strong>할 수 있게 하는 것과 관련된 개념입니다. 그리고 &lt;code>SSR&lt;/code>(Server Side Rendering)은 &lt;strong>클라이언트가 서버에게는 껍데기 같은 파일만 제공받고
실제 페이지의 내용은 Client 측에서 API와 js 등을 이용해 만들어나가는 방식&lt;/strong>입니다. 아마 대부분의 SPA 앱들은 CSR로 배포/개발 되고 있는 것 같은데요. 그 이유는 프론트엔드를 제공할 때
S3나 CloudFront, Github Page 등 서버의 기능과 완전히 분리하여 제공할 수 있기 때문이라는 점이 크게 작용하지 않을까 싶습니다.&lt;/p>
&lt;p>&lt;strong>&amp;ldquo;왜 OpenGraph를 제공하는데 SSR이 필요해?&amp;rdquo;&lt;/strong>&lt;/p>
&lt;p>크롤링 봇들은 JS를 실행하지 않는 경우가 대다수입니다. 반면 일반적인 CSR 방식의 SPA 앱들은 JS를 이용해 서버에게 API를 호출해 그 응답으로 페이지를 만들죠.
따라서 &lt;strong>JS를 실행하지 않는 크롤링 봇은 기대되는 데이터가 서버로부터 제공되기 이전인 빈 껍데기의 파일만 제공받게 됩니다.&lt;/strong> 따라서 &amp;ldquo;공유하기 링크&amp;quot;는 &lt;strong>크롤링 봇이 오픈그래프를 읽을 수 있도록
SSR로 오픈 그래프 메타데이터들이 담긴 HTML을 제공&lt;/strong>해줘야하는 것이죠!&lt;/p>
&lt;h2 id="오픈-그래프-제공을-위한-ssrserver-side-rendering-마이크로서비스">오픈 그래프 제공을 위한 SSR(Server Side Rendering) 마이크로서비스&lt;/h2>
&lt;p>그래서 &lt;strong>오픈 그래프를 위한 정보만을 SSR로 제공하는 마이크로서비스&lt;/strong>를 만들고자했습니다. HTML 파일을 제공하는 시점에 단순 정적 파일 제공이 아닌
로직 수행 후 동적으로 파일을 제공해야한다면 사실 개발 중이던 Spring 서버에서 엔드포인트 하나만 더 파서 개발을 하면 될 수 있습니다.
하지만 이렇게 되면 메인 백엔드 코드에 SSR 관련 페이지 제공 기능이 추가되어야하는데 &lt;strong>API 서버와 같은 곳에서 일종의 프론트의 기능을 하는 SSR이 공존하는 형태는 선호하지 않았습니다&lt;/strong>.
게다가 백엔드인 Spring boot에서도 어떤 요청에 대해 에러로 응답할 때 SSR에 대한 에러 처리로 해줘야할 지 API에 대한 에러 처리로 해줘야할 지 등등 꽤나 개발적으로 골치가 아픈 부분이 많았습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;올바르지 않은 페이지입니다.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;error&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;NotFound&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>예를 들면 API에 대한 에러 응답은 위와 같은 형태를 띄는 것이 좋을 것이고, 그래야 프론트엔드에서도 처리를 하기 편할 것입니다. 반면 SSR에 대한 에러 응답은 어쨌든 사용자가 직접 대면하는 페이지이다보니
결국 메인 서비스의 프론트엔드로 리다이렉트가 되어 메인 서비스의 프론트엔드가 처리할 수 있게 해줘야할 것이구요.&lt;/p>
&lt;p>&amp;lsquo;이게 무슨 소리지?&amp;rsquo; 라고 생각하실 수 있는데, SSR로 제공된 페이지는 결국 &lt;strong>&amp;ldquo;공유하기&amp;quot;를 통해 링크를 전달 받은 사용자가 직접 접속하는 페이지&lt;/strong>이면서 동시에 &lt;strong>크롤링 봇이 오픈 그래프를 통해 데이터를 수집해가는 페이지&lt;/strong>이기도 합니다.&lt;/p>
&lt;ul>
&lt;li>크롤링 봇은 JS를 수행하지 않는다&lt;/li>
&lt;li>따라서 올바른 메타데이터가 담긴 HTML 만들기 위해선 SSR이 필요하다.&lt;/li>
&lt;li>SSR로 제공된 페이지로 유저가 접속했을 때 서비스로 올바르게 접속할 수 있어야한다. 하지만 서비스 자체를 SSR 방식으로 변경하기에는 무리가 있다!&lt;/li>
&lt;/ul>
&lt;p>위와 같은 특징들로 인해 &lt;strong>오픈 그래프 제공을 위한 SSR 마이크로서비스는 다음과 같이 동작하면 좋지 않을까?!&lt;/strong> 싶었어요.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>오픈그래프 정보가 담긴 동적으로 생성된 HTML은 SSR 마이크로서비스&lt;/strong>에 의해 제공된다. SSR 마이크로서비스는 요청이 들어왔을 때 API 서버에게 해당 요청과 관련된 정보를 질의한다.
&lt;ul>
&lt;li>이때 SSR이 직접 DB(스프링이 이용 중인 DB)를 이용하지 않는 게 좋은 이유는 정말 많겠지만 우선은 다음과 같다.
&lt;ul>
&lt;li>SSR 마이크로서비스가 지지고 볶고 뭘 해도 스프링의 DB 설계에는 영향을 주지 않는다. SSR로 인해 메인 스프링이 흔들리는 것을 방지해준다.&lt;/li>
&lt;li>일단 간단하다. 간단한 조회만을 위해 DB를 설정하는 것보다는 필요한 API의 필요한 필드들만 정의해서 API로 조회하는 게 더 쉬울 것이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>반면 스프링이 API 스펙을 변경할 때 SSR에도 영향이 있을지를 고려해야한다는 것과 추가적인 인프라 관리가 필요하다는 단점도 있긴하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="고려했던-인프라-및-설계">고려했던 인프라 및 설계&lt;/h2>
&lt;ol>
&lt;li>&lt;code>ElasticBeanstalk&lt;/code>&lt;/li>
&lt;li>&lt;code>Lambda&lt;/code> + &lt;code>ALB&lt;/code>&lt;/li>
&lt;li>&lt;code>Lambda&lt;/code> + &lt;code>API Gateway&lt;/code> + &lt;code>CloudFront&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>고려했던 인프라는 위와 같았고 결국에는 1, 2번 방식은 단점들이 존재해서 3번으로 선택했습니다!&lt;/p>
&lt;h3 id="option-1-elasticbeanstalk-바탕의-인프라">Option 1) ElasticBeanstalk 바탕의 인프라&lt;/h3>
&lt;p>&lt;img src="https://umi0410.github.io/blog/ssr-serverless-og/beanstalk.png"
width="777"
height="494"
srcset="https://umi0410.github.io/blog/ssr-serverless-og/beanstalk_hu7f84c1f69f7b8edb6973eb99a7a91a71_186084_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/ssr-serverless-og/beanstalk_hu7f84c1f69f7b8edb6973eb99a7a91a71_186084_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="빈스톡 바탕의 인프라"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="377px"
>&lt;/p>
&lt;p>&lt;code>ElasticBeanstalk&lt;/code>은 &lt;code>eb cli&lt;/code>를 통해 편리하게 배포를 할 수 있고, auto scaling group도 편리하게 관리할 수 있다는 장점이 있습니다.
손 쉬우면서도 안정적으로 관리하기는 딱이죠. 그리고 기존 메인 서버인 스프링 서버도 빈스톡으로 관리를 하고 있었기 때문에 빈스톡에 익숙하다는 장점도 있었습니다.&lt;/p>
&lt;p>내부적으로 빈스톡의 &lt;code>도커 플랫폼&lt;/code>에 대한 궁금증도 있었고 Go라면 &lt;code>nano&lt;/code> 인스턴스로도 어떻게 잘 굴려볼 수 있지 않을까 싶은 마음에 &lt;code>fiber&lt;/code> 프레임워크를 바탕으로 개발을 했습니다.
하지만 아무리 Go라도 생각보다 nano 인스턴스로 굴리기는 힘들었고, &lt;code>micro&lt;/code>도 아슬아슬하더라구요.(micro도 빌드할 때 OOM으로 실패함.)&lt;/p>
&lt;p>빈스톡 인스턴스 내부에서 이미지를 빌드하고 태그를 수정해서 배포를 트리거 시키는 방식을 이용하면 빌드 도중의 OOM 이슈는 없겠지만 ECR을 통해 이미지 레지스트리를 관리해줘야하고,
빌드할 때마다 docker-compose.yml에서 이미지 태그를 올바르게 업데이트 시켜주는 과정도 번거로울 것 같았죠.&lt;/p>
&lt;p>스프링이 t3.small로 돌아가고 있는데(스프링은 JAR를 젠킨스에서 빌드) Go를 쓰면서 t3.small을 쓰자니 이건 웬 공유하기 기능하나에 본 서버의 몇 분의 1에 해당하는 리소스를
사용해야하는 이상한 아키텍쳐가 되어버릴 것만 같았죠. 비용도 비용이구요.&lt;/p>
&lt;p>그래서 &lt;code>fiber&lt;/code> 개발한 SSR 마이크로서비스를 ElasticBeanstalk에 배포하는 방식은 기각되었습니다.&lt;/p>
&lt;h3 id="option-2-lambda--alb">Option 2) &lt;code>Lambda&lt;/code> + &lt;code>ALB&lt;/code>&lt;/h3>
&lt;p>&amp;lsquo;&lt;em>SSR을 위해 서버를 관리하는 건 너무 낭비가 크다.&lt;/em>&amp;lsquo;는 생각에 서버리스로 방향을 돌렸습니다. &lt;code>serverless&lt;/code> 프레임워크를 기존에 이용하고 있었기 때문에 크게 낯선 기술은 아니기도 했구요.&lt;/p>
&lt;p>&lt;code>Lambda&lt;/code>를 이용할 때 Go언어 같은 경우에는 AWS Lambda의 콘솔 에디터 화면이 제공되지 않아 좀 불편해 파이썬으로 개발을 할까 싶었는데, 단방향이긴 하지만 API로 밀접하게 메인 API 서버랑 통신을 해야하는 SSR 서비스의
특성상 type을 명확히 정의해서 API 스펙과 비교하기도 편하고, 개발/동작도 안정적으로 할 수 있는 &lt;code>Go&lt;/code>를 선택했습니다.&lt;/p>
&lt;p>&lt;code>파이썬&lt;/code>은 API에게 응답받은 json을 어떻게 역직렬화할까부터도 고민이었고, 귀찮아서 그냥 json이나 dictionary로
우겨넣어서 개발을 하면 당시에는 편하지만 일주일만 지나도 무슨 코드인지 알아보기 힘들고 API 스펙이 변경되는 경우의 디버깅은 거의 극악의 난이도이기 때문에 파이썬도 배제했습니다.&lt;/p>
&lt;p>하지만 &lt;code>ALB&lt;/code> =&amp;gt; &lt;code>Lambda&lt;/code>로 요청을 바로 넘기는 경우, ALB에서 넘어온 요청을 처리하는 방식이 너무 간단해 커스터마이징하기가 더 까다로운 형태였습니다.
예를 들면 경로를 바탕으로 라우팅하는 로직을 직접 구현해야했었는데요. 보통의 웹 프레임워크에서 제공하는 &lt;code>/*&lt;/code>, &lt;code>/b/*&lt;/code> 이런 표현들을 바탕으로 한 경로와 핸들러간의 맵핑이 불가능했던 것입니다.
이유는 쉽게 말해 Lambda에는 string으로 path가 들어오고 응답도 string으로 줘야하는 겁니다. 이 방식은 기존의 웹프레임워크를 이용해 개발하던 방식과는 거리가 멀죠.&lt;/p>
&lt;p>따라서 이 방식도 기각되었습니다.&lt;/p>
&lt;h3 id="option-3-lambda--api-gateway--cloudfront">Option 3) &lt;code>Lambda&lt;/code> + &lt;code>API Gateway&lt;/code> + &lt;code>CloudFront&lt;/code>&lt;/h3>
&lt;p>&lt;img src="https://umi0410.github.io/blog/ssr-serverless-og/lambda.png"
width="638"
height="467"
srcset="https://umi0410.github.io/blog/ssr-serverless-og/lambda_hued4c382ead438bad8f94a28a2a155ee2_136294_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/ssr-serverless-og/lambda_hued4c382ead438bad8f94a28a2a155ee2_136294_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Lambda 바탕의 인프라"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="327px"
>&lt;/p>
&lt;p>드디어 최종 채택안! &lt;strong>&amp;quot;&lt;code>CloudFront&lt;/code>로 HTTP/S 관련 기능을 처리하고, 그 Origin을 &lt;code>API Gateway&lt;/code>로 둔 뒤 &lt;code>Lambda&lt;/code>로 요청 처리하기&amp;rdquo;&lt;/strong> 입니다. 사실 API Gateway의 이런 저런 기능이 별로 필요 없었기에
&amp;lsquo;&lt;em>Lambda를 ALB로 노출시킬 수 있으면 간단하게 그렇게 하자&lt;/em>&amp;lsquo;라고 생각했던 방식이 Option 1이었습니다. 하지만 람다로 ALB TargetGroup에 대한 요청을 직접 처리하기에는 개발적으로 많은 불편히 있었어요. 정말 간단한 작업용 같은 느낌!&lt;/p>
&lt;p>반면 Lambda가 APIGateway에게서 요청을 전달받으면 아주 편리하고 익숙한 방식으로 개발을 할 수가 있었습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 코드 일부를 예시로 가져왔습니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">fiber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/health&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">fiber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Ctx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SendString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;OK&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handleIndex&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/c/:clipId&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handleClip&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/b/:battleId/:clipId&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handleBattleWithClips&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/*&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handleDefaultNotFound&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 람다가 실행된다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 요청마다 Handler를 호출한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">lambda&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Handler&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="nx">events&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">APIGatewayV2HTTPRequest&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">events&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">APIGatewayV2HTTPResponse&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fiberadapter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">app&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">ProxyWithContextV2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위와 같이 람다로 들어오는 요청을 처리하기 위한 핸들러를 찾아 호출하는 로직을 직접 구현하지 않고 기존의 유명한 웹 프레임워크들과 그에 대한 어댑터를 통해 개발할 수 있었습니다! (참고: &lt;a class="link" href="https://github.com/awslabs/aws-lambda-go-api-proxy" target="_blank" rel="noopener"
>aws-lambda-go-api-proxy&lt;/a>)
람다의 핸들러가 &lt;code>fiber&lt;/code> 앱에게 요청을 넘겨서 그 응답을 리턴하는 형태죠. fiber 앱의 &lt;strong>핸들러들은 SSR 방식의 동적으로 생성된 HTML들을 리턴&lt;/strong>해줬습니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/ssr-serverless-og/awslabs.png"
width="1163"
height="728"
srcset="https://umi0410.github.io/blog/ssr-serverless-og/awslabs_hucebe86c00a0fac0cd2e2c5a874c5ec8d_132590_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/ssr-serverless-og/awslabs_hucebe86c00a0fac0cd2e2c5a874c5ec8d_132590_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="awslabs Github - https://github.com/awslabs/aws-lambda-go-api-proxy"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="383px"
>&lt;/p>
&lt;p>AWS에서 개발 중인 오픈소스 같습니다. 최근 커밋도 6일 전인 활발한 프로젝트인가봐요! (근데 왜 &lt;code>ALB(TargetGroup) - Lambda&lt;/code>에 대한 어댑터나 프록시 오픈소스는 개발을 해주지 않은 걸까요.. 궁금합니다.)&lt;/p>
&lt;p>어쨌든 &lt;code>Lambda&lt;/code> + &lt;code>API Gateway&lt;/code>를 이용하면서 저렴하면서도 편리하게 개발을 할 수 있었습니다. 여기서 끝나면 좋았겠지만 다음 삽질이 있었습니다.&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.aws.amazon.com/ko_kr/apigateway/latest/developerguide/http-api-custom-domain-names.html" target="_blank" rel="noopener"
>API Gateway를 커스텀 도메인 네임으로 이용하기&lt;/a>. 즉 기본적으로 API Gateway는 AWS 자체적인
도메인 네임을 통해 제공되고, 인증서도 AWS 측에서 제공을 해줍니다. 하지만 &lt;strong>Custom domain을 이용하고 싶다면&lt;/strong>? 우리의 도메인을 인증해줘야겠지요. 하지만 기본적으로는 그렇게 할 수 없고 위의 링크의 방법을 통해서는 가능합니다.
API Gateway에 Custom domain name을 달기 위한 추가적인 방법들이에요.&lt;/p>
&lt;blockquote>
&lt;p>API Gateway doesn&amp;rsquo;t directly support http without TLS, presumably as a security feature &amp;hellip; - &amp;ldquo;&lt;a class="link" href="https://stackoverflow.com/questions/47311081/redirect-http-requests-to-https-on-aws-api-gateway-using-custom-domains" target="_blank" rel="noopener"
>Redirect http:// requests to https:// on AWS API Gateway (using Custom Domains)&lt;/a>&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>하지만 이렇게 API Gateway를 Custom Domain name으로 이용할 수 있게 했더니 이번엔 또 다른 이슈가 존재했죠. 즉, API Gateway는 443 HTTPS만을 지원하고 &lt;strong>80 HTTP는 지원을 하지 않고 HTTP-&amp;gt;HTTPS로의 리다이렉션도 지원하지 않는다&lt;/strong>는 것이었습니다 ㄱ-&amp;hellip;
그럼 어떤 문제냐 있냐&amp;hellip; 해당 HTTP로 링크를 접속하면 아무런 응답이 없습니다. 치명적이죠. 따라서 HTTPS Redirect를 수행할 수 있는 CloudFront를 앞단에 붙이고 API Gateway를 Origin으로 설정하는 방식으로 개선했습니다.
그 최종 아키텍쳐가 위의 그림과 같구요.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/ssr-serverless-og/results.png"
width="2218"
height="667"
srcset="https://umi0410.github.io/blog/ssr-serverless-og/results_hu71c370d5cd569ef3fd2ca7048de84a72_1123081_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/ssr-serverless-og/results_hu71c370d5cd569ef3fd2ca7048de84a72_1123081_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="결과"
class="gallery-image"
data-flex-grow="332"
data-flex-basis="798px"
>&lt;/p>
&lt;p>결과적으로 위와 같이 URL이 HTTP 이건 HTTPS 이건 상관 없이 원활히 오픈 그래프를 통해 적절한 정보를 제공할 수 있었고, 이제 정말 출시가 다가오는 것 같아 걱정 반 설렘 반이기도 합니다.&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>SSR로 오픈 그래프 하나 제공하겠다고 일요일 내내 삽질을 하게 된 것 같습니다. 평소에 서버리스는 아무래도 벤더 lock-in 이슈나 개발/디버깅 과정에서 로컬과 실제 클라우드 환경의 차이로 인한 불편 등등으로 인해
별로 선호하지 않았는데 그래도 공유하기 기능은 이제 앞으로 트래픽 걱정을 크게 하지 않고 가볍게 잘 사용할 수 있을 것 같아 좋습니다 ㅎㅎ&lt;/p>
&lt;p>아쉬운 점은 좀 더 &lt;strong>각 서비스를 각 서비스의 역할이나 특성에 맞춰 사용할 수 있었으면 좋았을텐데, 단순히 특정 상황을 해결하기 위한 수단으로 이용하게 된 점이 조금 아쉽습니다&lt;/strong>.&lt;/p>
&lt;p>예를 들어 Lambda를 노출시키기 위해 굳이 API Gateway를 사용하지 않아도 ALB로 간단하게 충분히 노출 시킬 수 있었지만, 개발적으로 API Gateway-Lambda간의 작업이 Adpater framework을 통해 개발하기 편해서 API Gateway를
이용하게 됐죠. API Gateway의 API Key를 이용하는 인증/인가 기능이나 쓰로틀링 제한과 같은 기능들은 하나도 필요가 없는데 말이죠.&lt;/p>
&lt;p>거기에 CloudFront는 사실상 Content Delivery나 캐싱이라는 주용도로 사용되면 좋았겠지만 단순히 API Gateway를 사용하면서 HTTPS로의 리다이렉트를 위해서 사용됐을 뿐이라는 점이 아쉽습니다.&lt;/p>
&lt;p>물론 CloudFront나 API Gateway 같은 서비스들도 기본적으로 켠 만큼 돈이 나가는 게 아니라 호출한 만큼 돈이 나가는 형태이면서도 매우 저렴한 서비스들이기 때문에 지금은 불필요하지만 특정 상황을 해결하기 위한 서비스들처럼 느껴지더라도
후에 저희 서비스가 성장하면 분명히 CloudFront의 주기능인 캐싱 자체의 중요성도 증가할 수도 있을 것이고, 그 정도 규모가 된다면 간단한 서버리스 아키텍쳐가 아닌 좀 더 정교한 구축형 아키텍쳐로 개선할 수도 있을 것 같습니다!&lt;/p>
&lt;p>이상 오픈 그래프를 위한 SSR 서비스 구축기였습니다~!&lt;/p></description></item><item><title>2020 카카오 인턴쉽 코딩 테스트 - 보석 쇼핑 풀이</title><link>https://umi0410.github.io/blog/algorithm/kakao-gem-shopping/</link><pubDate>Sun, 06 Sep 2020 19:11:07 +0900</pubDate><guid>https://umi0410.github.io/blog/algorithm/kakao-gem-shopping/</guid><description>&lt;img src="https://umi0410.github.io/blog/algorithm/kakao-gem-shopping/illust.jpg" alt="Featured image of post 2020 카카오 인턴쉽 코딩 테스트 - 보석 쇼핑 풀이" />&lt;h2 id="문제-설명">문제 설명&lt;/h2>
&lt;p>문제 출처: &lt;a class="link" href="https://programmers.co.kr/learn/courses/30/lessons/67258" target="_blank" rel="noopener"
>https://programmers.co.kr/learn/courses/30/lessons/67258&lt;/a>&lt;/p>
&lt;ul>
&lt;li>각각의 보석상은 하나의 보석을 판매&lt;/li>
&lt;li>연속된 보석상들을 쇼핑하면서 방문할 때마다 보석을 구매&lt;/li>
&lt;li>모든 종류의 보석을 구매할 때까지 진행&lt;/li>
&lt;li>모든 종류의 보석을 구매하는 경우 중 가장 조금의 보석을 가장 앞선 보석상에서 구매하는 경우를 구하기&lt;/li>
&lt;/ul>
&lt;h2 id="문제-접근">문제 접근&lt;/h2>
&lt;p>&lt;img src="https://umi0410.github.io/home/jinsu/workspace/umi0410/umi0410.github.io/content/blog/algorithm/kakao-gem-shopping/illust.jpg"
loading="lazy"
alt="illust.jpg"
>&lt;/p>
&lt;p>우선 단순하게 문제의 조건을 그림으로 나타내면 위와 같다. 결국 1번 상점부터 방문하는 경우, 2번 상점부터 방문하는 경우, &amp;hellip; 이런 식으로 진행해나간 뒤 가장 보석을 적게, 앞의 상점에서 사는 경우를 구하면 된다.&lt;/p>
&lt;h3 id="-첫-번째-접근">👎 첫 번째 접근&lt;/h3>
&lt;p>&lt;em>&amp;lsquo;&amp;lsquo;각 경우마다 직접 구해볼까?&amp;rsquo;&lt;/em>&lt;/p>
&lt;p>허걱.. 보석상은 최대 10만개를 입력으로 준다. 각 경우를 매번 직접 N번 상점부터 시작해서 모든 종류의 보석을 사는 경우를 구하는 것은 너무 비효율적일 것 같다.&lt;/p>
&lt;h3 id="-두-번째-접근">👍 두 번째 접근&lt;/h3>
&lt;p>&lt;em>&amp;ldquo;그러고보니 앞의 경우와 비교하면서 방금 제외된 보석만 추가되는 경우를 참고하며 구하면 되지 않을까?&amp;rdquo;&lt;/em>&lt;/p>
&lt;p>즉 그림을 보면 두 번째 경우는 앞의 경우(첫 번째 경우)와 비교했을 때 A가 줄었고, 내가 방문한 보석상 중 A가 없다면 A를 구매할 때까지 보석상을 방문하면 된다. 세 번째 경우는 그와 반대로 앞의 경우(두 번째 경우)와 비교했을 때 B가 줄었지만 내가 방문한 보석상 중 B를 판매하는 곳이 있기에 새로운 보석상을 방문할 필요가 없다.&lt;/p>
&lt;p>=&amp;gt; 오호라&amp;hellip; 추상적으로 접근 방식을 바라봤을 때는 효율적인 것 같다! 이제 구현에서만 잘 구현하면 되겠다.&lt;/p>
&lt;h2 id="구현">구현&lt;/h2>
&lt;h3 id="-올바른-구현">👍 올바른 구현&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 풀이법이 떠오르지 않는다. 처음 보는 유형이다...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 그냥 1번에서 시작해서 다 포함하는 경우&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 2번에서 시작해서 다 포함하는 경우 이렇게 다 세보면 효율성이 오바일까..? 최대 10만칸임...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 약간 dp스럽게 전꺼를 바탕으로 생각하는 게 좋겠다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 전꺼를 없앤 대신 걔가 포함되어있으면 ㄱㅊ은 거니까.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">solution&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gems&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gems_set&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gems&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shopping_bag&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">gem&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">gems_set&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shopping_bag&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">gem&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gems&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gems&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gems_set&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">discard&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gem&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shopping_bag&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">gem&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gems_set&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">answers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[(&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gems&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">found&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gems&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shopping_bag&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">found&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">end&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">length&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">answers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">answers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">length&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">answers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">answers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[(&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># print(answers)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">answer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">sorted&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">answers&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">answer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">answer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># end 포함&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">shop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gems&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shopping_bag&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">left_gem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gems&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">is_complete&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shopping_bag&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">left_gem&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">shopping_bag&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">left_gem&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gems&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shopping_bag&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">gems&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 이전에 뺸 녀석을 찾은 경우&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">gems&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">left_gem&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">is_complete&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">is_complete&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">is_complete&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">new_end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>내가 방문하면서 구매한 보석들의 각각의 개수를 딕셔너리를 통해 관리했다.&lt;/p>
&lt;p>이전 시도 때 구매한 보석들의 각각의 개수를 참고해 만약 이전에 1번 보석상에서 A 보석을 구매하는 것을 시작으로 했다면 이번 시도에는 2번 보석상에서 어떤 보석을 구매하게 될 것이다. 이 경우 이젠 1번 보석상에서 A 보석을 구매할 일이 없으니 딕셔너리에서 A 보석의 개수를 1개 줄여주고 시작을 하는 것이다. 이후 구매 개수가 0개가 되는 보석이 없는지 확인하고 존재한다면 해당 보석을 구매할 때까지 계속해서 보석상을 방문해나가면 된다.&lt;/p>
&lt;ul>
&lt;li>보석의 모든 종류를 구하기 위해서는 Set 자료 구조를 이용했다.&lt;/li>
&lt;li>구매한 보석을 순서대로 리스트로 관리하며 리스트에 내가 구매한 보석이 있는지 찾는 방식은 &lt;code>__contains__&lt;/code> 를 이용하게 되고 이 작업만 놓고 보면 시간 복잡도가 O(n)이다. 반면 딕셔너리에 각 보석의 구매 개수를 이용해 구매하지 않은 보석이 있는지 확인하는 작업은 O(1)이다. 따라서 딕셔너리를 이용해 보석을 구매했는지를 확인하는 방식을 이용했다.&lt;/li>
&lt;/ul>
&lt;h3 id="-실패했던-구현">👎 실패했던 구현&lt;/h3>
&lt;blockquote>
&lt;p>이 부분은 개인적으로 기억하려는 의도로 작성한 것이기 때문에 설명이 이상할 수 있습니다.&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>list를 이용해 내가 구매한 보석을 순서대로 담았던 방식&lt;/li>
&lt;/ol>
&lt;p>위에서도 언급은 했지만 list를 이용해 내가 구매한 보석을 순서대로 담은 뒤 어떤 보석을 적어도 한 번 구매한 적이 있는지를 &lt;code>in&lt;/code> 으로 찾는 방식을 이용한 경우이다. 게다가 이전 시도에서 left_gem을 제거한 뒤 새로운 &lt;code>shopping_bag&lt;/code>을 대입하는 과정에서 아래와 같이 O(n)의 복잡도를 갖는 list slicing을 이용하다보니 더욱 비효율적이었다. 프로그래머스의 효율성 테스트를 5개 실패했다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">shopping_bag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shopping_bag&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>1번 방식을 개선해 list slicing이 아닌 dequeue 자료구조 이용하기&lt;/li>
&lt;/ol>
&lt;p>list slicing 시 O(n)의 시간 복잡도를 갖는 list가 아닌 앞의 요소를 제거하면서도 O(1)의 시간 복잡도를 갖는 dequeue 자료구조를 이용했다. 하지만 프로그래머스 효율성 테스트를 2개 실패했다.&lt;/p>
&lt;p>즉 요점은 list든 dequeue든 둘 중 무엇을 이용하더라도 O(n)의 시간 복잡도를 갖는 &lt;code>in&lt;/code>을 통해 특정 요소가 collection 내에 존재하는 것이 비효율적이므로 딕셔너리를 이용해 O(1)의 시간 복잡도를 갖는 방식을 이용하는 것이다.&lt;/p></description></item><item><title>EKS K8s에서 ELB(ALB, NLB) 제대로 설정하며 사용하기</title><link>https://umi0410.github.io/blog/aws/aws_eks_elb/</link><pubDate>Sun, 06 Sep 2020 19:11:07 +0900</pubDate><guid>https://umi0410.github.io/blog/aws/aws_eks_elb/</guid><description>&lt;img src="https://umi0410.github.io/blog/aws/aws_eks_elb/preview.png" alt="Featured image of post EKS K8s에서 ELB(ALB, NLB) 제대로 설정하며 사용하기" />&lt;h2 id="-시작하며">🐶 시작하며&lt;/h2>
&lt;blockquote>
&lt;p>본 게시글은 AWS 대학생 유저그룹인 &lt;a class="link" href="https://velog.io/@ausg" target="_blank" rel="noopener"
>AUSG&lt;/a>의 활동 중
하나로서 본인(박진수)이 작성한 게시물을 포워딩한 것입니다.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://umi0410.github.io/blog/aws/aws_eks_elb/preview.png"
width="2032"
height="1097"
srcset="https://umi0410.github.io/blog/aws/aws_eks_elb/preview_huc38b74e19f60c2848e88837c4c6920fa_1709468_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/aws/aws_eks_elb/preview_huc38b74e19f60c2848e88837c4c6920fa_1709468_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="preview.png"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="444px"
>&lt;/p>
&lt;p>&lt;code>데브옵스&lt;/code> 인턴으로 근무한 지가 벌써 두 달이 되어갑니다. 이것 저것 배운 것이 많았던 시간이었는데, 그 중 꽤나 삽질을 했던 &lt;code>Kubernetes&lt;/code> 와 &lt;code>ELB&lt;/code>를 이용하는 부분에 대해 정리를 해볼까합니다. &lt;code>jenkins&lt;/code>, &lt;code>spinnaker&lt;/code>, &lt;code>argo&lt;/code>, &lt;code>terraform&lt;/code>, &lt;code>ansible&lt;/code>, &lt;code>github action&lt;/code>, &amp;hellip; 등등 다양한 내용을 경험할 수 있던 시간이었지만, 그 중 kubernetes에서 무슨 작업을 하던 빼놓을 수 없으면서 어딘가 깔끔히 그 흐름이 정리된 곳을 보기 힘들었던 &lt;strong>service를 ELB에 연결&lt;/strong>하기에 대한 내용을 정리해보겠습니다.&lt;/p>
&lt;p>&lt;em>본 포스트는 EKS를 통해 K8s를 이용할 때를 기준으로 설명합니다.&lt;/em>&lt;/p>
&lt;h2 id="-eks-에서-elb를-사용해-서비스를-노출킬-때-유의사항들">💁🏻‍♂️ EKS 에서 ELB를 사용해 서비스를 노출킬 때 유의사항들&lt;/h2>
&lt;blockquote>
&lt;p>🧐 : &amp;quot; &lt;code>ELB&lt;/code>, &lt;code>NLB&lt;/code>, &lt;code>ALB&lt;/code> 대체 뭐가 다른 거야..?ㅜㅜ &lt;strong>쿠버네티스&lt;/strong>를 쓸 때는 어떻게 얘네를 지정하는 거지..? &lt;code>kubectl expose deploy {{deployment_name}} --type=LoadBalancer&lt;/code> 하면 그냥 작동은 하던데&amp;hellip;&amp;quot;&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>EKS&lt;/code>에서 주로 사용하는 &lt;code>ELB&lt;/code>는 L4의 &lt;code>NLB&lt;/code>와 L7의 &lt;code>ALB&lt;/code> 입니다. ALB가 L7에 대한 좀 더 다양한 설정이 가능하기 때문에 조건이 많기도 하고, AWS의 ALB만을 위한 &lt;code>alb-ingress-controller&lt;/code>라는 녀석이 직접 &lt;code>Ingress&lt;/code>의 설정들을 관리해주기 때문에 설정할 수 있는 옵션도 많습니다. 좋게 보면 많은 설정을 할 수 있고, 나쁘게 보면 초보자에겐 귀찮을 수 있습니다. &lt;code>NLB&lt;/code>는 비교적 설정이 적고 따라서 설정해줄 수 있는 항목도 적습니다.&lt;/p>
&lt;p>쿠버네티스에서 다양한 작업을 하면서 다양한 controller을 접하게 되고, 그렇게 될 수록 &lt;code>annotation&lt;/code>으로 많은 설정을 하게 됩니다. k8s를 처음 접할 때에는 annotation에 대한 정의로서 아래와 같은 문장을 접할 수 있고, 마치 기능과 크게 상관이 없을 것처럼 느껴지기도 하지만 사실 EKS를 비롯한 여러 서비스에서는 annotation을 이용해 중요한 설정 등을 기입할 수 있기 때문에 잘 설정해주어야합니다. ELB또한 모든 설정이 annotation으로 동작한다.&lt;/p>
&lt;blockquote>
&lt;p>&amp;quot; &lt;code>Label&lt;/code>을 사용하여 오브젝트를 선택하고, 특정 조건을 만족하는 오브젝트 컬렉션을 찾을 수 있다. 반면에, &lt;code>annotation&lt;/code>은 오브젝트를 식별하고 선택하는데 사용되지 않는다. 어노테이션의 메타데이터는 작거나 크고, 구조적이거나 구조적이지 않을 수 있으며, 레이블에서 허용되지 않는 문자를 포함할 수 있다.&amp;quot;&lt;/p>
&lt;/blockquote>
&lt;h3 id="-alb를-사용할-때-유의할-점">⚠️ ALB를 사용할 때 유의할 점&lt;/h3>
&lt;blockquote>
&lt;p>어떤 옵션들이 있고, 기본적으로는 어떻게 설정되는 지에 대한 이해가 있어야 오류 과정을 추적하기 쉬우므로 기본적으로 ALB를 AWS Console에서 사용해본 뒤에 설정할 것을 추천합니다.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>alb ingress controller&lt;/code>가 생성할 ALB가 사용할 서브넷을 discover하기 위해서는 &lt;strong>올바른 태그가 달린 subnet&lt;/strong>이 존재해야한다.&lt;/li>
&lt;li>node 혹은 &lt;code>alb ingress controller&lt;/code>에 연결된 service account가 alb를 제어하기 위한 &lt;strong>iam permission&lt;/strong>이 부여되어야한다.&lt;/li>
&lt;li>internet facing한 alb를 만들지 internal한 alb를 만들지 고민해봐야한다.&lt;/li>
&lt;li>&lt;code>alb ingress controller&lt;/code>의 log를 통해 작업에 대한 log를 볼 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="-nlb-clb를-사용할-때-유의할-점">⚠️ NLB, CLB를 사용할 때 유의할 점&lt;/h3>
&lt;p>&lt;a class="link" href="https://kubernetes.io/ko/docs/concepts/services-networking/service/#aws-nlb-support" target="_blank" rel="noopener"
>https://kubernetes.io/ko/docs/concepts/services-networking/service/#aws-nlb-support&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/load-balancing.html" target="_blank" rel="noopener"
>https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/load-balancing.html&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;code>NLB&lt;/code>, &lt;code>CLB&lt;/code>가 사용할 서브넷을 설정하기 위해서는 &lt;strong>올바른 태그가 달린 subnet&lt;/strong>이 존재해야한다.&lt;/li>
&lt;li>어느 부분에선가 NLB, CLB를 제어하기 위한 &lt;strong>iam permission&lt;/strong>이 부여되어야한다. (어느 부분인지 확실히는 모르겠음. 따로 설정안해도 동작하는 것을 보아 worker node가 갖는 iam role에 permission이 붙어있을 것으로 예상됨)&lt;/li>
&lt;/ul>
&lt;h2 id="-alb를-사용해-서비스를-노출시키는-방법">🌎 ALB를 사용해 서비스를 노출시키는 방법&lt;/h2>
&lt;blockquote>
&lt;p>😊 &lt;code>ALB&lt;/code>는 K8s에 친숙하지 않으신 분들께는 다소 진입장벽이 있을 수 있습니다. 그냥 서비스를 노출시킬 때는 굳이 사용할 필요 없는 &lt;code>Ingress&lt;/code> 라는 오브젝트도 관리해야하고, &lt;code>alb-ingress-contoller&lt;/code>라는 녀석도 배포해야하며 설정이 다양하기 때문이죠! 💦&lt;/p>
&lt;/blockquote>
&lt;p>K8s에서 EKS를 사용해 &lt;code>ALB&lt;/code>를 이용하고싶은 경우 &lt;code>alb-ingress-controller&lt;/code>을 배포한 뒤, &lt;code>Ingress&lt;/code>를 통해 사용할 alb에 대한 rule을 설정을 해주어야합니다.&lt;/p>
&lt;p>&lt;a class="link" href="https://kubernetes-sigs.github.io/aws-alb-ingress-controller/guide/controller/setup/" target="_blank" rel="noopener"
>https://kubernetes-sigs.github.io/aws-alb-ingress-controller/guide/controller/setup/&lt;/a> 의 내용을 버릴 부분이 하나도 없습니다. 위 링크를 통해 alb-ingress-controller에 대한 개념을 잡고 배포해봅니다. &lt;code>alb-ingress-controller.yaml&lt;/code>의 인자를 적절히 수정해주어야합니다.&lt;/p>
&lt;p>ALB가 아닌 k8s cluster 상에서 L7 LoadBalancer를 이용하는 경우에는 nginx ingress controller등을 이용하며 nginx 에 적용할 rule을 &lt;code>Ingress&lt;/code>라는 K8s Object를 통해 설정합니다. ingress controller의 설정에서 자신의 class name을 적어주고, &lt;code>Ingress&lt;/code>에서는 어떤 class name의 ingress controller에서 자신(Ingress이자 Rule)을 적용하도록 할 지를 annotation을 통해 설정하거나 ingressClassName이라는 필드를 통해 설정합니다.(ingress 설정에 대한 참고 - &lt;a class="link" href="https://kubernetes.io/ko/docs/concepts/services-networking/ingress/#%EC%9D%B8%EA%B7%B8%EB%A0%88%EC%8A%A4-%ED%81%B4%EB%9E%98%EC%8A%A4" target="_blank" rel="noopener"
>https://kubernetes.io/ko/docs/concepts/services-networking/ingress/#인그레스-클래스&lt;/a>)&lt;/p>
&lt;p>이와 같은 경우에는 ingress controller가 직접 ingress에 명시된 rule을 이용했지만, &lt;strong>alb-ingress-controller&lt;/strong>의 경우는 alb-ingress-controller가 nginx-ingress-controller처럼 &lt;strong>직접 웹서버의 역할을 하는 것이 아닌&lt;/strong>, ingress에 명시된 rule을 이용하는 &lt;strong>ALB를 생성하고 관리&lt;/strong>하는 역할을 한다는 것입니다. 이 부분이 처음에는 다소 헷갈리게 느껴질 수 있기에 길게 서술해보았습니다.&lt;/p>
&lt;p>실제로 ingress를 생성한 뒤 앞에서 배포한 alb-ingress-controller의 log를 보면 alb를 관리하기위한 여러 작업을 수행중인 모습을 볼 수 있습니다.&lt;/p>
&lt;p>그럼 이제 실제로 alb ingress controller을 통해 alb를 이용해보겠습니다.&lt;/p>
&lt;h3 id="alb를-원활히-제어하기-위한-permission-부여">ALB를 원활히 제어하기 위한 permission 부여&lt;/h3>
&lt;ul>
&lt;li>ALB iam 정책 참고
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/alb-ingress.html" target="_blank" rel="noopener"
>https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/alb-ingress.html&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.2/docs/examples/iam-policy.json" target="_blank" rel="noopener"
>https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.2/docs/examples/iam-policy.json&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>ALB&lt;/code>를 제어하기 위해서는 aws의 리소스에 대한 어떠한 permission이 필요합니다. &lt;code>node&lt;/code>에 부여할 수도 있고, IAM User에 부여한 뒤 &lt;code>alb ingress controller&lt;/code>의 설정에서 해당 IAM User의 Key를 부여할 수도 있고, Service account와 IAM Role을 &lt;code>OIDC&lt;/code>(OpenID Connect를 이용해 Service account와 IAM Role을 연결시키는 작업)를 이용해 엮은 뒤, alb ingress controller pod에 해당 Service Account를 부여할 수도 있지만 뒤의 방법들은 좀 튜토리얼치고 투머치한 감이 있기때문에, 간단히 node에 Permission을 부여하도록하겠습니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/aws/aws_eks_elb/iam.png"
width="797"
height="532"
srcset="https://umi0410.github.io/blog/aws/aws_eks_elb/iam_hu9ac6964ec6844f4165a3f6a7be3b3a23_55018_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/aws/aws_eks_elb/iam_hu9ac6964ec6844f4165a3f6a7be3b3a23_55018_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="iam.png"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>worker node들이 이용하는 IAM Role에 Policy를 추가한 모습.&lt;/p>
&lt;h3 id="alb가-사용할-subnet에-적절한-태그-달기">alb가 사용할 subnet에 적절한 태그 달기&lt;/h3>
&lt;p>&lt;a class="link" href="https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/alb-ingress.html" target="_blank" rel="noopener"
>https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/alb-ingress.html&lt;/a> 에 나와있듯이 ELB가 이용하는 서브넷을 자동으로 설정되도록 하기 위해서는 사용하고자 하는 서브넷에 아래와 같은 태그들을 달아주어야한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">cluster&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">cluster&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="na">name&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">shared&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="nx">owned&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="nx">Required&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">role&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">internal&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">elb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="nx">Optional&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">internal&lt;/span> &lt;span class="nx">alb&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">role&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">elb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="nx">Optional&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">internet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">facing&lt;/span> &lt;span class="nx">alb&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>a | b&lt;/code>와 같은 표현은 a 나 b중 한 값을 가져야한다는 의미로 표현한 것입니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/aws/aws_eks_elb/tag.png"
width="714"
height="435"
srcset="https://umi0410.github.io/blog/aws/aws_eks_elb/tag_hu2bbb23500c440a1ae11b9e8cf9268536_37002_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/aws/aws_eks_elb/tag_hu2bbb23500c440a1ae11b9e8cf9268536_37002_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="tag.png"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="393px"
>&lt;/p>
&lt;p>internet facing ALB만 이용할 것이기 때문에 &lt;a class="link" href="http://kubernetes.io/role/internal-elb" target="_blank" rel="noopener"
>&lt;code>kubernetes.io/role/internal-elb&lt;/code>&lt;/a> tag는 생략하고 태그를 달아준 모습.&lt;/p>
&lt;p>subnet에 ALB를 사용하기 위한 태그를 제대로 달아주지 않을 경우 alb-ingress-controller 에서 아래와 같은 로그를 보게 됩니다. ALB가 생성되지도 않습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">controller&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">go&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mi">217&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nx">kubebuilder&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">controller&lt;/span> &lt;span class="s2">&amp;#34;msg&amp;#34;&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Reconciler error&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;error&amp;#34;&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>&lt;span class="nx">failed&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="nx">build&lt;/span> &lt;span class="nx">LoadBalancer&lt;/span> &lt;span class="nx">configuration&lt;/span> &lt;span class="nx">due&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="nx">failed&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="nx">resolve&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="nx">qualified&lt;/span> &lt;span class="nx">subnet&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">ALB&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="nx">Subnets&lt;/span> &lt;span class="nx">must&lt;/span> &lt;span class="nx">contains&lt;/span> &lt;span class="nx">these&lt;/span> &lt;span class="nx">tags&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;kubernetes.io/cluster/umi-dev&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;shared&amp;#39;&lt;/span> &lt;span class="nx">or&lt;/span> &lt;span class="s1">&amp;#39;owned&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nx">and&lt;/span> &lt;span class="s1">&amp;#39;kubernetes.io/role/internal-elb&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> &lt;span class="nx">or&lt;/span> &lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="alb-ingress-controller-배포하기">alb ingress controller 배포하기.&lt;/h3>
&lt;blockquote>
&lt;p>슬슬 읽기 귀찮아질 타이밍입니다. &amp;lsquo;&lt;em>요놈이 IAM policy도 만들고, 서브넷에 엄한 태그를 달더니 이제는 하,,, 뭘 또 배포하라고 하는구나 아이고 내 눈아,,,&lt;/em>&amp;rsquo; 싶겠지만, 좀 더 힘을 내어봅시다 🍻&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://kubernetes-sigs.github.io/aws-alb-ingress-controller/guide/controller/setup/" target="_blank" rel="noopener"
>https://kubernetes-sigs.github.io/aws-alb-ingress-controller/guide/controller/setup/&lt;/a> 를 참고하여 &lt;code>Deployment&lt;/code> 내의 container의 &lt;code>args&lt;/code>를 자신의 상황에 맞게 수정한 뒤 배포해줍니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">args&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="nx">ingress&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="kr">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">alb&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="nx">ingress의&lt;/span> &lt;span class="nx">annotation에&lt;/span> &lt;span class="nx">명시할&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="nx">cluster&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">umi&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">dev&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="nx">eks&lt;/span> &lt;span class="nx">cluster&lt;/span> &lt;span class="nx">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="nx">aws&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">region&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">ap&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">northeast&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="nx">aws&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">api&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">debug&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>저는 위와 같은 식으로 설정해주었고, 잘 배포되었는지 확인해봅니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">$&lt;/span> &lt;span class="nx">kubectl&lt;/span> &lt;span class="nx">get&lt;/span> &lt;span class="nx">po&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">A&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="nx">grep&lt;/span> &lt;span class="nx">alb&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">kube&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">system&lt;/span> &lt;span class="nx">alb&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">ingress&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">controller&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">594&lt;/span>&lt;span class="nx">f84b465&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">q4qjb&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="nx">Running&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">106&lt;/span>&lt;span class="nx">m&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="노출시킬-서비스-배포하기">노출시킬 서비스 배포하기&lt;/h3>
&lt;p>간단하게 &lt;code>Nginx&lt;/code>를 배포해보록하겠습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">apiVersion&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">kind&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">metadata&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">ingress&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">spec&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">selector&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ports&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="nx">protocol&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">TCP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">port&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">targetPort&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">nodePort&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">30010&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">NodePort&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">---&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">apiVersion&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">apps&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">kind&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">metadata&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">ingress&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">labels&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">spec&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">replicas&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">selector&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">matchLabels&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">template&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">metadata&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">labels&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">spec&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">containers&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">image&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ports&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="nx">containerPort&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">80&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ALB는 기본적으로 &lt;strong>node의 Port&lt;/strong>를 AWS 상의 &lt;code>target group&lt;/code>으로서 이용하기 때문에, ingress를 통해 노출시켜줄 서비스는 적어도 &lt;code>NodePort&lt;/code> 타입으로 노출되어있어야 &lt;code>ALB ingress controller&lt;/code>가 해당 서비스를 노출시킬 수 있습니다.(target type을 기본값인 &lt;code>instance&lt;/code>가 아니라 &lt;code>IP&lt;/code>로 설정하면, Pod의 IP로 트래픽이 흘러가게 할 수는 있습니다.)&lt;/p>
&lt;p>작동방식을 설명해보자면 ingress 는 service name과 service port를 설정으로 받습니다. alb-ingress-controller는 그러면 해당 service name, service port와 연결된 NodePort를 찾아서 ALB의 target group으로 등록시킵니다.&lt;/p>
&lt;h3 id="ingress-배포하기">Ingress 배포하기&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">apiVersion&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">extensions&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">v1beta1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">kind&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Ingress&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">metadata&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;ingress&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">annotations&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">ingress&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">class&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">alb&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">value&lt;/span> &lt;span class="nx">we&lt;/span> &lt;span class="nx">set&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">alb&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">ingress&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">controller&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">alb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ingress&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">scheme&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">internet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">facing&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">spec&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">rules&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">paths&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="nx">path&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="err">/*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">backend&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">serviceName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;ingress-test&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">servicePort&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">80&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a class="link" href="https://kubernetes-sigs.github.io/aws-alb-ingress-controller/guide/ingress/annotation/" target="_blank" rel="noopener"
>https://kubernetes-sigs.github.io/aws-alb-ingress-controller/guide/ingress/annotation/&lt;/a> 을 참고하여 &lt;code>Ingress&lt;/code>를 작성해줍니다. &lt;code>[kubernetes.io/ingress.class&lt;/code>는](&lt;a class="link" href="http://kubernetes.io/ingress.class" target="_blank" rel="noopener"
>http://kubernetes.io/ingress.class&lt;/a>는) alb-ingress-controller에서 설정한 &lt;code>ingress.class&lt;/code>를 적어주고, &lt;a class="link" href="http://alb.ingress.kubernetes.io/scheme%eb%8a%94" target="_blank" rel="noopener"
>&lt;code>alb.ingress.kubernetes.io/scheme&lt;/code>는&lt;/a> 용도에 따라 &lt;code>internet-facing&lt;/code> 혹은 &lt;code>internal&lt;/code>을 적어줍니다. ingress 를 생성하기 전에 &lt;code>kubectl logs -f {alb-ingress-controller pod name}&lt;/code>을 한 창에 띄워놓으면 ALB 생성 관련 로그를 쭈루룩 볼 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/aws/aws_eks_elb/elb.png"
width="670"
height="166"
srcset="https://umi0410.github.io/blog/aws/aws_eks_elb/elb_huae6e8bb776e806d0d619a890a5bf58a9_19454_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/aws/aws_eks_elb/elb_huae6e8bb776e806d0d619a890a5bf58a9_19454_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="elb.png"
class="gallery-image"
data-flex-grow="403"
data-flex-basis="968px"
>&lt;/p>
&lt;p>잘 설정되었다면 위와 같이 ALB가 생성될 것 입니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">$&lt;/span> &lt;span class="nx">kubectl&lt;/span> &lt;span class="nx">get&lt;/span> &lt;span class="nx">ingress&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">NAME&lt;/span> &lt;span class="nx">HOSTS&lt;/span> &lt;span class="nx">ADDRESS&lt;/span> &lt;span class="nx">PORTS&lt;/span> &lt;span class="nx">AGE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">ingress&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">bf1e76be&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="k">default&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">ingress&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">e8c7&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1351183883.&lt;/span>&lt;span class="nx">ap&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">northeast&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">2.&lt;/span>&lt;span class="nx">elb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">amazonaws&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span> &lt;span class="mi">80&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="nx">s&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="인증서-설정을-통해-https-까지">인증서 설정을 통해 HTTPS 까지?!&lt;/h3>
&lt;blockquote>
&lt;p>❤️ AWS &lt;code>Certificate Manager&lt;/code>와 &lt;code>Ingress&lt;/code>에 대한 &lt;code>annotation&lt;/code>을 이용해 간단하게 &lt;code>HTTPS&lt;/code>를 이용할 수도 있습니다! 직접하려면 도메인 소유 인증과 인증서, 비밀키 등을 모두 관리해야했는데 말이지요! 🐥&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://umi0410.github.io/blog/aws/aws_eks_elb/cert.png"
width="1082"
height="317"
srcset="https://umi0410.github.io/blog/aws/aws_eks_elb/cert_hu285e592bed94d8c711caab941a928b85_40319_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/aws/aws_eks_elb/cert_hu285e592bed94d8c711caab941a928b85_40319_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="cert.png"
class="gallery-image"
data-flex-grow="341"
data-flex-basis="819px"
>&lt;/p>
&lt;p>이런식으로 AWS의 &lt;code>Certificate Manager&lt;/code>을 통해 발급받은 인증서가 있다면 이를 alb 에서 ingress에 annotation을 설정함으로써 사용할 수 있습니다.&lt;/p>
&lt;p>&lt;strong>Ingress의 annotation에 HTTPS및 인증서 관련 설정 추가해주기&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">apiVersion&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">extensions&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">v1beta1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">kind&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Ingress&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">metadata&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;ingress&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">annotations&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">ingress&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">class&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">alb&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">alb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ingress&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">scheme&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">internet&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">facing&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">alb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ingress&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">ports&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;[{&amp;#34;HTTP&amp;#34;: 80}, {&amp;#34;HTTPS&amp;#34;: 443}]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">alb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ingress&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">actions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">redirect&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">https&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;Type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;redirect&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;RedirectConfig&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;Port&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;443&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;Protocol&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;HTTPS&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;StatusCode&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;HTTP_302&amp;#34;&lt;/span>&lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">alb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ingress&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">certificate&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">arn&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">Certificate&lt;/span> &lt;span class="nx">Manger의&lt;/span> &lt;span class="nx">인증서&lt;/span> &lt;span class="nx">arn&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>http redirect 및 actions에 대한 내용은 저의 애교입니다.&lt;/em> 궁금하신 분들은 한 번 적용해보시거나 알아보시면 어렵지 않게 알아내실 수 있을 겁니다! 😆&lt;/p>
&lt;p>&lt;strong>Route53에 ALB 추가해주기&lt;/strong>&lt;/p>
&lt;p>EKS에서 ALB를 사용하는 등의 작업을 하시는 분은 어느 정도 aws에 대한 이해가 있으리라 생각하고, ALB를 Route53을 통해 레코드로 추가하는 작업에 대한 설명은 생략하겠습니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/aws/aws_eks_elb/cert2.png"
width="1714"
height="605"
srcset="https://umi0410.github.io/blog/aws/aws_eks_elb/cert2_huff1102cf41f5fc11c3e61b957cd43eab_183400_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/aws/aws_eks_elb/cert2_huff1102cf41f5fc11c3e61b957cd43eab_183400_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="cert2.png"
class="gallery-image"
data-flex-grow="283"
data-flex-basis="679px"
>&lt;/p>
&lt;p>alb-ingress-controller로 AWS Certificate Manager의 인증서까지 사용한 모습.&lt;/p>
&lt;h2 id="-nlb를-사용해-서비스를-노출시키는-방법">🌎 NLB를 사용해 서비스를 노출시키는 방법&lt;/h2>
&lt;p>CLB는 Deprecate 대상이라고 들었기도 하고, 굳이 써본 적이 없어 NLB로만 설명합니다. NLB는 ALB에 비해 사용이 간단합니다.&lt;/p>
&lt;p>Ingress와 alb-ingress-controller를 사용했던 ALB와 달리 NLB는 서비스를 직접 노출시킵니다. 주로 &lt;code>Nginx Ingress Controller&lt;/code>을 NLB에 연결해서 사용했던 기억이 납니다. NLB는 L4 LB로, Nginx를 주로 L7 LB로 사용하는 경우 이렇게 NLB를 사용합니다. ALB와 Nginx 모두 L7 LB로서 역할을 하기때문에 굳이 ALB를 사용할 필요가 없는 경우가 많았습니다.&lt;/p>
&lt;p>NLB를 통해 서비스를 노출시키기 위해선 annotaion중에서도 [&lt;code>service.beta.kubernetes.io](http://service.beta.kubernetes.io/)...&lt;/code>형태의 annotation을 이용합니다. 사실 실제로 실무해서 사용해본 annotation은 거의 [&lt;code>service.beta.kubernetes.io/aws-load-balancer-type:](http://service.beta.kubernetes.io/aws-load-balancer-type:) &amp;quot;nlb&amp;quot;&lt;/code> 뿐입니다. (이를 사용하지 않을 경우 디폴트가 CLB이기 때문에&amp;hellip;)&lt;/p>
&lt;h3 id="nlb가-사용할-subnet에-적절한-태그-달기">NLB가 사용할 subnet에 적절한 태그 달기&lt;/h3>
&lt;p>ALB를 사용했을 때와 마찬가지로 NLB가 사용할 서브넷에 필수 태그를 달아줍니다. 기억이 안난 다면 글의 상단 ALB 파트를 참고!&lt;/p>
&lt;h3 id="nlb로-노출할-서비스-생성하기">NLB로 노출할 서비스 생성하기&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">apiVersion&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">kind&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">metadata&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">nginx&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">nlb&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">annotations&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">beta&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">aws&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">balancer&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;nlb&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">spec&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">selector&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ports&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="nx">protocol&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">TCP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">port&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">targetPort&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">nodePort&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">30011&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">LoadBalancer&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://umi0410.github.io/blog/aws/aws_eks_elb/terminal.png"
width="983"
height="223"
srcset="https://umi0410.github.io/blog/aws/aws_eks_elb/terminal_hua70a78035179ff73439578821520f3f3_51627_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/aws/aws_eks_elb/terminal_hua70a78035179ff73439578821520f3f3_51627_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="terminal.png"
class="gallery-image"
data-flex-grow="440"
data-flex-basis="1057px"
>&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/aws/aws_eks_elb/zzal.png"
width="420"
height="400"
srcset="https://umi0410.github.io/blog/aws/aws_eks_elb/zzal_hu70382f8ad38785a4d7f8dffcaf07bdc6_351117_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/aws/aws_eks_elb/zzal_hu70382f8ad38785a4d7f8dffcaf07bdc6_351117_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="zzal.png"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="252px"
>&lt;/p>
&lt;p>간단히 type을 LoadBalancer로 바꾸어주고, annotation에 어떤 ELB를 사용할지( NLB/CLB )만 적어주면 아래 그림처럼 손쉽게 NLB로 서비스를 노출 시킬 수 있습니다.&lt;/p>
&lt;h3 id="인증서-설정을-통해-https까지">인증서 설정을 통해 HTTPS까지?!&lt;/h3>
&lt;blockquote>
&lt;p>🌋: &amp;ldquo;그만&amp;hellip;. 아무도 안 궁금해&amp;hellip;&amp;rdquo; - 하지만 마지막까지 힘을 내서 EKS에서의 ELB를 정복해봅시다!&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">apiVersion&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">kind&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">metadata&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">nginx&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">nlb&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">annotations&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">beta&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">aws&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">balancer&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;nlb&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">beta&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">aws&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">balancer&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">backend&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">protocol&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tcp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">beta&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">aws&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">balancer&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">ssl&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">ports&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;443&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">beta&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">aws&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">balancer&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">ssl&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">cert&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">arn&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nx">aws&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nx">acm&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nx">ap&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">northeast&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">{{&lt;/span>&lt;span class="nx">root&lt;/span>&lt;span class="p">}}&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nx">certificate&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">{{&lt;/span>&lt;span class="nx">arn&lt;/span>&lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">spec&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">selector&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ports&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="nx">protocol&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">TCP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">port&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">targetPort&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">nodePort&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">30011&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="nx">protocol&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">TCP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">port&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">443&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">targetPort&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">nodePort&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">30012&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">LoadBalancer&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>backend-protocol&lt;/code>은 &lt;code>tcp&lt;/code>|tls 혹은 https|http로 설정이 돠는 듯합니다. 예를 들어 &lt;code>backend-protocol&lt;/code> 로 &lt;code>tcp&lt;/code>를 설정한 뒤 &lt;code>ssl-port&lt;/code>로 443을 설정, 서비스의 &lt;code>spec&lt;/code>에서의 포트로는 &lt;code>80&lt;/code>과 &lt;code>443&lt;/code>을 설정하면, 자동적으로 &lt;code>80&lt;/code>은 &lt;code>tcp&lt;/code>, &lt;code>443&lt;/code>은 tls를 이용하는 NLB listener로 설정되게 되는데 http,https도 마찬가지로 tcp,tls로 적절히 설정이 됩니다. 다만 http,https를 설정할 경우 &lt;code>X-Forwarded-For&lt;/code> 헤더가 삽입된다고 합니다. (정확하지는 않아요&amp;hellip; 딱히 NLB의 backend protocol을 L7으로 설정하는 것이 NLB의 원래 스펙이 아니었던 점도 있고, L7을 이용하고 싶으면, ALB를 이용하는 것이 더 편하다고 생각이 들어서 따로 검증해본 적이 없기 때문에&amp;hellip; )&lt;/p>
&lt;p>⚠️&lt;strong>단점&lt;/strong>이 하나 있다면 아직 &lt;strong>http⇒https redirect&lt;/strong>가 불가능하다는 것인데, 이는 애초에 L4 LB를 이용하는 것과 L7 LB를 이용하는 쓰임에 대한 차이라고 생각을 하기 때문에 감수를 해야할 것 같습니다. 예를 들어 L4 NLB에 L7 nginx-ingress-controller을 연결하여 redirect는 nginx가 담당하도록하는 방식을 많이 이용하는 것 같습니다. NLB에서는 L4 의 뭔가 SSL/TLS한 작업을 하기 위함이고, L7의 https 작업이 주가 되는 것은 아니므로&amp;hellip;? &lt;em>사실 이 부분은 잘 모르겠습니다&amp;hellip;💦💦 잘 아시는 분이 계시다면 알려주시면 감사하겠습니다. ㅜㅜㅜ&lt;/em>( NLB에서 HTTP, HTTPS redirect가 안되는 이유 참고 - &lt;a class="link" href="https://aws.amazon.com/premiumsupport/knowledge-center/redirect-http-https-elb/" target="_blank" rel="noopener"
>https://aws.amazon.com/premiumsupport/knowledge-center/redirect-http-https-elb/&lt;/a> )&lt;/p>
&lt;h3 id="-nlb를-통한-https-서버-구축-결과">⭕️ NLB를 통한 HTTPS 서버 구축 결과&lt;/h3>
&lt;p>어쨌든 위의 annotation을 통해 올바르게 svc를 설정한다면&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">$&lt;/span> &lt;span class="nx">kubectl&lt;/span> &lt;span class="nx">get&lt;/span> &lt;span class="nx">svc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">nginx&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">nlb&lt;/span> &lt;span class="nx">LoadBalancer&lt;/span> &lt;span class="mf">10.100.180.174&lt;/span> &lt;span class="nx">ae27784521c4f4bcd96b22f2cca2358b&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="nx">bffb166fafa47f2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">elb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ap&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">northeast&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">2.&lt;/span>&lt;span class="nx">amazonaws&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span> &lt;span class="mi">443&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mi">30014&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">TCP&lt;/span> &lt;span class="mi">37&lt;/span>&lt;span class="nx">m&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Route53 설정은 추가로 해주어야함. - 예시
&lt;a class="link" href="http://nlb.umidev.net" target="_blank" rel="noopener"
>nlb.umidev.net&lt;/a> - ALIAS ae2778452xxxxxxxxxxxxxx.elb.ap-northeast-2.amazonaws.com&lt;/li>
&lt;/ul>
&lt;p>이렇게 service가 생성될 것이고, (service의 port로서 사용할 80,443 등은 service.spec에서 명시) 생성 후 &lt;code>A Record Alias&lt;/code>로서 NLB의 &lt;code>DNS&lt;/code> name을 넣어주면 사진과 같이 &lt;code>HTTPS&lt;/code> 접속이 가능합니다!&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/aws/aws_eks_elb/cert3.png"
width="1660"
height="605"
srcset="https://umi0410.github.io/blog/aws/aws_eks_elb/cert3_hu4f6093134f3fc61777b52e640067d7a7_152079_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/aws/aws_eks_elb/cert3_hu4f6093134f3fc61777b52e640067d7a7_152079_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="cert3.png"
class="gallery-image"
data-flex-grow="274"
data-flex-basis="658px"
>&lt;/p>
&lt;h2 id="-마치며">🐳 마치며&lt;/h2>
&lt;p>어차피 한 번의 검색이면 정보를 얻을 수 있는 모든 annotation이나 기타 설정에 대한 내용을 다루기 보단 나름 제가 &lt;strong>실제로 쿠버네티스를 관리하는&lt;/strong> &lt;strong>데브옵스 인턴로서 일을 하면서 헷갈렸던 내용&lt;/strong>과 &lt;strong>EKS에서의 ELB 관리에 대한 흐름&lt;/strong>을 위주로 설명하려 노력했고, 저의 &lt;code>삽질&lt;/code>이 깃든 내용들입니다 ㅎㅎㅎ&lt;/p>
&lt;p>아는 범위 + 좀 더 조사하여 열심히 정리해보았지만, 부족한 부분이 있을 수도 있고 틀린 부분이 있을 수도 있을텐데, 보완해주실 내용이 있다면 말씀해주시면 열심히 검토해보겠습니다~! 감사합니다.&lt;/p>
&lt;h2 id="글쓴이">🧙‍♂️글쓴이&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>박진수&lt;/strong> - 👨‍👩‍👧‍👧&lt;code>AUSG&lt;/code> (AWS University Student Group) 3기로 활동 중&lt;/li>
&lt;li>&lt;strong>관심사&lt;/strong>
&lt;ul>
&lt;li>&lt;code>Docker&lt;/code>, &lt;code>Kubernetes&lt;/code> 등의 &lt;strong>컨테이너 기술&lt;/strong>&lt;/li>
&lt;li>&lt;code>Argo&lt;/code>, &lt;code>Spinnaker&lt;/code>, &lt;code>Github action&lt;/code> 등의 &lt;strong>CI/CD 툴&lt;/strong>&lt;/li>
&lt;li>&lt;code>Terraform&lt;/code>, &lt;code>AWS&lt;/code>를 통한 &lt;strong>클라우드 인프라 구축&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Blog&lt;/strong> - &lt;a class="link" href="https://senticoding.tistory.com" target="_blank" rel="noopener"
>https://senticoding.tistory.com&lt;/a>&lt;/li>
&lt;li>&lt;strong>Email&lt;/strong> - &lt;a class="link" href="mailto:bo314@naver.com" >bo314@naver.com&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="-참고-references">📚 참고 (References)&lt;/h2>
&lt;ul>
&lt;li>EKS의 Required subnet tags
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/load-balancing.html" target="_blank" rel="noopener"
>https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/load-balancing.html&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/alb-ingress.html" target="_blank" rel="noopener"
>https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/alb-ingress.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Kubernetes Cloud provider aws - &lt;a class="link" href="https://kubernetes.io/docs/concepts/cluster-administration/cloud-providers/#aws" target="_blank" rel="noopener"
>https://kubernetes.io/docs/concepts/cluster-administration/cloud-providers/#aws&lt;/a>&lt;/li>
&lt;li>ALB ingress controller install - &lt;a class="link" href="https://kubernetes-sigs.github.io/aws-alb-ingress-controller/guide/controller/setup/" target="_blank" rel="noopener"
>https://kubernetes-sigs.github.io/aws-alb-ingress-controller/guide/controller/setup/&lt;/a>&lt;/li>
&lt;li>ALB ingress Annotation &lt;a class="link" href="https://kubernetes-sigs.github.io/aws-alb-ingress-controller/guide/ingress/annotation/" target="_blank" rel="noopener"
>https://kubernetes-sigs.github.io/aws-alb-ingress-controller/guide/ingress/annotation/&lt;/a>&lt;/li>
&lt;li>NLB의 HTTPS redirect가 불가능한 이유 -&lt;a class="link" href="https://aws.amazon.com/premiumsupport/knowledge-center/redirect-http-https-elb/" target="_blank" rel="noopener"
>https://aws.amazon.com/premiumsupport/knowledge-center/redirect-http-https-elb/&lt;/a>&lt;/li>
&lt;li>NLB service Annotations - &lt;a class="link" href="https://kubernetes.io/ko/docs/concepts/services-networking/service/#aws-nlb-support" target="_blank" rel="noopener"
>https://kubernetes.io/ko/docs/concepts/services-networking/service/#aws-nlb-support&lt;/a>&lt;/li>
&lt;li>Ingress의 class에 대해 - &lt;a class="link" href="https://kubernetes.io/ko/docs/concepts/services-networking/ingress/#%EC%9D%B8%EA%B7%B8%EB%A0%88%EC%8A%A4-%ED%81%B4%EB%9E%98%EC%8A%A4" target="_blank" rel="noopener"
>https://kubernetes.io/ko/docs/concepts/services-networking/ingress/#인그레스-클래스&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>