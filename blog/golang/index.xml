<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on Jinsu Playground</title><link>https://umi0410.github.io/blog/golang/</link><description>Recent content in Golang on Jinsu Playground</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sat, 09 Jan 2021 11:27:30 +0900</lastBuildDate><atom:link href="https://umi0410.github.io/blog/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Go vs Java - Go에서의 객체 지향</title><link>https://umi0410.github.io/blog/golang/go-vs-java-oop/</link><pubDate>Thu, 09 Jan 2020 12:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/go-vs-java-oop/</guid><description>Table of Contents 시작하며 예시 코드 객체지향적 관점에서의 Go에 대해 💊 Encapsulation(캡슐화) 👩‍👧‍👦 Inheriatance(상속) Abstraction(추상화) 🌒🌓🌕 Polymorphism(다형성) Go에서의 객체 지향의 한계점과 장점 마무리 참고 시작하며 요즘 Go와 Java 모두를 이용해 개발을 하다보니 각각의 장단점에 대해 느껴볼 수 있었다. Go는 리소스를 적게 먹으며 코드가 간결하고 라이브러리나 프레임워크 또한 심플해서 적용하기 편하다. Java는 이런 저런 기능이 많은 반면 그런 기능을 이용하기 위해 이해해야하는 내용들이 많고, 코드가 투명하지는 않다(다양한 Annotation을 이용하게 되면서 코드가 투명하게 그 동작을 나타내지 않음).</description></item></channel></rss>