<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang (Go 언어) on Jinsu Playground</title><link>https://umi0410.github.io/categories/golang/</link><description>Recent content in Golang (Go 언어) on Jinsu Playground</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Wed, 24 Nov 2021 03:46:54 +0900</lastBuildDate><atom:link href="https://umi0410.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>쿼리 최적화하기 - 조회수와 같은 Count 성격의 작업 최적화하기 (N+1 문제 관련, feat. Redis)</title><link>https://umi0410.github.io/blog/optimizing-count-query-strategy/</link><pubDate>Wed, 24 Nov 2021 03:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/optimizing-count-query-strategy/</guid><description>&lt;img src="https://umi0410.github.io/blog/optimizing-count-query-strategy/index.png" alt="Featured image of post 쿼리 최적화하기 - 조회수와 같은 Count 성격의 작업 최적화하기 (N+1 문제 관련, feat. Redis)" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>&lt;img src="https://umi0410.github.io/blog/optimizing-count-query-strategy/monitoring.png"
width="1012"
height="437"
srcset="https://umi0410.github.io/blog/optimizing-count-query-strategy/monitoring_hu3985549258cc81ebaf9b1ddb4dd53245_70044_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/optimizing-count-query-strategy/monitoring_hu3985549258cc81ebaf9b1ddb4dd53245_70044_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Sentry monitoring - 느려진 API Latency"
class="gallery-image"
data-flex-grow="231"
data-flex-basis="555px"
>&lt;/p>
&lt;p>&lt;strong>짧은 영상을 바탕으로 배틀을 할 수 있는 서비스를 &lt;code>Spring Boot MVC&lt;/code> + &lt;code>JPA&lt;/code>로 개발&lt;/strong>하던 중 위와 같이 API &lt;strong>Latency가 처참하게도 느린 요청&lt;/strong>들이 감지되기 시작했습니다. 그동안은 쿼리 최적화보다는 로직 개발이 더 우선시하다보니 쿼리 최적화를 미뤄왔는데,
이번 기회에 이에 대해 다뤄보려합니다. 간단하게 코드를 짜서 테스트해보느라 Go 언어를 이용했지만 &lt;strong>JPA를 이용하든 뭘 이용하든 문제와 그에 대한 해결책의 요지는 동일할 것&lt;/strong>입니다.&lt;/p>
&lt;p>아무래도 백엔드에서 API를 개발하면서 파일 데이터를 주고 받는 게 아니라면 주로 Latency가 늘어나는 이유는 다음과 같을 것입니다.&lt;/p>
&lt;ul>
&lt;li>너무 많은 Write&lt;/li>
&lt;li>불필요한 Column(필드) 혹은 관계를 Eager Loading. 추가적으로 경우에 따라 &lt;strong>N+1 쿼리 문제&lt;/strong> 발생&lt;/li>
&lt;li>필요한 Column(필드) 혹은 관계를 뒤늦게 Lazy Loading. 추가적으로 경우에 따라 &lt;strong>N+1 쿼리 문제&lt;/strong> 발생&lt;/li>
&lt;li>&lt;strong>요청마다 매번 수행되는 Join이나 일종의 연산들&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;code>N+1&lt;/code> 쿼리 문제? - N개의 데이터를 조회한 경우, 각 데이터들의 연관 관계를 추가적으로 조회하기 위해 한 번씩 더 조회해야하는 문제&amp;hellip; 아주 악명 높은 문제로 자료를 쉽게 찾아볼 수 있다.&lt;/p>
&lt;/blockquote>
&lt;p>사실 어떻게 보면 N+1 쿼리 문제가 워낙 악명이 높아 그에 대한 해결책들도 간단하게는 많이 소개되는 것 같기도 합니다. 따라서 이번 글에서는 조금은 특이하게 &lt;strong>조회수나 댓글 개수처럼 일종의 Count 기능이 필요한 경우의 N+1 쿼리 문제나 요청마다 매번 수행되는 Join이나 연산들로 인한
오버헤드들을 줄여 최적화&lt;/strong>하는 방법은 어떤 것들이 있을지에 대한 제 고민을 소개해보려 합니다.&lt;/p>
&lt;p>&lt;strong>&lt;em>(이 글은 RDB를 메인 DB로 사용하는 경우를 기준으로 작성했습니다.)&lt;/em>&lt;/strong>&lt;/p>
&lt;h2 id="영상-조회수-같은-count-성격의-값에-대한-작업을-최적화하지-않으면">영상 조회수 같은 Count 성격의 값에 대한 작업을 최적화하지 않으면?!&lt;/h2>
&lt;ul>
&lt;li>쏟아지는 영상 조회 이벤트마다 RDB에 데이터를 Write =&amp;gt; RDB에 너무 큰 부하&lt;/li>
&lt;li>매번 특정 영상과 관련된 조회 내역을 RDB에서 Join 후 그 개수를 계산 =&amp;gt; RDB에 부하, 느린 작업&lt;/li>
&lt;li>RDB에 영상 조회 이벤트를 Write할 때 영상 정보 테이블에 view_count 컬럼을 추가한 뒤 view_count 컬럼에 조회수를 캐시 =&amp;gt; 캐시 정확도 문제, 테이블 정의 변경 필요&lt;/li>
&lt;/ul>
&lt;p>영상 조회수 같은 Count 성격의 값을 최적화해주지 않으면 위와 같은 문제들이 발생할 수 있다고 봅니다.&lt;/p>
&lt;p>따라서 영상 조회 이벤트처럼 쏟아지는 데이터는 너무 많은 Write 요청은 RDB가 아닌 NoSQL을 사용하는 게 좋을 수 있을 것입니다.&lt;/p>
&lt;p>하지만 NoSQL에 영상 조회 이벤트를 저장한다 해도 매번 영상 조회 내역을 가져온 뒤 그 개수를 계산하는 방식은 어떤 DB를 사용하던 불필요한 Read도 많이 발생할 것이고, 당연히 느리겠죠. 만약 어떤 영상의 조회수가 10만인 경우 10만개의 이벤트들을 조회한 뒤 그 개수를 이용해야할테니 말입니다.
경우에 따라서는 영상 조회 시 각 영상에 대한 조회 내역을 추가적으로 조회하게 되는 N+1 쿼리 문제를 겪을 수도 있습니다.&lt;/p>
&lt;p>따라서 &lt;strong>&lt;code>view_count&lt;/code> 같은 column을 추가적으로 두는 건 어떨까&lt;/strong>싶기도 합니다만 일반적으로는 &lt;strong>동시성 이슈로 인해 view_count의 정확도가 떨어지게 될 것&lt;/strong>입니다. 또한 &lt;strong>스키마가 강요되는 RDB의 특성에 의해 테이블 정의가 변경되어야할 수도 있습니다&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>동시성 이슈 - 만약 100명의 유저에 대한 영상 조회를 동시에 처리하는 경우 100개의 스레드는 모두 view_count=0 으로 조회를 한 뒤 자신의 조회 이벤트로 인한 +1을 더해 view_count=1로 업데이트 커맨드를 날리겠지만 사실 view_count는 1이 아닌 100이 되어야 정확한 것이다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="redis를-도입해보면-어떨까">Redis를 도입해보면 어떨까&lt;/h2>
&lt;p>&lt;code>Redis&lt;/code>는 메모리를 기반으로하는 Key-Value 형태의 NoSQL라서 일반적인 RDB에 비해 아주 빠르면서 싱글 스레드 기반이기 때문에 정확한 Count와 Increment가 가능합니다. 따라서 아까 발생했던 문제들을 다음과 같이 해결할 수 있을 것입니다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>쏟아지는 영상 조회 이벤트마다 RDB에 데이터를 Write&lt;/p>
&lt;p>=&amp;gt; &lt;del>RDB에 너무 큰 부하&lt;/del> (X), &lt;strong>빠른 Write&lt;/strong> (O)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>매번 특정 영상과 관련된 조회 내역을 RDB에서 Join 후 그 개수를 계산&lt;/p>
&lt;p>=&amp;gt; &lt;del>RDB에 부하, 느린 작업&lt;/del> (X), &lt;strong>Redis에 최근 조회 내역을 저장&lt;/strong>, 상황에 따라 NoSQL에서 Replicate해서 영구화하는 것도 좋음 (O)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RDB에 영상 조회 이벤트를 Write할 때 영상 정보 테이블에 view_count 컬럼을 추가한 뒤 view_count 컬럼에 조회수를 캐시&lt;/p>
&lt;p>=&amp;gt; &lt;del>캐시 정확도 문제&lt;/del> (X), &lt;strong>Redis의 싱글스레드 기반의 정확한 계산&lt;/strong>&lt;/p>
&lt;p>=&amp;gt; &lt;del>테이블 정의 변경 필요&lt;/del> (X), &lt;strong>NoSQL의 유연함&lt;/strong> (O)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>이런 이유로 인해 추후에 &lt;strong>조회수나 댓글 수, 팔로워 수 등등에 대해 Redis를 이용하면 어떨까 싶은 생각이 드네요~!&lt;/strong> 그럼 실제로 앞서 소개했던 문제 상황이나 해결 방법들이 각각 성능이 어떨지 직접 데이터와 쿼리를 이용해 실험해보겠습니다.&lt;/p>
&lt;h2 id="실제-실험을-통해-각각의-방식-성능-비교">실제 실험을 통해 각각의 방식 성능 비교&lt;/h2>
&lt;h3 id="상황-소개">상황 소개&lt;/h3>
&lt;ul>
&lt;li>Local에서 Redis container, MySQL container을 이용. Go언어로 가볍게 애플리케이션 작성&lt;/li>
&lt;li>MySQL의 Video 테이블에 1000개의 영상 데이터 존재. 조회수를 캐시해놓은 view_count 컬럼 존재.&lt;/li>
&lt;li>MySQL의 View 테이블에 약 2천만 개의 조회 내역 존재.(즉 영상 당 수천개의 조회 내역 존재) 인덱스는 잘 걸어놓음.&lt;/li>
&lt;li>Redis에 &lt;code>key=video_view_count:{{video_id}}&lt;/code>, &lt;code>value={{view_count}}&lt;/code> 형태로 view_count 캐시&lt;/li>
&lt;li>&lt;strong>랜덤하게 5개의 영상에 대한 정보를 제공할 것인데 이때 조회수도 포함되어야한다.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="비교할-방식들-소개">비교할 방식들 소개&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Select 후 Redis에 캐시된 조회수 이용&lt;/strong>
&lt;ul>
&lt;li>영상에 대한 정보 자체는 Video 테이블을 이용해 Read&lt;/li>
&lt;li>조회수는 Redis에 캐시된 값을 MGET을 통해 배치(벌크)로 조회해와서 이용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Select 하며 Column에 캐시된 조회수 이용&lt;/strong>
&lt;ul>
&lt;li>영상 정보와 조회수 모두 Video 테이블을 통해 바로 Read&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Select 후 Batch로 In-Query&lt;/strong>
&lt;ul>
&lt;li>JPA를 이용하면서 흔히 발생했던 N+1 쿼리를 Batch로 해결할 때와 동일하게 Video 테이블 조회 후 View 테이블에서 view.id in (?,?,&amp;hellip;) 의 형태로 In-Query를 이용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Select 후 나중에 각각을 Join&lt;/strong>
&lt;ul>
&lt;li>N+1 쿼리 문제 그 자체..!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="실험-결과">실험 결과&lt;/h3>
&lt;p>&lt;img src="https://umi0410.github.io/blog/optimizing-count-query-strategy/result-1.png"
width="2520"
height="783"
srcset="https://umi0410.github.io/blog/optimizing-count-query-strategy/result-1_hu2b8142f32263cafd399ddd7e1ab96ace_456229_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/optimizing-count-query-strategy/result-1_hu2b8142f32263cafd399ddd7e1ab96ace_456229_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="실험 결과 1"
class="gallery-image"
data-flex-grow="321"
data-flex-basis="772px"
>&lt;/p>
&lt;ol>
&lt;li>🥇 &lt;strong>Select 하며 Column에 캐시된 조회수 이용&lt;/strong>&lt;/li>
&lt;li>🥈 &lt;strong>Select 후 Redis에 캐시된 조회수 이용&lt;/strong>&lt;/li>
&lt;li>🥉 &lt;strong>Select 후 나중에 각각을 Join&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Select 후 Batch로 In-Query&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>우선은 어떤 쪽으로든 캐싱을 이용하는 게 참 빠르구나 싶었습니다. 하지만 조금 의아할 수 있는 부분들도 존재하는데요.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Redis에 조회수를 캐싱한 경우보다 MySQL에 캐싱한 경우가 더 빠르네..?&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>어떻게보면 당연하겠지만 &lt;strong>MySQL에서 Join 없이 view_count를 조회할 수만 있다면 Redis를 거치는 것보다 MySQL만으로 처리하는 것이 더 빠를 것&lt;/strong>입니다.&lt;/p>
&lt;p>하지만 Redis를 사용하는 이유가 Read 속도때문만은 아닐 것입니다. 앞서 말씀드린 대로 &lt;strong>싱글 스레드 기반의 정확한 count&lt;/strong>가 가능할 것이고, RDB의 &lt;strong>테이블 스키마를 변경할 필요도 없죠&lt;/strong>.&lt;/p>
&lt;p>그리고 무엇보다 영상 조회 이벤트 발생마다 RDB의 특정 row의 조회수를 +1 하여 update 하는 것보다는 redis에서 increment하는 것이 빠를 것입니다! 즉, &lt;strong>write까지 고려하면 속도 측면에서도 redis가 빠를 것&lt;/strong>입니다.&lt;/p>
&lt;ol start="2">
&lt;li>&lt;strong>N+1 쿼리 문제를 야기하는 방식이 Batch로 In-Query하는 방식보다 빠르네..?&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>이 부분은 정확한 원인은 모르겠지만 아마 추측컨대 Batch 방식으로 한 번에 몇 만개 수준의 너무나 많은 데이터를 카티션 곱으로 조회한 뒤 각 video의 조회수 내역으로 넣어주려다보니 조회 후 연산이 많은 시간을 잡아먹은 게 아닐까 싶습니다.
반면 N+1 쿼리 방식은 각 video에 대해 한 번씩 쿼리한 뒤 바로 그 결과 count 할 수 있으니 이런 특수한 경우(데이터가 엄~청 많은 경우)에는 오히려 Batch 방식이 느릴 수 있는 게 아닐까 싶습니다.&lt;/p>
&lt;p>실제로 조회수가 약 10개 정도인 영상을 똑같이 5개 조회해보니 우리의 일반적인 예상대로 Batch 방식이 N+1 쿼리보다 빨랐는데요! 아마 카티션 곱이 일어났지만 양 자체가 적은 쿼리 결과를 처리하는 것이 redis와의 N번의 통신이 더 느리기 때문이 아닐까 싶습니다.&lt;/p>
&lt;h2 id="조회수를-위해-가장-이상적인-아키텍쳐는">조회수를 위해 가장 이상적인 아키텍쳐는?!&lt;/h2>
&lt;p>&lt;img src="https://umi0410.github.io/blog/optimizing-count-query-strategy/architecture.png"
width="1315"
height="1236"
srcset="https://umi0410.github.io/blog/optimizing-count-query-strategy/architecture_hu2e0266c55b356006b8efd84bbe6e386e_394889_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/optimizing-count-query-strategy/architecture_hu2e0266c55b356006b8efd84bbe6e386e_394889_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="상상 속 아키텍쳐"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/p>
&lt;p>실험 결과에서도 Redis를 사용하는 것이 나쁘지 않은 것으로 보여집니다. 그래서 저라면 정말 이런 식으로 &lt;strong>최적화를 해볼 수 있는 기회가 있다면 Redis를 도입&lt;/strong>해볼 것 같습니다. 그 동안 수없이 고통받아왔던 N+1 쿼리 문제도 어느 정도 해결할 수 있겠죠?!
&lt;strong>불필요한 양방향 연관 관계는 최대한 단방향 연관 관계로 제한하고, Count가 필요할 때 각 엔티티마다의 특정 Count 값을 위해 N번의 쿼리를 수행할 필요도 없어질 것&lt;/strong>입니다.&lt;/p>
&lt;p>하지만 Redis를 도입한다고 만사가 해결되는 것은 아닐 것입니다. Redis는 영속성이 보장되지 않으므로 영상 조회 내역이 증발해버릴 수도 있고, 양이 한정적일 수 있죠. 그래서 저는 단순 Redis 뿐만 아니라 다음과 같은 방식은 어떨까 생각해보고 있습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>최근 영상 조회 내역&lt;/strong>은 &lt;code>view_histories:{{username}}&lt;/code> 형태의 key, &lt;code>{{video_id}}&lt;/code> 형태의 value로 1차적으로 Redis에 저장한다. &lt;strong>조회수&lt;/strong>는 &lt;code>view_count:{{vide_id}}&lt;/code> 형태의 key, &lt;code>{{view_count}}&lt;/code> 형태의 value로 Redis에 캐시한다.
&lt;ul>
&lt;li>최근 영상 조회 내역을 redis를 통해 빠르게 읽고 쓸 수 있다.&lt;/li>
&lt;li>영상 조회수를 Redis의 Increment로 비교적 정확하게 계산할 수 있다.&lt;/li>
&lt;li>유저의 최근 영상 조회 내역을 각 유저별로 TTL을 걸 수 있다. =&amp;gt; Redis 메모리 절약&lt;/li>
&lt;li>영상의 조회수를 영상별로 TTL 걸 수 있다 =&amp;gt; Redis 메모리 절약&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>영상 조회 이벤트 저장 시 Redis의 &lt;code>event:video_viewed&lt;/code> 라는 key의 List에 앞서 언급한 조회 내역과 동일한 조회 내역을 저장한다.(메시지 큐에 Enqueue하는 느낌)
&lt;ul>
&lt;li>SQS 같은 Message queue는 조회수 이벤트가 쏟아지는 것에 비해 latency가 느림. 따라서 Redis를 큐로 사용하는 것도 괜찮아보임.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Redis &lt;code>event:video_viewed&lt;/code> 라는 List에서 조회 이벤트를 뽑아 서버리스한 NoSQL인 DynamoDB에 유저의 조회 내역을 영구적으로 저장한다.
&lt;ul>
&lt;li>영상 조회 내역을 redis에 캐시할 뿐만 아니라 영구적으로 저장하기 위함.&lt;/li>
&lt;li>마치 Redis를 버퍼, Write-back cache로 이용하는 느낌인데 NoSQL이라해도 주기적인 Bulk write은 주기때마다 부담될 수 있음. 그리고 조회 이벤트는 계속 계속 빠르게 확장될 수 있기 때문에 NoSQL 중에도 서버리스인 DynamoDB를 사용하면 어떨까 싶음. (주의: DynamoDB 안써봄&amp;hellip;)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>(단 위의 아키텍쳐는 제 개인적인 생각일 뿐, 실제로는 어떻게들 사용하시는지 궁금하네요..! 이렇게 직접 한 필드에 대해 복잡한 방식을 이용하기보단 좀 더 단순히 캐싱 프레임워크를 이용하는 것도 좋은 선택지일 수도 있을 것 같구요.)&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>이렇게 Count 성향의 작업을 어떻게 최적화할 수 있을지 상상과 실험을 통해 정리해봤습니다. 중요한 것은 하나의 정답이 존재하는 것이 아니고, 처한 상황마다 천차만별의 솔루션들이 있을테니 각각을 잘 비교해보고 잘 PoC 한 뒤 사용하는 것인 듯합니다.&lt;/p>
&lt;p>캐시나 Redis에 대해 관심이 많은 편이지만, 아직 많이 부족하다보니 좋은 말씀 댓글로 달아주시면 감사히 배워나가겠습니다~! 감사합니다.&lt;/p></description></item><item><title>쿠뮤 MVP 개발기</title><link>https://umi0410.github.io/blog/khumu/khumu-dev-review/</link><pubDate>Sat, 02 Oct 2021 15:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/khumu/khumu-dev-review/</guid><description>&lt;img src="https://umi0410.github.io/blog/khumu/khumu-dev-review/thumbnail-wide.png" alt="Featured image of post 쿠뮤 MVP 개발기" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>&lt;img src="https://umi0410.github.io/blog/khumu/khumu-dev-review/capture-1.png"
width="1013"
height="1155"
srcset="https://umi0410.github.io/blog/khumu/khumu-dev-review/capture-1_hu433d33708cf0291dbd8161dbb824d8fb_187522_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/khumu/khumu-dev-review/capture-1_hu433d33708cf0291dbd8161dbb824d8fb_187522_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="210px"
>
&lt;img src="https://umi0410.github.io/blog/khumu/khumu-dev-review/capture-3.png"
width="1013"
height="1155"
srcset="https://umi0410.github.io/blog/khumu/khumu-dev-review/capture-3_hue6e8e89a961b43eadf4d283e6a162e24_87932_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/khumu/khumu-dev-review/capture-3_hue6e8e89a961b43eadf4d283e6a162e24_87932_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="210px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/khu-dev" target="_blank" rel="noopener"
>Github&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://play.google.com/store/apps/details?id=com.khumu.android" target="_blank" rel="noopener"
>PlayStore 출시&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://khumu.oopy.io/" target="_blank" rel="noopener"
>프로젝트 및 팀 소개 페이지&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>학교 수업을 듣다보니 한 학기에 2개 3개의 프로젝트를 개발해야하는 경우가 있었습니다. 완전 개발이 처음이었던 시기에는 이러한
양적인 개발 속에서도 배울 점이 많았지만 어느 정도 지나고 나니 양적인 개발 속에서는 크게 배울 점이 느껴지지 않았고, 머리가 아닌
손으로 개발을 하고 있는 느낌을 받게 되었습니다.&lt;/p>
&lt;p>따라서 저는 단순히 찍어내기 식의 개발을 반복하기 보다는 &lt;strong>한 서비스를 꾸준히 개발해나가며 그 속에 많은 생각을 담아내고자&lt;/strong> 했습니다.
처음에는 가볍게 관심있던 기술들을 자유롭게 적용해볼 수 있는 &lt;strong>개발 놀이터&lt;/strong>를 만들고자 하는 마음에 시작했고 제가 관심있던 기술들은 다음과 같았습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>Kubernetes&lt;/code>&lt;/li>
&lt;li>&lt;code>Golang&lt;/code>을 이용한 서버 개발&lt;/li>
&lt;li>&lt;code>TDD&lt;/code>&lt;/li>
&lt;li>&lt;code>MSA&lt;/code>, &lt;code>DDD&lt;/code>(Domain Driven Design)&lt;/li>
&lt;li>&lt;code>ArgoCD&lt;/code>를 이용한 CD(Continuous deploy &amp;amp; delivery)&lt;/li>
&lt;/ul>
&lt;p>베프 하나와 함께 시작했던 서비스에서 기존에 친분이 없던 디자이너님, 개발자님들이 추가되면서 &lt;strong>리더로서 책임감이 조금 생겨나기도 했고,
기간이 길어지다보니 단순히 개발 놀이터보다는 출시를 해보자는 목표&lt;/strong>를 갖게 되었습니다.&lt;/p>
&lt;p>그리고 대부분의 코드를 오픈소스로 관리하고 있는데 개인적으로는 학생들이 실제 프로덕션 수준의 작업에 참여해볼 수 있는 경험이
많지 않은데 우리 &lt;strong>학교 학생들은 자신이 사용하는 오픈소스 서비스인 쿠뮤에 자유롭게 기여함으로써 실제 개발에 참여해볼 수 있는 기회의 장이 되었으면&lt;/strong> 하는
꿈이 있습니다. 아무래도 학생들이 각자 다른 개발 언어와 관심사를 갖다보니 MSA를 선택한 것이 이 부분에 있어서는 좋게 작용할 수 있을 것 같네요.&lt;/p>
&lt;h2 id="쿠뮤-뭐하는-서비스지">쿠뮤? 뭐하는 서비스지?&lt;/h2>
&lt;p>&lt;strong>쿠뮤는 공지사항 푸시 알림과 교내 커뮤니티를 주로 제공하는 서비스&lt;/strong>에요!
경희대학교의 흩뿌려진 공지사항을 한 곳에서 조회할 수 있고, 새로운 공지사항은 선택적으로 푸시알림을 받아볼 수 있답니다.
또한 교내 커뮤니티로서 학교 인증이 학교 사이트와 연동되어 간편하고 다양한 주제에 걸쳐 학생들의 의견이 적극 반영될 수 있습니다.
보통의 커뮤니티는 게시판 형태로 구현되어 게시판을 하나 하나 찾아다녀야 하지만 &lt;strong>쿠뮤는 마치 인스타에서 해시태그들을 팔로우하듯
게시판을 팔로우 해두면 피드에서 자신이 팔로우 해둔 게시글을 모두 모아볼 수 있어요&lt;/strong>.&lt;/p>
&lt;h2 id="내가-좋아하는-생각이-담긴-개발">내가 좋아하는 생각이 담긴 개발&lt;/h2>
&lt;p>저는 &lt;del>단순하게 손으로 하는 개발&lt;/del>보단 이런 저런 &lt;strong>생각들이 담겨있는 개발을 좋아하고 그에 대해 자유롭게 얘기나누는 시간을 사랑&lt;/strong>합니다.
제가 쿠뮤를 개발하면서 했던 고민들과 그런 생각들을 어떻게 녹여냈는지 간단히 정리해보겠습니다.&lt;/p>
&lt;h4 id="restful하게-api를-개발해나가려면-어떻게-해야할까">&amp;lsquo;RESTful하게 API를 개발해나가려면 어떻게 해야할까?&amp;rsquo;&lt;/h4>
&lt;p>&lt;code>RESTful하다&lt;/code>는 말의 정의는 이곳 저곳 다들 다르게 표현하고들 있는 것 같지만 &lt;strong>HTTP method로 동작&lt;/strong>을, &lt;strong>URL로 리스소&lt;/strong>를 나타내는 점은 공통적으로 표현되는 특징인 것 같습니다.
그래서 &lt;code>CRUD&lt;/code>는 Post, Get, Patch, Delete 등의 메소드와 연결되죠. 근데 분명 &lt;strong>CRUD와 깔끔히 맞아떨어지지 않는 작업들이 존재합니다!&lt;/strong>&lt;/p>
&lt;p>관련 글&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://softwareengineering.stackexchange.com/questions/323415/how-to-design-a-rest-api-to-handle-non-crud-operations" target="_blank" rel="noopener"
>How to design a REST API to handle non-CRUD operations?&lt;/a> - Stack exchange&lt;/li>
&lt;li>&lt;a class="link" href="https://stackoverflow.com/questions/41742926/rest-api-design-for-non-crud-actions-e-g-save-deploy-execute-code" target="_blank" rel="noopener"
>REST API design for non-CRUD actions, e.g. save, deploy, execute code&lt;/a> - Stackoverflow&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://umi0410.github.io/blog/khumu/khumu-dev-review/toss.png"
width="2401"
height="1270"
srcset="https://umi0410.github.io/blog/khumu/khumu-dev-review/toss_hu81accd9c19897ba0af7fdadc906af6cb_682192_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/khumu/khumu-dev-review/toss_hu81accd9c19897ba0af7fdadc906af6cb_682192_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="453px"
>
출처 - &lt;a class="link" href="https://toss.im/slash-21/sessions/1-7" target="_blank" rel="noopener"
>https://toss.im/slash-21/sessions/1-7&lt;/a>&lt;/p>
&lt;p>위와 같이 &lt;strong>토스에서도 RESTful하지 않은 API들에 대해 고민&lt;/strong>을 많이 했던 것 같고 이 경우 다음과 같은 컨벤션들을 적용한 것 같습니다.&lt;/p>
&lt;ol>
&lt;li>Path의 마지막에 동작을 나타내는 동사를 적용&lt;/li>
&lt;li>이런 API들은 POST 메소드를 이용&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code># 기존 방식
좋아요 생성 POST /likes {article: 1}
좋아요 삭제 DELETE /likes/{{like_id}}
# 개선한 방식
좋아요 POST /articles/1/like
좋아요 취소 POST /articles/1/unlike
&lt;/code>&lt;/pre>&lt;p>실제 쿠뮤 작업을 예로 들자면 게시글에 대한 좋아요 작업 수행 시 위와 같이 API를 좀 더 직관적으로 개선했습니다.
기존에는 좋아요 기능을 구현하기 위해 like라는 리소스로 이용하면서 like 리소스에 대한 생성, 삭제에 맵핑시켰습니다.&lt;/p>
&lt;p>하지만 이는 다소 기계적이고 API를 사용하여 개발하는 클라이언트(사람)입장에서는 와닿지 않을 수 있습니다.
또한 클라이언트는 좋아요를 취소하려면 자신이 취소하고자 하는 좋아요 내역의 ID를 알아야하므로 불편하죠.&lt;/p>
&lt;p>그래서 아래와 같이 API 형태를 개선했고, 클라이언트는 좀 더 편리하게 API를 이용할 수 있어졌습니다~!&lt;/p>
&lt;h4 id="api의-latency를-줄이기-위해서는-어떻게-해야할까">&amp;lsquo;API의 Latency를 줄이기 위해서는 어떻게 해야할까?&amp;rsquo;&lt;/h4>
&lt;p>개발을 하다보니 데이터가 그렇게 많은 것도 아닌데 어느 순간부터 &lt;strong>latency가 길다&lt;/strong>는 느낌을 받게 되었습니다.
그래서 어떻게 latency를 줄일 수 있을까를 알아보게 됐죠.
주된 원인은 &lt;code>N+1&lt;/code> 문제라고 불리는 DB Query가 이슈였던 것 같습니다.
게시글을 여러 개 조회한 뒤 맵핑을 할 때 &lt;strong>게시글 하나 하나마다의 댓글 개수, 좋아요 개수, 북마크 개수 등을 순차적으로 조회하다보니
이 부분에서 병목이 발생&lt;/strong>한 것이었어요!&lt;/p>
&lt;p>저는 이 부분에서 &lt;code>redis&lt;/code>를 적용해보았고 redis를 적용하자 상황마다 다르겠지만 대체로 &lt;strong>latency가 약 1/5로 줄어드는 효과&lt;/strong>를 얻을 수 있었습니다.
redis를 적용하던 당시엔 N+1 문제와 그것을 Fetch join(혹은 Eager loading)로 해결하는 방법에 대한 인지 자체가 없었어서
redis를 적용했던 것 같은데 Fetch join으로도 글을 쓰면서 생각해보니 간단히 해결할 수 있었을 것 같긴하네요.&lt;/p>
&lt;p>시간이 된다면 redis 뿐만 아니라 fetch join도 적용해서 더 최적화해볼 수 있으면 좋을 것 같아요. 그래도 redis를 써보면서
많은 것들을 배워볼 수 있었던 것 같아 재미있었습니다! ㅎㅎ&lt;/p>
&lt;h4 id="msa에서-관심사책임-분리를-어떻게-할-수-있을까">&amp;lsquo;MSA에서 관심사/책임 분리를 어떻게 할 수 있을까?&amp;rsquo;&lt;/h4>
&lt;p>&lt;img src="https://umi0410.github.io/blog/khumu/khumu-dev-review/microservice-data-share.png"
width="279"
height="177"
srcset="https://umi0410.github.io/blog/khumu/khumu-dev-review/microservice-data-share_hue99fd32b7750fe5cc1fc1d45e05b3df2_4025_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/khumu/khumu-dev-review/microservice-data-share_hue99fd32b7750fe5cc1fc1d45e05b3df2_4025_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;p>출처: &lt;a class="link" href="https://docs.microsoft.com/ko-kr/azure/architecture/microservices/design/data-considerations" target="_blank" rel="noopener"
>마이크로 서비스에 대한 데이터 고려 사항 - 마이크로소프트 블로그&lt;/a>&lt;/p>
&lt;p>처음 쿠뮤를 설계하면서 MSA를 도입하고자 했을 때는 어떻게 마이크로서비스를 나눠야할까에 대한 고려가 거의 없었던 것 같습니다.
지금은 DDD를 공부하며 높은 응집도와 독립성을 취하면서 서비스를 나누는 게 좋겠다는 생각이 들지만 당시엔 그냥 나누고 싶은 대로 나눠버렸던 것 같습니다.
약간 오버 엔지니어링이 될 수 있는 설계를 한 것은 그렇다치고 그 속에서 서비스들을 구현해 나갈 때에도 실수했던 것이 하나 있습니다. 바로 위의 사진처럼 다른 서비스가 하나의 DB를
바라보면 안된다는 원칙을 어긴 것인데요.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/khumu/khumu-dev-review/comment-capture.png"
width="1079"
height="662"
srcset="https://umi0410.github.io/blog/khumu/khumu-dev-review/comment-capture_hucb87beda3a5f625f0903c63dddfd736f_86804_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/khumu/khumu-dev-review/comment-capture_hucb87beda3a5f625f0903c63dddfd736f_86804_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="391px"
>&lt;/p>
&lt;p>예를 들어 &lt;strong>게시글 서비스와 댓글 서비스가 분리되어 있을 때 위의 이미지와 같이 어떤 댓글의 작성자가 해당 게시글의 작성자와 일치하는지에 대한 정보가 필요하다&lt;/strong>고 가정해봅시다.
기존에는 댓글 서비스가 게시글 DB를 직접 조회해서 &lt;code>article.author&lt;/code>와 &lt;code>comment.author&lt;/code>를 비교했습니다. 하지만 이렇게 &lt;strong>분리된 서로 다른 서비스가
같은 데이터에 접근하는 형태는 MSA에서는 매우 안 좋게 평가되는 안티 패턴&lt;/strong>입니다.&lt;/p>
&lt;p>따라서 저는 댓글을 조회할 때 게시글 서비스에게 게시글 정보를 조회해 &lt;code>article.author&lt;/code>와 &lt;code>comment.author&lt;/code>를 비교할 수 있도록 했습니다.
만약 &lt;strong>게시글 서비스가 비정상으로 동작하더라도 댓글 서비스에는 큰 타격 없이 댓글 작성자가 게시글 작성자와 일치하는지 정보만 false로 처리&lt;/strong>될 뿐입니다.&lt;/p>
&lt;p>아마 더 고도화된 형태는 댓글 서비스에서 자기 서비스만이 이용할 게시글 작성자 정보 테이블을 설계하거나 덜 정규화한다면 댓글마다 게시글의 작성자 id도 기입하는 방식을 이용할 수 있을 것 같아요.
하지만 그런 형태를 적용하기 이전에 우선은 좀 더 latency가 길 수는 있지만 간단히 마이크로서비스간에 동기적으로 통신(게시글 작성자 정보를 댓글 서비스가 API로 직접 호출)하는 방식을 적용해봤습니다.&lt;/p>
&lt;h4 id="어떤-서비스를-이용해-빌드배포를-자동화할까">&amp;lsquo;어떤 서비스를 이용해 빌드/배포를 자동화할까?&amp;rsquo;&lt;/h4>
&lt;p>&lt;img src="https://umi0410.github.io/blog/khumu/khumu-dev-review/argocd.png"
width="1236"
height="1297"
srcset="https://umi0410.github.io/blog/khumu/khumu-dev-review/argocd_hu7e5d5c219024186f3afda580f81ab780_197051_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/khumu/khumu-dev-review/argocd_hu7e5d5c219024186f3afda580f81ab780_197051_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="95"
data-flex-basis="228px"
>&lt;/p>
&lt;p>과거에는 배포 도구로서 &lt;code>Spinnaker&lt;/code>를 주로 사용했지만 Spinnaker는 그 관리 리소스가 만만치 않게 든다는 생각이 들었습니다. &lt;code>Jenkins&lt;/code>나 그 외의 서비스들과 연동시켜 하나의 Pipeline을
만드는 데에는 Spinnaker가 적합했지만 꼭 그런 연동 작업이 필요가 없다면 굳이 Spinnaker를 사용할 필요가 없을 것 같았습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://tech.kakao.com/2021/07/16/devops-for-msa/" target="_blank" rel="noopener"
>실용주의 데브옵스 for MSA - 카카오테크&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://mesh.dev/20210208-dev-notes-002-ci-cd/" target="_blank" rel="noopener"
>CI/CD 도구 및 방법론 도입기 - 메쉬코리아, VROONG&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>그래서 위의 글들에도 소개되는 평소 관심 있던 &lt;strong>&lt;code>ArgoCD&lt;/code>를 배포 도구로 선택&lt;/strong>했고, 오픈소스로서 관리되는 프로젝트이다보니 Github 내에서 많은 작업이 이루어지므로
&lt;strong>CI는 &lt;code>Github Action&lt;/code>을 이용&lt;/strong>하기로 결정했습니다.&lt;/p>
&lt;p>그리고 Spinnaker를 사용했을 땐 Helm 차트를 통한 배포가 막 지원되던 시기였어서 버전 문제인지 버그인지 Helm 차트가 잘 적용이 안됐던 이슈가 있어
정말 아쉬웠는데요. &lt;strong>&lt;code>ArgoCD&lt;/code>는 kustomize나 Helm을 적극적으로 지원하고 있는 것 같아 Helm으로 배포하는 것도 너무나 편리&lt;/strong>했어요.
지금은 Kubernetes의 &lt;code>Nginx Ingress Controller&lt;/code>나 &lt;code>ArgoCD Notification&lt;/code> 같은 서비스들은 Helm으로 배포/관리하고 있답니다.&lt;/p>
&lt;h2 id="프로젝트-리드와-팀원들간의-의사소통">프로젝트 리드와 팀원들간의 의사소통&lt;/h2>
&lt;p>&lt;img src="https://umi0410.github.io/blog/khumu/khumu-dev-review/communication-1.png"
width="470"
height="622"
srcset="https://umi0410.github.io/blog/khumu/khumu-dev-review/communication-1_hue4b7e4c1e1817810425969ce1c3a7179_42435_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/khumu/khumu-dev-review/communication-1_hue4b7e4c1e1817810425969ce1c3a7179_42435_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="181px"
>
&lt;img src="https://umi0410.github.io/blog/khumu/khumu-dev-review/communication-2.png"
width="449"
height="662"
srcset="https://umi0410.github.io/blog/khumu/khumu-dev-review/communication-2_huf596a4e544c0801f3e39d454f12567e3_55887_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/khumu/khumu-dev-review/communication-2_huf596a4e544c0801f3e39d454f12567e3_55887_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="67"
data-flex-basis="162px"
>
&lt;img src="https://umi0410.github.io/blog/khumu/khumu-dev-review/communication-3.png"
width="492"
height="711"
srcset="https://umi0410.github.io/blog/khumu/khumu-dev-review/communication-3_hu317daaf62cded970db4953d604885a3e_47905_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/khumu/khumu-dev-review/communication-3_hu317daaf62cded970db4953d604885a3e_47905_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="166px"
>
&lt;img src="https://umi0410.github.io/blog/khumu/khumu-dev-review/communication-4.png"
width="632"
height="970"
srcset="https://umi0410.github.io/blog/khumu/khumu-dev-review/communication-4_huaacae8203291a385a45481847c7ec533_104242_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/khumu/khumu-dev-review/communication-4_huaacae8203291a385a45481847c7ec533_104242_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="65"
data-flex-basis="156px"
>&lt;/p>
&lt;p>저희 팀은 주로 노션을 통해 회의 내용 기록 및 진행 사항 공유를 하고, 회의는 디스코드로 진행했습니다.
이렇게 보니 해당 페이지에 기록하기 전까지 합하면 딱 &lt;strong>1년&lt;/strong> 정도 된 것 같네요 벌써..! 시간이 참 빠른 것 같아요 ㅎㅎ&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/khumu/khumu-dev-review/collabo-1.png"
width="1080"
height="1799"
srcset="https://umi0410.github.io/blog/khumu/khumu-dev-review/collabo-1_hu4ce9c2bf6390846cdc287259d15975c0_1578099_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/khumu/khumu-dev-review/collabo-1_hu4ce9c2bf6390846cdc287259d15975c0_1578099_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="60"
data-flex-basis="144px"
>
&lt;img src="https://umi0410.github.io/blog/khumu/khumu-dev-review/collabo-2.png"
width="1080"
height="1628"
srcset="https://umi0410.github.io/blog/khumu/khumu-dev-review/collabo-2_hu377b174bcab257d212aa47a01287c09d_539505_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/khumu/khumu-dev-review/collabo-2_hu377b174bcab257d212aa47a01287c09d_539505_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="159px"
>&lt;/p>
&lt;p>디스코드로 회의하기 힘든 상황엔 자유롭게 카톡으로 이슈를 공유하기도 합니다. 얼마 전에 운영 환경을 구축하면서 &lt;code>S3&lt;/code> + &lt;code>CloudFront&lt;/code>를 구축할 때
겪은 이슈 관련 톡을 가져와 봤습니다. 특히 서로 포지션이 다른 경우 &lt;strong>이슈에 대해 자세히 묘사&lt;/strong>하려 노력하고 &lt;strong>팀원의 작업에 항상 감사&lt;/strong>를 표하는 걸 잊지 않으려
노력하고 있어요. 코로나와 거리 상의 문제로 한 번도 뵙지 못한 팀원들도 계시지만 나름 내적 친밀감이 많이 쌓인 것 같아요 ㅎㅎ
꼭 쿠뮤가 아니라도 기회가 된다면 앞으로도 같이 작업하거나 만나뵙고 싶기도 합니다.&lt;/p>
&lt;h2 id="앞으로의-미래">앞으로의 미래..?&lt;/h2>
&lt;p>&lt;img src="https://umi0410.github.io/blog/khumu/khumu-dev-review/lion.png"
width="600"
height="600"
srcset="https://umi0410.github.io/blog/khumu/khumu-dev-review/lion_hud65daaf114658cf17a9f778455969ffb_26332_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/khumu/khumu-dev-review/lion_hud65daaf114658cf17a9f778455969ffb_26332_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>사실 개발 놀이터로 시작한 주제라서 그렇게 참신하지도 않고, 대학생 커뮤니티에는 에브리타임이라는 큰 장벽이 있어서 우리 서비스의 미래가 어떻게 될 지는 모르겠습니다.
처음엔 커뮤니티 기능을 주기능으로 밀어붙여 개발했던 반면 활성 유저가 별로 없을 경우를 고려하니 커뮤니티보다는 공지사항과 학사일정을 편리하게 전달할 수 있는 기능이
더 우선시 되어야할 것 같았어요. 그래서 그 부분들을 보완하여 MVP를 출시 준비 중이고 이후 다양한 피드백을 받아보면서
계속해서 디벨롭해나갈지 유지만 할 지 팀원들과 상의해봐야할 것 같긴 합니다.&lt;/p>
&lt;p>그래도 대학교를 졸업하기 전에 이렇게 길게 한 프로젝트를 진행해볼 수 있었던 것도 뿌듯하고 팀원들과 꾸준히 협업해나가는
경험을 할 수 있었던 점, 다양한 이슈를 맞이하고 해결할 수 있었던 점에서 서비스의 미래가 어떻게 되든 소중한 경험을 한 것 같습니다.&lt;/p>
&lt;p>쿠뮤 팀원들 모두 꽃길 걷고 행복했으면 좋겠습니다~! 화이팅!!!&lt;/p></description></item><item><title>Golang으로 백엔드 개발하기 - 5. Error Handling. 에러 잘 처리하기 (feat. fiber)</title><link>https://umi0410.github.io/blog/golang/how-to-backend-in-go-errorhandle/</link><pubDate>Sun, 05 Sep 2021 01:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/how-to-backend-in-go-errorhandle/</guid><description>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-errorhandle/chain.png" alt="Featured image of post Golang으로 백엔드 개발하기 - 5. Error Handling. 에러 잘 처리하기 (feat. fiber)" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>드디어 에러를 다뤄볼 차례가 됐네요. 작년까지만 해도 &lt;code>Error&lt;/code>나 &lt;code>Exception&lt;/code> 처리의 중요성을 잘 몰랐던 것 같습니다. 하지만 API &lt;strong>클라이언트랑 작업을 하면 할수록 에러 처리의 중요성을 느끼게 되는 것 같아요&lt;/strong>. 왜냐하면 백엔드에서 각각의 에러 케이스에 대한 &lt;code>status_code&lt;/code>나 &lt;code>error_type&lt;/code>등을 명확히 정의하지 않으면 클라이언트는 에러를 해석할 방법이 없기 때문입니다.&lt;/p>
&lt;p>또한 &lt;strong>에러를 잘 처리한 뒤 올바르게 응답하거나 로그를 남기는 것은 유지/보수 시에 백엔드 개발자 스스로 에게도 정말 중요&lt;/strong>할 수 있습니다. 우리는 실제 운영 환경의 로그를 마치 우리가 로컬에서 개발할 때 처럼 항상 보고있을 수는 없기 때문이죠. 즉 에러 로그만 따로 &amp;ldquo;편리하게&amp;rdquo; 볼 수 있거나 에러 로그로 인한 Notification System이 있으면 훨씬 에러를 추적(Tracing)하기 쉽겠죠!&lt;/p>
&lt;p>그리고 &lt;strong>&lt;code>Golang&lt;/code>은 다른 언어들과 달리 Try Catch의 형태로 에러를 처리하지 않는다&lt;/strong>는 점을 모두들 알고 계실 겁니다. 하지만 이 에러를 그럼 어떻게 처리하지에 대한 방안은 뚜렷이 인지하지 못한 경우가 많을 수 있습니다.(제가 그랬습니다. ㅎㅎ..) 그래서 대충 에러 로그를 출력하게만 하고 통일성 없는 방식으로 그때 그때 떠오르는 대로 에러처리를 해왔던 것 같아요.&lt;/p>
&lt;p>그럼 이번 글에서는 에러를 왜 우아하게, 잘 처리해야하는지 살펴보고 그를 위한 방법도 소개해보겠습니다.&lt;/p>
&lt;h2 id="-에러를-wrapping-하자">📦 에러를 Wrapping 하자&lt;/h2>
&lt;p>다른 언어들은 에러를 상속해 정의하는 방식을 이용하지만 &lt;strong>&lt;code>Golang&lt;/code>은 에러를 &lt;code>Wrapping&lt;/code>하는 방식을 이용&lt;/strong>합니다. 좀 낯설어서 그렇지 익숙해지면 훨씬 간결한 것 같습니다.&lt;/p>
&lt;p>예를 들어 Redis 관련 에러는 모두 추상적인 에러인 &lt;code>RedisError&lt;/code>에 속하고 조회 도중 발생한 에러는 &lt;code>RedisGetError&lt;/code>라고 정의하는 경우가 있다고 해보겠습니다. 자바의 경우는 다음과 같이 정의하겠죠.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RedisError&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">RedisError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">super&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RedisGetError&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">RedisError&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">RedisError&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">super&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;레디스 조회 관련 에러&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Something&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">somethingWithRedis&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">redis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;X&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">RedisGetError&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span> &lt;span class="c1">// 레디스 조회 관련 에러 케이스에 대한 대응
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">RedisError&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span> &lt;span class="c1">// 레디스 조회를 제외한 레디스 관련 에러 케이스에 대한 대응
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span> &lt;span class="c1">// 그 외의 모든 에러 케이스에 대한 대응
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이렇게 Java의 경우는 &lt;code>상속&lt;/code>을 통해 각 에러 케이스에 대해 대응합니다. 하지만 Golang에서는 주로 다음과 같은 방법으로 에러를 처리합니다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>error.New(msg string)&lt;/code> 으로 sentinel error(더 이상 쪼갤 수 없는 최상위 에러 같은 느낌)를 정의&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>fmt.Errorf(&amp;quot;%s: %w&amp;quot;, msg, sentinelErr)&lt;/code> 으로 sentinel error를 감싼(wrap) 자식 에러를 정의&lt;/p>
&lt;p>에러를 Wrapping 하면 sentinel error에 좀 더 정보를 추가할 수 있어 친절한 에러가 되죠!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>errors.Is(err, parentErr)&lt;/code> 으로 err의 wrapping chain에 parentErr이 존재하는지 판단&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>에러를 Wrapping한다는 개념이 잘 이해되지 않는 분들은 &lt;a class="link" href="https://golangbyexample.com/wrapping-and-unwrapping-error-golang/" target="_blank" rel="noopener"
>Wrapping and Un-wrapping of error in Go (Golang)&lt;/a>을 참고해주시면 좋을 것 같습니다.&lt;/p>
&lt;p>그럼 Go에선 위와 같은 케이스가 어떻게 구현될 수 있는지 적어보겠습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ErrRedis&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;레디스 관련 에러&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ErrRedisGet&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;조회 도중 에러: %w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrRedis&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Something&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Something&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">somethingWithRedis&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">redis&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;X&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Is&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrRedisGet&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span> &lt;span class="c1">// 레디스 조회 관련 에러 케이스에 대한 대응
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Is&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrRedis&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span> &lt;span class="c1">// 레디스 조회를 제외한 레디스 관련 에러 케이스에 대한 대응
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span> &lt;span class="c1">// 그 외의 모든 에러 케이스에 대한 대응
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Go에서 error는 &lt;code>interface&lt;/code>이기 때문에 간혹 &lt;code>type assertion&lt;/code>을 이용해 에러의 타입을 비교하거나 직접 error variable와 비교하는 경우도 있긴합니다만 바람직하지는 않습니다. type assertion은 애초에 다소 불안하거나 번거로운 면이 있고 직접 error value와 비교하는 경우는 해당 error value를 제공하던 package가 추후에는 어떤 error value를 재정의할 지 모르기 때문입니다. &lt;strong>예를 들어 &lt;code>ErrRedisGet&lt;/code> 를 리턴하던 패키지가 &lt;code>ErrRedisGet&lt;/code> 를 Wrapping한 &lt;code>ErrRedisHashGet&lt;/code> 를 리턴하는 형태로 변경됐다고 가정&lt;/strong>합시다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ErrRedis&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;레디스 관련 에러&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ErrRedisGet&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;조회 도중 에러: %w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrRedis&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">redis&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">HashGet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">Hash&lt;/span> &lt;span class="nx">Get&lt;/span> &lt;span class="nx">도중&lt;/span> &lt;span class="nx">에러가&lt;/span> &lt;span class="nx">발생한&lt;/span> &lt;span class="nx">경우&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrRedisGet&lt;/span> &lt;span class="c1">// 이 버전에서는 ErrRedisGet을 리턴함.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span> &lt;span class="c1">// 에러가 발생하지 않은 경우
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Something&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">somethingWithRedis&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">redis&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HashGet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;X&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">ErrRedisGet&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Redis 조회 도중 에러가 발생한 경우에 대한 대응
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>기존 버전에선 &lt;code>ErrRedisGet&lt;/code> 을 리턴하고, 그 결과를 확인하는 메소드에서도 &lt;code>ErrRedisGet&lt;/code> 과 직접 &lt;code>==&lt;/code>으로 비교를 하니 올바르게 동작합니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-errorhandle/chain.png"
width="929"
height="708"
srcset="https://umi0410.github.io/blog/golang/how-to-backend-in-go-errorhandle/chain_hua96618047d845851ee10ee4de25bc827_61443_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-errorhandle/chain_hua96618047d845851ee10ee4de25bc827_61443_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="chain.png"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="314px"
>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ErrRedis&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;레디스 관련 에러&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ErrRedisGet&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;조회 도중 에러: %w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrRedis&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ErrRedisHashGet&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;해쉬 조회 도중 에러: %w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrRedisGet&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">redis&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">HashGet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">Hash&lt;/span> &lt;span class="nx">Get&lt;/span> &lt;span class="nx">도중&lt;/span> &lt;span class="nx">에러가&lt;/span> &lt;span class="nx">발생한&lt;/span> &lt;span class="nx">경우&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrRedisHashGet&lt;/span> &lt;span class="c1">// 이 버전에서는 ErrRedisGet을 리턴함.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span> &lt;span class="c1">// 에러가 발생하지 않은 경우
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Something&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">somethingWithRedis&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">redis&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HashGet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;X&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 만약 아래처럼 errors.Is를 이용하면 ErrRedisGet은 실제로 리턴된
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// ErrRedisHashGet의 wrapping chain에 존재하므로 기존과 동일하게
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 올바르게 동작할 수 있음.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// if errors.Is(err, ErrRedisGet){}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 하지만 이제는 ==을 통한 직접 비교는 예상한대로 동작하지 못함 ㅜㅜ
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">ErrRedisGet&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span> &lt;span class="c1">// ㅜㅜ
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>하지만 다음 버전에선 &lt;code>redis.HashGet()&lt;/code> 이 Hash에 대한 조회 도중 에러가 발생했을 땐 &lt;code>ErrRedisGet&lt;/code>이 아닌 그것을 Wrap한 &lt;code>ErrRedisHashGet&lt;/code>을 리턴한다면 기존의 &lt;code>==&lt;/code>을 이용한 직접 비교는 올바른 결과를 가져다주지 못할 것입니다.&lt;/p>
&lt;p>다소 어렵거나 낯설 수 있는 내용이라 간단한 내용을 위주로 예시를 들어봤습니다. 관심이 있으신 분들은 기본으로 제공되는 &lt;code>errors&lt;/code> 패키지 외에 &lt;a class="link" href="https://github.com/pkg/errors" target="_blank" rel="noopener"
>https://github.com/pkg/errors&lt;/a> 라는 패키지를 이용하는 경우도 있으니 한 번 살펴보시면 좋을 것 같습니다.&lt;/p>
&lt;p>자, 그럼 에러를 Wrap하라는 내용 하나 갖고 얘기를 주절 주절 길게 했으니 이제 실제로 웹 백엔드 개발에서의 에러 처리에 대해 알아봅시다~!&lt;/p>
&lt;h2 id="-웹서버가-에러를-제대로-처리하지-않으면">🤔 웹서버가 에러를 제대로 처리하지 않으면?&lt;/h2>
&lt;p>에러를 제대로 처리하지 않으면 일반적으로 웹 프레임워크들은 &lt;code>500 Internal Error&lt;/code>로 응답하기 때문에 Client는 &lt;code>500 Internal Error&lt;/code> 응답 밖에 받을 수 없습니다&amp;hellip; 경우에 따라서는 Body는 올바르게 받을 수도 있긴하지만 매우 불안하죠. 에러의 원인을 모르니 클라이언트 측에서도 유저에게 &lt;strong>&amp;ldquo;알 수 없는 이유로 요청에 실패했습니다.&amp;rdquo; 같은 메시지를 띄운다면 유저 경험도 당연히 좋지 않아지겠죠&lt;/strong>.&lt;/p>
&lt;p>각 에러 케이스에 적절히 대응해서 응답하면 클라이언트와 유저가 모두 잘 반응할 수 있을 것입니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>로그인하지 않은 유저의 요청이라 에러가 난 경우&lt;/strong> =&amp;gt; 401 Unauthorized 응답 =&amp;gt; 클라이언트는 유저를 로그인 창으로 안내함.&lt;/li>
&lt;li>권한이 없는 유저의 요청이라 에러가 난 경우 =&amp;gt; 403 Forbidden 응답 =&amp;gt; 클라이언트는 유저에게 권한이 없어서 불가능하다는 친절한 오류 메시지를 띄움.&lt;/li>
&lt;li>&lt;strong>존재하지 않는 리소스에 접근해 에러가 난 경우&lt;/strong> =&amp;gt; 404 Not Found 응답 =&amp;gt; 클라이언트는 유저에게 해당 리소스가 존재하지 않는다는 친절한 오류 메시지를 띄움.&lt;/li>
&lt;/ul>
&lt;h2 id="fiber에서-에러-처리하는-법">&lt;code>Fiber&lt;/code>에서 에러 처리하는 법&lt;/h2>
&lt;p>&lt;code>fiber&lt;/code>는 golang 웹 프레임워크들 중에서 문서가 참 잘 되어있는 편이라고 생각합니다. &lt;a class="link" href="https://docs.gofiber.io/guide/error-handling" target="_blank" rel="noopener"
>Error Handling&lt;/a> 파트를 보면 웹 프레임워크단에서는 어떻게 에러를 처리할 지 간단히 살펴볼 수 있습니다. Default Error Handler는 기본적으로 사용되는 것이고, Custom Error Handler을 따로 정의해 이용을 할 수도 있습니다. 하지만 저는 저번 시간에 다뤘던 &lt;code>Middleware&lt;/code> 방식을 이용해 에러를 잘 처리해보겠습니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-errorhandle/errorhandler.png"
width="1142"
height="710"
srcset="https://umi0410.github.io/blog/golang/how-to-backend-in-go-errorhandle/errorhandler_hucfef4304ecce075cbbc083aa9e1131cf_67229_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-errorhandle/errorhandler_hucfef4304ecce075cbbc083aa9e1131cf_67229_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="errorhandler.png"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="386px"
>&lt;/p>
&lt;p>간단히 조금 설명을 드리자면 Fiber에서 제공하는 Error Handler는 &lt;code>fiber.Handler&lt;/code>들이 리턴한 error 타입을 실제 HTTP Response로 어떻게 변환을 할까에 대한 내용을 포함하고 있는 것이고, 제가 정의하는 미들웨어 방식의 Error Handler는 하나의 middleware로서 다른 &lt;code>fiber.Handler&lt;/code>(미들웨어 혹은 요청 핸들러)가 리턴한 error을 fiber의 Default Error Handler가 이해할 수 있는 fiber의 error type으로 변환시키는 것이라고 보시면 됩니다.&lt;/p>
&lt;h3 id="예시---username으로-user-조회">예시 - username으로 User 조회&lt;/h3>
&lt;p>전체 코드는 이전 글들과 마찬가지로 제 깃헙 &lt;a class="link" href="https://github.com/umi0410/how-to-backend-in-go/tree/master/errorhandle" target="_blank" rel="noopener"
>umi0410/how-to-backend-in-go&lt;/a>에 올려두겠습니다. 글에서는 간단한 코드 비교와 HTTP 응답만 설명드릴게요.&lt;/p>
&lt;p>에러를 잘 Wrapping한 정도에 따라 다르게 응답하는 세 가지 경우가 있습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Worst&lt;/strong> - 에러를 어딘가에 정의하지도 Wrap하지도 않은 익명 에러 리턴 =&amp;gt; 적절히 에러를 판단할 수 없어 500 Error&lt;/li>
&lt;li>&lt;strong>Ungraceful&lt;/strong> - 어딘가에 정의된 Error을 리턴 =&amp;gt; 에러를 적절히 판단해 올바른 Status code로 응답은 가능하지만 에러에 대한 자세한 문맥이나 설명이 없음.&lt;/li>
&lt;li>&lt;strong>Graceful&lt;/strong> - 에러를 잘 Wrap해서 리턴 =&amp;gt; 에러를 적절히 판단해 올바른 Status code로 응답할 수 있고 에러에 대한 자세한 문맥이나 설명도 클라이언트에게 제시됨.&lt;/li>
&lt;/ul>
&lt;p>코드로 보면 다음과 같습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ErrResourceNotFound&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;존재하지 않는 리소스&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">users&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;우미잉&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Username&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;umi0410&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="nx">생략&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">UserService&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">GetUserWorst&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">username&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">users&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Username&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">username&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;유저가 존재하지 않는 유저(username=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">username&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;)&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">UserService&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">GetUserUngracefully&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">username&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">users&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Username&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">username&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrResourceNotFound&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">UserService&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">GetUserGracefully&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">username&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">users&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Username&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">username&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;입력된 username=%s: %w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrResourceNotFound&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위와 같이 에러와 에러를 리턴하는 서비스 메소드들을 정의하고 커스텀 에러 핸들러로서의 미들웨어는 아래와 같이 작성했습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">customErrorHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">fiber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Ctx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 다음 핸들러를 호출한 뒤
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 본 미들웨어의 작업은 사후처리!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Next&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Is&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrResourceNotFound&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// fiber의 Default Error Handler가 알아들을 수 있는 형태의 fiber Error을 리턴
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">fiber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">404&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 미들웨어는 다른 일반적인 미들웨어들과는 약간은 다르게 동작한다고 볼 수 있는데요. &lt;strong>대부분의 미들웨어들은 요청을 실제로 처리하기 전에 자신의 작업을 수행하는 사전처리 방식을 이용&lt;/strong>하는데요. 예를 들어 저번 글에서 살펴본 basic auth 미들웨어는 요청을 처리하는 핸들러 이전에 미들웨어로서 요청자의 인증 정보를 기입(사전처리)하는 역할을 했죠. 하지만 &lt;strong>이 미들웨어는 요청을 처리하는 핸들러의 결과 에러를 이용하기 때문에 미들웨어가 시작하자마자 다음 핸들러를 호출하고 그 결과 에러를 이용합니다. 사후처리 방식이죠!&lt;/strong>&lt;/p>
&lt;p>그럼 이제 customErrorHandler가 리턴한 에러를 fiber의 Default Error Handler가 잘 처리해줄 것입니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ curl http://localhost:8000/worst/jinsu -w &amp;#34;\t%{http_code}\n&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">유저가 존재하지 않는 유저(username=jinsu) 500
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ curl http://localhost:8000/ungraceful/jinsu -w &amp;#34;\t%{http_code}\n&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">존재하지 않는 리소스 404
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ curl http://localhost:8000/graceful/jinsu -w &amp;#34;\t%{http_code}\n&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">입력된 username=jinsu: 존재하지 않는 리소스 404
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>응답을 보시면 worst case의 경우 status code가 500이기 때문에 클라이언트가 해당 에러 케이스에 대해 올바른 처리를 할 수 있는 방법이 없습니다.. 응답을 정규표현식을 이용해 판단해야할까요..? ㅎㅎ&amp;hellip;&lt;/p>
&lt;p>그리고 ungraceful case의 경우 status code는 404로 잘 정의되었지만 응답 바디가 다소 불친절해 클라이언트측에서 디버깅하기가 힘들겠죠.&lt;/p>
&lt;p>반면 graceful한 경우에는 status code도 잘 정의되었고 에러 바디도 자세합니다 굿굿이에요!&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>정말 작년까지는 에러를 핸들링하는 것에 대해 별 생각이 없었던 것 같습니다. 하지만 사이드 프로젝트를 하면서 에러를 제대로 처리하지 않아 &lt;code>Index Out Of Range 런타임 에러&lt;/code> 하나에도 서버가 종료되어버린다거나 모든 에러를 &lt;code>500 Internal Error&lt;/code>로 리턴해버리는 케이스를 겪으면서 &amp;lsquo;&lt;em>아&amp;hellip; 에러를 잘 처리해야 하는구나&lt;/em>&amp;lsquo;를 느껴볼 수 있었고, 실제 프로덕트를 개발하면서 &amp;lsquo;&lt;em>클라이언트 측에서 에러에 대한 적절한 액션을 취하기 위해선 status code나 error_type등을 잘 전달해야겠구나&lt;/em>&amp;rsquo; 라는 생각도 해볼 수 있었던 것 같습니다.&lt;/p>
&lt;p>게다가 Go에서 에러를 처리하는 방법에 대해 깊게 생각을 못해봤었는데 &lt;a class="link" href="https://github.com/yorkie-team/yorkie" target="_blank" rel="noopener"
>yorkie&lt;/a> 라는 오픈소스에 기여(&lt;a class="link" href="https://github.com/yorkie-team/yorkie/pull/222" target="_blank" rel="noopener"
>PR #222&lt;/a> )하게 되면서 멘토님께서 잘 이끌어주셔서 에러를 Wrapping한다는 개념에 대해 자세히 알아볼 수 있었던 기회가 된 것 같습니다.&lt;/p>
&lt;p>이번에 &lt;a class="link" href="https://www.depromeet.com/" target="_blank" rel="noopener"
>디프만&lt;/a> 10기로 활동하게 되었는데 10기 인터뷰 당시에도 클라이언트와 협업하면서 어려웠던 점과 해결해나간 방식과 관련된 질문을 받았을 때에도 에러 핸들링과 관련지어 답변을 했을만큼 에러 핸들링은 &amp;lsquo;&lt;em>그래도 내가 한편으로는 아직 성장하고 있나보다.. ㅎㅎ&lt;/em>&amp;lsquo;를 느낄 수 있었던 새로운 경험이었던 것 같습니다! 이 글을 읽으시는 &lt;strong>여러분들도 이제 에러 잘 처리하고 저와 함께 클라이언트에게 칭찬받는 백엔드 개발자가 되어봅시다&lt;/strong>~!&lt;/p>
&lt;h2 id="참고">참고&lt;/h2>
&lt;ul>
&lt;li>Working with Errors in Go 1.13 - &lt;a class="link" href="https://go.dev/blog/go1.13-errors" target="_blank" rel="noopener"
>https://go.dev/blog/go1.13-errors&lt;/a>&lt;/li>
&lt;li>Wrapping and Un-wrapping of error in Go (Golang) - &lt;a class="link" href="https://golangbyexample.com/wrapping-and-unwrapping-error-golang/" target="_blank" rel="noopener"
>https://golangbyexample.com/wrapping-and-unwrapping-error-golang/&lt;/a>&lt;/li>
&lt;li>Add RPC Config validation and handle the errors (&lt;a class="link" href="https://github.com/yorkie-team/yorkie" target="_blank" rel="noopener"
>yorkie&lt;/a> PR #222) - &lt;a class="link" href="https://github.com/yorkie-team/yorkie/pull/222" target="_blank" rel="noopener"
>https://github.com/yorkie-team/yorkie/pull/222&lt;/a>&lt;/li>
&lt;li>fiber docs Error Handling - &lt;a class="link" href="https://docs.gofiber.io/guide/error-handling" target="_blank" rel="noopener"
>https://docs.gofiber.io/guide/error-handling&lt;/a>&lt;/li>
&lt;li>Error는 검사만 하지말고, 우아하게 처리하세요. - &lt;a class="link" href="http://cloudrain21.com/golang-graceful-error-handling" target="_blank" rel="noopener"
>http://cloudrain21.com/golang-graceful-error-handling&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Golang으로 백엔드 개발하기 - 4. Custom Middleware(미들웨어) 작성해보기 (feat. fiber)</title><link>https://umi0410.github.io/blog/golang/how-to-backend-in-go-middleware/</link><pubDate>Wed, 01 Sep 2021 12:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/how-to-backend-in-go-middleware/</guid><description>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-middleware/log.png" alt="Featured image of post Golang으로 백엔드 개발하기 - 4. Custom Middleware(미들웨어) 작성해보기 (feat. fiber)" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>안녕하세요. 저번 글에서는 &lt;code>fiber&lt;/code> 라는 웹 프레임워크로 간단히 웹 애플리케이션을 만드는 방법에 대해 알아봤으니
이번엔 웹 애플리케이션을 만들다보면 꼭 필요해지는 &lt;code>middleware&lt;/code> 작성법에 대해 알아보겠습니다.
여태까지 백엔드에서 서버를 개발하면서는 &lt;code>JS&lt;/code>의 &lt;code>Express&lt;/code> 프레임워크를 제외하고는 미들웨어 개발이 그닥 쉽게 이해되는 부분은 아니었던 것 같습니다.
&lt;code>Express&lt;/code>에서 미들웨어를 작성하는 방법은 굉장히 직관적이고 문서도 많은 편이었거든요. 하지만 &lt;code>Spring&lt;/code>은 &lt;code>Filter&lt;/code>나 &lt;code>Interceptor&lt;/code>를 이해하기 위해 많은 내용을 알아야하고,
&lt;code>Django&lt;/code>는 Class based나 function based, 그리고 middleware를 추가하는 법 등이 좀 복잡한 편이라고 생각합니다.&lt;/p>
&lt;p>그리고 &lt;code>Golang&lt;/code>은 아무래도 코드로 말하는 사람들이 많아서인지 그닥 &lt;strong>middleware 작성과 같은 부분들이 문서로 잘 나와있진 않고, 코드를 까보면서 만드는 경우가 많았던 것 같습니다.&lt;/strong>
그래서 이번 글에서는 &lt;strong>&lt;code>fiber&lt;/code> 로 웹서버를 띄우면서 간단히 미들웨어 하나 만들어보겠습니다.&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>제공되는 &lt;code>Basic Authentication&lt;/code> middleware을 이용해 요청 유저를 식별&lt;/li>
&lt;li>식별된 유저 정보가 삽입된 logger를 &lt;code>context&lt;/code>에 주입&lt;/li>
&lt;/ol>
&lt;p>이렇게 하면 이후 service layer등에서는 요청 유저가 삽입된 logger을 통해 로그를 작성하니 로그 추적하기가 용이해지겠죠? ㅎㅎ
(BasicAuth를 이용하는 이유는 남이 작성한 미들웨어를 가져다쓰는 방법을 편하게 알아보기 위함일 뿐 인증 방법으로 권장해서는 아닙니다.)&lt;/p>
&lt;h2 id="미들웨어-그게-뭐야-왜-필요해">미들웨어?? 그게 뭐야? 왜 필요해?!&lt;/h2>
&lt;p>웹 프레임워크에서 말하는 미들웨어는 보통 요청에 따른 핸들러를 수행하기 전 혹은 수행한 후에 수행하는 작업을 말합니다. 주로 체인의 형태라고 보시면 되고
한 미들웨어에서 응답을 완료하면 걔가 요청 핸들러의 역할을 하게 된다고 보면 될 것 같습니다. 응답을 완료하지 않으면 다음 미들웨어를 호출하죠.&lt;/p>
&lt;p>서버 개발을 처음할 때는 미들웨어의 필요성을 잘 느끼지 못할 수 있습니다. 하지만 어느정도 개발을 하거나 배포를 해나가다보면 &lt;em>&amp;lsquo;아&amp;hellip; 모든 요청마다 ~~~한 작업을 수행하고 싶은데&amp;rsquo;&lt;/em> 이런 생각이 들 때가 있을 수 있습니다.
예를 들어 &lt;strong>API 별로 레이턴시를 체크&lt;/strong>하고 싶을 수도 있고, &lt;strong>body나 query string을 로그&lt;/strong>로 남기거나 &lt;strong>어떤 유저의 요청인지 매 요청마다 정보를 주입&lt;/strong>하고 싶을 수 있죠.
이런 경우 middleware를 이용하면 모든 요청은 미들웨어를 거치면서 처리되기 때문에 편리하게 작업할 수 있습니다!&lt;/p>
&lt;p>대표적으로는 &lt;code>인증&lt;/code>이나 &lt;code>캐싱&lt;/code>, &lt;code>로깅&lt;/code>, &lt;code>응답 타임아웃&lt;/code> 등에 사용하고 있는 것 같아요!&lt;/p>
&lt;h2 id="남이-만든-미들웨어-사용해보기---basicauth">남이 만든 미들웨어 사용해보기 - BasicAuth&lt;/h2>
&lt;p>Go를 통해 개발하는 이상 저희는 문서에만 의존할 수는 없습니다. 코드를 까봐야죠 !_!
&lt;a class="link" href="https://github.com/gofiber/fiber/issues/338" target="_blank" rel="noopener"
>Guidelines for creating Middleware - fiber Github Issue&lt;/a> 이슈에는 미들웨어 작성에 대한 몇 가지 가이드라인이 제시되어있더라구요.
참고해보시면 좋을 것 같기도 합니다.&lt;/p>
&lt;p>저는 &lt;a class="link" href="https://github.com/gofiber/fiber/blob/master/middleware/basicauth" target="_blank" rel="noopener"
>gofiber/fiber/middleware/basicauth&lt;/a> 의 코드를 바탕으로 해석해보겠습니다. 링크를 따라가면 README가 있긴하지만 정보가 많지는 않죠.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// fiber의 basicauth 미들웨어 코드 중 일부입니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Config defines the config for middleware.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Config&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Next defines a function to skip this middleware when returned true.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Optional. Default: nil
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">Next&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">fiber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Ctx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Users defines the allowed credentials
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Required. Default: map[string]string{}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">Users&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Realm is a string to define realm attribute of BasicAuth.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// the realm identifies the system to authenticate against
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// and can be used by clients to save credentials
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Optional. Default: &amp;#34;Restricted&amp;#34;.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">Realm&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Authorizer defines a function you can pass
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// to check the credentials however you want.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// It will be called with a username and password
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// and is expected to return true or false to indicate
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// that the credentials were approved or not.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Optional. Default: nil.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">Authorizer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Unauthorized defines the response body for unauthorized responses.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// By default it will return with a 401 Unauthorized and the correct WWW-Auth header
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Optional. Default: nil
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">Unauthorized&lt;/span> &lt;span class="nx">fiber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Handler&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ContextUser is the key to store the username in Locals
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Optional. Default: &amp;#34;username&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">ContextUsername&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ContextPass is the key to store the password in Locals
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Optional. Default: &amp;#34;password&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">ContextPassword&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위의 코드가 BasicAuth 미들웨어의 설정을 담당하는 Config 타입에 대한 코드입니다. 간단히 몇 개만 알아두면 이해하는 데에 도움이 되는 것들만 짚어보겠습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>Next&lt;/code> - nil이 아닌 경우 &lt;code>Next(*fiber.Ctx)&lt;/code>가 true를 반환하면 Basic Auth 미들웨어 자체를 건너뜀.&lt;/li>
&lt;li>&lt;code>Users&lt;/code> - 이 map에 정의된 유저만이 유효한 유저로 이용될 수도 있음. (Authorizer가 nil인 경우 이 정보를 바탕으로 인증 진행)&lt;/li>
&lt;li>&lt;code>Authorizer&lt;/code> - 인증 로직을 담당함. nil로 둘 경우 Users에서 일치하는 유저를 찾음. 여길 커스터마이징해서 DB에서 찾거나 할 수도 있음.&lt;/li>
&lt;li>&lt;code>ContextUsername&lt;/code>, &lt;code>ContextPassword&lt;/code> - 인증 후 Context에 어떤 키로 각 정보를 담을지. (기본값은 &amp;ldquo;username&amp;rdquo;, &amp;ldquo;password&amp;rdquo;)&lt;/li>
&lt;/ul>
&lt;p>오호.. 막상 코드를 까보니 그닥 어렵지 않죠?! 그럼 과연 이 코드들이 설명한 게 맞는지 한 번 서버를 띄워봅시다.&lt;/p>
&lt;h3 id="basic-auth-미들웨어를-다양하게-설정해보기">Basic Auth 미들웨어를 다양하게 설정해보기&lt;/h3>
&lt;h4 id="1-항상-인증에-성공하는-authorizer를-이용하는-config">1. 항상 인증에 성공하는 Authorizer를 이용하는 Config&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// newBasicAuthConfigAlwaysAllow 는 언제나 인증에 성공하는 Authorizer를
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 이용하는 Config를 만듭니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">newBasicAuthConfigAlwaysAllow&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">basicauth&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Config&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">basicauth&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Config&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Authorizer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">username&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">password&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">basicauth&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nf">newBasicAuthConfigAlwaysAllow&lt;/span>&lt;span class="p">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl"># curl -u username:password는 해당 username과 password로 Basic auth를 하는 요청을 보냅니다.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ curl -u wrong:wrong localhost:8000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Welcome!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ curl -u foo:bar localhost:8000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Welcome!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Authorizer가 username과 password가 어떻든 true를 반환해 인증에 성공합니다.&lt;/p>
&lt;h4 id="2-미리-정의된-유저에-대해서만-인증에-성공하는-authorizer를-이용하는-config">2. 미리 정의된 유저에 대해서만 인증에 성공하는 Authorizer를 이용하는 Config&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// newBasicAuthConfigAlwaysAllow 는 Users에 존재하는 유저 정보에 대해서만
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 인증에 성공하는 Authorizer를 이용하는 Config를 만듭니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">newBasicAuthConfigAllowOnlyAdmin&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">basicauth&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Config&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">basicauth&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Config&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Users&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">basicauth&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nf">newBasicAuthConfigAllowOnlyAdmin&lt;/span>&lt;span class="p">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl"># curl -u username:password는 해당 username과 password로 Basic auth를 하는 요청을 보냅니다.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ curl -u wrong:wrong localhost:8001
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Unauthorized
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ curl -u foo:bar localhost:8001
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Welcome!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>앞서 말했듯 Authorizer를 설정하지 않고 nil로 둘 경우 Users 맵의 데이터를 이용하는 Authorizer가 기본값으로 설정됩니다.
저는 &lt;code>username=foo, password=bar&lt;/code>인 유저 정보를 맵에 기록했기 때문에 foo:bar 요청만이 승인되는 것을 볼 수 있습니다.&lt;/p>
&lt;p>자, 이렇게 남이 작성한 미들웨어를 설정만 조금 바꿔서 이용해봤는데, 코드를 읽는 것도 그걸 바탕으로 가져다가 쓰는 것도 어렵지 않다는 걸 알게 됐군요.
이제는 직접 미들웨어를 작성해보겠습니다.&lt;/p>
&lt;h2 id="custom-middleware-작성하기">Custom middleware 작성하기&lt;/h2>
&lt;p>커스텀으로 미들웨어를 작성할 때에는 그닥 정해진 기준이 많지는 않습니다.
대부분의 미들웨어들은 Skipper 등의 개념으로(basic auth 미들웨어에선 Next라고 정의됨.) 해당 미들웨어의 기능을 실행하지 않고 넘어가는 설정이나
뭐 각종 설정들이 존재는 하지만 우리는 근본적으로 커스텀 미들웨어를 어떻게 작성하는지에 대해 궁금하니까 그 부분만 알아보겠습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">fiber&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Handler defines a function to serve HTTP requests.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Handler&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Ctx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>fiber 프레임워크에서는 middleware을 정의할 때 &lt;code>fiber.Handler&lt;/code> 라는 일종의 함수 타입을 이용합니다. 그리고 &lt;code>fiber.Handler&lt;/code>는 보통은 클로져를 이용하는 형태로 제공됩니다.
제가 볼 땐 좀 특이한 것 같은데 아마 echo도 이런 식으로 클로져를 이용해 미들웨어를 생성했던 것 같습니다. 다음과 같이 말이죠.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewMiddleware&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">config&lt;/span> &lt;span class="nx">Config&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">fiber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Handler&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// config에 기본값을 넣은 config를 클로져로 접근하려 함.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">config&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">injectDefaultValues&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 실제 미들웨어 역할을 할 함수.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// config에 클로져로 접근한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">fiber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Ctx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 다음 미들웨어(혹은 요청 핸들러)를 수행한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Next&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>근데 이런 경우는 아무래도 config를 설정해야하는 경우인 것 같고 저희는 그냥 최대한 심플하게 만들어볼게요. 목표는 Basic Auth를 거친 뒤 유저 정보가 기입된 logger를 context에 삽입해주는 것입니다.
그럼 어떤 계층에서든 &lt;code>ctx.Get(&amp;quot;logger&amp;quot;)&lt;/code> 등을 이용해 logger에 편리하게 접근할 수 있죠! log 프레임워크는 &lt;code>sirupsen/logrus&lt;/code> 를 이용하겠습니다.
컬러도 잘 나오고 확장성도 좋은 걸로 알고 있어요!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">injectLoggerMiddleware&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">fiber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Ctx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// basic auth middleware가 주입한 username을 이용합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">username&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Locals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">logger&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">username&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// context에 logger라는 키로 유저 정보를 주입한 logger를 전달합니다!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Locals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;logger&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">logger&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 다음 미들웨어(혹은 요청 핸들러)를 수행합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Next&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// injectLoggerMiddleware는 basicauth가 context에 주입한 username을 이용하기 때문에
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 꼭 basicauth middleware 다음에 수행되어야합니다!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">basicauth&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nf">newBasicAuthConfigAllowOnlyAdmin&lt;/span>&lt;span class="p">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">injectLoggerMiddleware&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 요청 핸들러는 이런 식으로 middleware에게 주입받은 logger를 context에서 꺼내쓸 수 있습니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">fiber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Ctx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">logger&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Locals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;logger&amp;#34;&lt;/span>&lt;span class="p">).(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Entry&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;유저가 접속했습니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SendString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Welcome!\n&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-middleware/log.png"
width="872"
height="105"
srcset="https://umi0410.github.io/blog/golang/how-to-backend-in-go-middleware/log_hu6da6c55463c6a62988b186d685cd2c7c_23812_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-middleware/log_hu6da6c55463c6a62988b186d685cd2c7c_23812_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="log.png"
class="gallery-image"
data-flex-grow="830"
data-flex-basis="1993px"
>&lt;/p>
&lt;p>그럼 다음과 같이 Basic Auth를 통해 각각 다른 유저로 요청을 보내면 해당 요청을 처리하는 동안은 해당 context 속의 logger을 이용해 로그를 남길 수 있는 걸 볼 수 있습니다.
이렇게 정리해보니 golang에서도 middleware를 작성하는 게 그리 어렵지 않네요~!&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>&lt;code>echo&lt;/code> 프레임워크를 쓰면서는 미들웨어를 작성할 때 좀 애를 먹었던 기억이 있는데, 막상 &lt;code>fiber&lt;/code>로 미들웨어를 작성해보니
생각보다 많이 직관적이고 쉬워서 좀 놀랐습니다. &lt;em>(사실 글을 쓸 필요가 없었을지도..?)&lt;/em> 그래도 Go로 작성된 한글 자료도 많아졌으면 좋겠고,
누군가는 &lt;code>fiber&lt;/code> 미들웨어를 작성하는 방법이 좀 이해되지 않고 어려우실 수 있으니 도움이 될 수 있으면 좋겠습니다 ㅎㅎ
다음엔 서버 개발에 있어 또 하나의 중요한 점인! 에러 핸들링에 대해 알아보겠습니다! 감사합니다.&lt;/p>
&lt;h2 id="참고">참고&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/gofiber/fiber/issues/338" target="_blank" rel="noopener"
>Guidelines for creating Middleware - fiber Github Issue&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/gofiber/fiber/tree/master/middleware" target="_blank" rel="noopener"
>Fiber middleware&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.gofiber.io/guide/error-handling" target="_blank" rel="noopener"
>Fiber error handling&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.redhat.com/ko/topics/middleware/what-is-middleware" target="_blank" rel="noopener"
>Redhat - 미들웨어란&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Golang으로 백엔드 개발하기 - 3. 웹 애플리케이션 개발해보기 (feat. fiber)</title><link>https://umi0410.github.io/blog/golang/how-to-backend-in-go-webapp/</link><pubDate>Fri, 13 Aug 2021 12:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/how-to-backend-in-go-webapp/</guid><description>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-webapp/output.png" alt="Featured image of post Golang으로 백엔드 개발하기 - 3. 웹 애플리케이션 개발해보기 (feat. fiber)" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>이번에는 Go언어에서 &lt;strong>유명한 웹 프레임워크를 비교&lt;/strong>해보고 간단하게 &lt;strong>Pingpong 서버를 개발&lt;/strong>해보겠습니다.
다만 &amp;ldquo;&lt;em>Golang으로 백엔드 개발하기&lt;/em>&amp;ldquo;를 주제로 글을 쓰면서 주 목적으로 했던 것은 개발하면서 계속 궁금했지만 어딘가에서 뚜렷한 설명을 찾아보기 힘들었던 내용들을
다뤄보고자하는 것이었기 때문에 이번 주제는 그닥 주 목적에 해당하는 주제는 아니므로 이번엔 아주 가~볍게 훑어보고 넘어가겠습니다.
왜냐하면 웹 프레임워크를 사용하는 것은 해당 웹프레임워크의 문서나 이런 저런 블로그들에 이미 너무도 많이 자료가 존재하기 때문입니다.&lt;/p>
&lt;h2 id="golang으로-웹-애플리케이션을-개발하는-방법들">Golang으로 웹 애플리케이션을 개발하는 방법들&lt;/h2>
&lt;p>보통 다른 언어 같은 경우 Java에서는 Spring MVC 혹은 Spring WebFlux, Python은 FastApi, Flask, Django, Node.js는 Express, nest, koa처럼
각 언어마다 손에 꼽을 만한 대표적인 웹 프레임워크들이 있는 것 같은데 Go는 그렇지가 않습니다. Go는 잘 나가는 웹 프레임워크들이 너무도 다양하게 존재합니다.
아주 아주 다양한 프레임워크가 존재하지만 그닥 우위가 뚜렷하진 않습니다.
어떤 한 기술이 생태계를 독점해버리거나 그 기술만이 강요되는 일 없이 서로(프레임워크간)가 경쟁하며 좋은 기술로 나아가는 게 장점이 될 수도 있고,
너무 프레임워크가 다양해서 선택하기 곤란하다는 것이 단점이 될 수도 있을 것 같습니다. 커뮤니티가 한 데 집중된다면 더 버그 픽스하기 쉬울텐데 그런 면에서는
조금 아쉽기도 합니다.&lt;/p>
&lt;p>다만 한 가지 흐름이 있다면 Python을 사용하는 개발자분들이 &lt;code>&amp;quot;Pythonic&amp;quot;&lt;/code>이라는 철학(?)을 굉장히 좋아하시듯 Go를 사용하는 개발자분들은 &lt;code>&amp;quot;Go스러움&amp;quot;&lt;/code>을 굉장히 좋아하는 경향이 있어
어떤 프레임워크가 계속해서 인기를 끄는 데에는 &lt;code>&amp;quot;Go스러운가&amp;quot;&lt;/code>가 큰 영향을 끼치는 것 같습니다.
아마 Go스러움이란 다음과 같은 특징들을 얘기하는 것일 겁니다.&lt;/p>
&lt;ul>
&lt;li>타입을 통해 안정적으로 개발한다. (interface{} 와 같은 빈 인터페이스를 이용하면서 type assertion이나 reflect를 이용하는 것을 지양)&lt;/li>
&lt;li>가볍고 간결하다. (Spring MVC와 같은 방식은 지양. 프레임워크에서 쓸 데 없이 많은 걸 지원하면서 서비스가 무거워지는 것을 지양.)&lt;/li>
&lt;li>빠르다.&lt;/li>
&lt;li>동시성을 goroutine과 channel을 이용해 잘 사용한다. (근데 이 부분은 web framework을 고를 때는 영향을 끼치지 않는 것 같고 개발자의 코드에 대한 go스러움일 것입니다.)&lt;/li>
&lt;/ul>
&lt;h2 id="프레임워크-추천">프레임워크 추천&lt;/h2>
&lt;ul>
&lt;li>&lt;code>net/http&lt;/code> - Go 표준(빌트인) 패키지&lt;/li>
&lt;li>&lt;code>github.com/labstack/echo&lt;/code> - 스타 20k&lt;/li>
&lt;li>&lt;code>github.com/gofiber/fiber&lt;/code> - ❤️ 스타 14.6k&lt;/li>
&lt;li>&lt;code>github.com/gin-gonic/gin&lt;/code> - 스타 50k&lt;/li>
&lt;li>&lt;code>github.com/beego/beego&lt;/code> - 스타 26k&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>이런 특징들을 가진 웹프레임워크로 한국에서 많이 쓰이는 듯한 프레임워크들은 &lt;code>fiber&lt;/code>, &lt;code>echo&lt;/code>, &lt;code>gin&lt;/code> 이 세 친구들인 것 같습니다.
저도 다 깊이 있게 써본 건 아니지만 그 동안 리서치 해온 것들이나 한국 Go 커뮤니티에서 오가는 이런 저런 내용들을 참고했을 때의 의견은 다음과 같습니다.
&lt;code>gin&lt;/code>은 오랜 시간 개발되어 온 프로젝트이고 꾸준히 스타도 많지만 아마 좀 &amp;lsquo;무겁다. 느리다.&amp;rsquo; 이런 얘기가 있었던 것 같습니다. &lt;code>echo&lt;/code>는 간결하게 사용할 수 있으면서 필요한 기능들은 다 있고 개발이 활발하게 이루어지고 있는 듯한 느낌이지만
문서가 그닥 친절하지 않고 썩 빠른 건 아니다는 생각이 듭니다. 문서가 거의 그냥 예시 코드 작성한 정도입니다. 그래도 Go 언어 특성상 남의 코드를 까서 봐도 해석하기 쉽고 주석도 잘 달려있는 편이라 큰 어려움은 없었습니다.
&lt;code>fiber&lt;/code>는 요즘 가장 핫한 프레임워크 같습니다. 빠르게 깃헙 스타 수도 늘어나고 있고 fasthttp를 사용해서인지 아마 월등히 빠른 것으로 알려져있습니다. 게다가 문서도 너무 잘 작성되어있고 개발도 활발히 이루어지고 있습니다.&lt;/p>
&lt;p>이러한 이유로 저는 현재 &lt;code>fiber&lt;/code>와 &lt;code>echo&lt;/code>를 이용 중이고 추후 새로운 서비스를 개발해야한다면 &lt;code>fiber&lt;/code>를 이용할 예정입니다! (&lt;em>사실 gin이 스타는 꾸준히 많이 늘어나고 있고 스타 수 자체도 1타인데 왜 한국에서 많이들 사용하지 않는지는 잘 모르겠습니다. 아시는 분이나 gin을 사용해보신 분 있으시면 의견 부탁드립니다..!&lt;/em>)&lt;/p>
&lt;h2 id="예시-코드">예시 코드&lt;/h2>
&lt;p>간단하게 &lt;code>net/http&lt;/code> 나 &lt;code>fiber&lt;/code> 중 하나를 이용해 &lt;code>GET /ping&lt;/code>에 응답하는 웹 애플리케이션을 만들어보았으니 참고하실 분들은 참고하시길 바랍니다.
웬만하면 공식 문서의 Getting started나 Example들을 보시는 걸 추천드립니다.&lt;/p>
&lt;p>다른 글들과 마찬가지로 예시 코드는 &lt;code>https://github.com/umi0410/how-to-backend-in-go&lt;/code>의 webapp 디렉토리에 업로드 해두겠습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;flag&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;github.com/gofiber/fiber/v2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">framework&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">port&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;p&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8888&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;서버가 Listen할 port 번호를 입력해주세요.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Parse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Args&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;하나의 인자를 전달해 framework를 정의해주세요. (e.g. http, echo, fiber)&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">framework&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Arg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="nx">framework&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;http&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">RunNewHttpServer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;fiber&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">RunNewFiberServer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;지원하지 않는 framework 입니다.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">RunNewHttpServer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">addr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;:%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">port&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Server is listening %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">port&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandleFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/ping&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ResponseWriter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">w&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;PingPong by net/http\n&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ListenAndServe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">RunNewFiberServer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">addr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;:%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">port&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">fiber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/ping&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">fiber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Ctx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SendString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Pingpong by fiber\n&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Server is listening %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">port&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">addr&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-webapp/output.png"
width="456"
height="137"
srcset="https://umi0410.github.io/blog/golang/how-to-backend-in-go-webapp/output_hu537a11d34916ac1c2def7909b69ddbc5_22456_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-webapp/output_hu537a11d34916ac1c2def7909b69ddbc5_22456_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="output.png"
class="gallery-image"
data-flex-grow="332"
data-flex-basis="798px"
>&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>간단하게 Go언어에서 유명한 프레임워크들을 비교해보고 Pingpong 서버 예제 코드를 작성해봤습니다.
앞서 언급드렸듯이 아무래도 웹 프레임워크로 hello world를 찍는 수준의 서버를 작성하는 내용은 이미 어느 곳에서든 찾아볼 수 있기 때문에
이번 글은 가볍게 마무리하고 이런 저런 프레임워크들의 공식 문서를 보시는 걸 추천드립니다 ㅎㅎ
다음 글은 &lt;code>미들웨어 작성&lt;/code>이나 &lt;code>에러 처리&lt;/code>에 대해 다뤄볼 예정인데 이번 글 보다 재밌을 것으로 예상됩니다.
&amp;lsquo;&lt;strong>에러를 어떻게 처리할까&lt;/strong>&amp;lsquo;나 &amp;lsquo;&lt;strong>미들웨어는 어떻게 작성할 수 있을까&lt;/strong>&amp;lsquo;와 같은 내용은 그닥 흔히 찾아볼 수 있는 내용은 아닌 것 같았기 때문입니다.
그럼 다음 글에서 봐요 우리~ ㅎㅎ 👋&lt;/p>
&lt;h2 id="참고">참고&lt;/h2>
&lt;ul>
&lt;li>간단한 웹 서버 (HTTP 서버) - &lt;a class="link" href="http://golang.site/go/article/111-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%9B%B9-%EC%84%9C%EB%B2%84-HTTP-%EC%84%9C%EB%B2%84" target="_blank" rel="noopener"
>http://golang.site/go/article/111-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%9B%B9-%EC%84%9C%EB%B2%84-HTTP-%EC%84%9C%EB%B2%84&lt;/a>&lt;/li>
&lt;li>Understanding Listen Ports and Addresses - &lt;a class="link" href="https://www.ateam-oracle.com/listen-addresses" target="_blank" rel="noopener"
>https://www.ateam-oracle.com/listen-addresses&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.esparkinfo.com/top-golang-web-framework-development.html" target="_blank" rel="noopener"
>https://www.esparkinfo.com/top-golang-web-framework-development.html&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.devgenius.io/best-web-framework-of-golang-in-2021-aae4b2ad9bf" target="_blank" rel="noopener"
>https://blog.devgenius.io/best-web-framework-of-golang-in-2021-aae4b2ad9bf&lt;/a>&lt;/li>
&lt;li>내가 Go 언어를 선택한 이유 - &lt;a class="link" href="https://pronist.tistory.com/67" target="_blank" rel="noopener"
>https://pronist.tistory.com/67&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Golang으로 백엔드 개발하기 - 2. 테스트 코드 작성 및 Go에서 Mocking 이용하기 (gomock, testify 이용)</title><link>https://umi0410.github.io/blog/golang/how-to-backend-in-go-testcode/</link><pubDate>Sat, 17 Jul 2021 12:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/how-to-backend-in-go-testcode/</guid><description>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-testcode/test-with-ide.png" alt="Featured image of post Golang으로 백엔드 개발하기 - 2. 테스트 코드 작성 및 Go에서 Mocking 이용하기 (gomock, testify 이용)" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>저는 &lt;code>Go 언어&lt;/code>를 공부하면서 처음으로 테스트 코드라는 것을 접하게 되었습니다.
과거에는 그저 기능을 구현하는 것에만 관심이 있었지 애플리케이션을 어떻게 계층을 나눠 설계할지,
어떻게 해야 유지 보수하기 쉬우면서 안정적인 개발을 할 수 있을지에 대한 고민을 하지 않았습니다.&lt;/p>
&lt;p>하지만 Go를 공부하면서부터는 &lt;code>클린 아키텍쳐&lt;/code>나 &lt;code>MSA&lt;/code>, &lt;code>동시성 패턴&lt;/code> 등을 비롯해 &lt;code>테스트 코드&lt;/code>에
대해서도 공부해볼 수 있었습니다.
그 중에서도 테스트 코드에 대해 공부해보며 익혔던 점들을 바탕으로 이번 글에서는
&lt;strong>Golang으로 백엔드 개발을 하면서 테스트 코드를 어떻게 작성할 수 있을지&lt;/strong>에 대해 알아보려합니다.&lt;/p>
&lt;p>본 글에서 사용된 예시 코드는 &lt;a class="link" href="https://github.com/umi0410/how-to-backend-in-go/tree/master/testcode" target="_blank" rel="noopener"
>저의 Github how-to-backend-in-go 레포지토리&lt;/a>에 업로드 해둘테니 참고하실 분들은 참고해주세요~!&lt;/p>
&lt;h2 id="tdd-test-driven-development와-유닛-테스트">TDD (Test Driven Development)와 유닛 테스트&lt;/h2>
&lt;p>사용자의 반응에 맞춰 재빠르게 대응할 수 있도록 개발 주기가 빨라지면서 &lt;code>DevOps&lt;/code> 문화 뿐만 아니라
&lt;code>TDD&lt;/code>도 많은 인기를 얻게 된 것 같습니다.
&lt;code>TDD&lt;/code>란 개발을 먼저 다~ 진행한 뒤 한 번에 배포하거나 시간 날 때 테스트 코드를 짜는 것이 아니라
우리가 개발해야할 최소한의 내용들을 검증할 수 있는 테스트 코드를 먼저 작성한 뒤 해당 테스트를 통과하는 코드를 개발해나가는 개발 방법론입니다.&lt;/p>
&lt;p>TDD에 대해 설명하자면 TDD만으로도 책 몇 권의 분량이 될 수 있고, 저 또한 TDD를 잘 아는 것은 아니기에 자세한 설명은 생략하겠습니다.
이번 글의 주된 내용은 TDD에 대해 소개하는 것보다는 &lt;strong>Golang으로 유닛 테스트를 작성&lt;/strong>하는 요령입니다.&lt;/p>
&lt;p>유닛 테스트는 다른 계층과 무관하게 독립적으로 각각의 메소드의 기능을 테스트하는 것이라고 볼 수 있겠습니다.
계층마다 해당 테스트를 통해 검증하고자 하는 주요한 내용은 다를 수 있습니다.
유닛 테스트는 주로 자신만을 테스트 하기 때문에 자기 계층의 동작을 테스트하지 다른 계층의 동작까지 테스트하진 않습니다.
또한 경우에 따라 아예 다른 계층을 실제로 이용하지 않고 모킹(Mocking)한 타입을 이용하는 경우도 있습니다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Data access layer&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>userRepository.Create(user *entity.User)&lt;/code> - 유저 테이블에 해당 데이터가 잘 저장되는지 테스트&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Business layer&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>userService.Create(ctx *fiber.Ctx, user UserCreateInput)&lt;/code> - 유저 생성 관련 비즈니스 로직을 주로 테스트.&lt;/p>
&lt;p>DB에 잘 영속화 되었는지 까지는 테스트 할 필요 없음. 이는 Data access layer에서 테스트 할 내용&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Presentation layer&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>userHandler.Craete(ctx *fiber.Ctx)&lt;/code> - 응답 코드가 바라던 대로 &lt;code>201&lt;/code> 번이 맞는지. JSON으로 잘 응답하는지&lt;/p>
&lt;p>마찬가지로 DB에 잘 영속화 되었는지까지는 테스트할 필요 없음. 이는 Data access layer에서 테스트 할 내용.&lt;/p>
&lt;p>또한 어떤 business layer의 비즈니스 로직에 대해서도 자세히 테스트 할 필요 없음. 이 또한 Business layer에서 테스트할 내용&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>참고로 &lt;strong>저는 Business layer를 위주로 테스트&lt;/strong>하고 있습니다.
Data access layer의 경우 많은 부분이 Database framework(ORM)을 통해 검증이 되었고,
Presentation layer도 Web framework들에 의해 많은 부분이 검증되었을 뿐 아니라 포스트맨 같은 도구들을 통해 확인해는 것이 더 편한 경우도 존재하기 때문입니다.
반면 Business layer의 동작은 매우 중요하고, 테스트 코드 없이 매번 수작업으로 그 동작을 검증하는 것은 매우 번거롭기 때문입니다.&lt;/p>
&lt;p>(계층이나 관심사를 어떻게 나누냐에 따라 Business layer는 다양하게 불리는 것 같습니다. 예를 들어 내부 계층, 도메인 계층, 코어 로직 계층 등등으로 불리기도 합니다.)&lt;/p>
&lt;h2 id="unit-test를-도입하기-전에-알아두면-좋은-것들">Unit test를 도입하기 전에 알아두면 좋은 것들&lt;/h2>
&lt;ol>
&lt;li>유연성을 위한 의존성 주입 및 변수 초기화 방법&lt;/li>
&lt;li>mocking에 대하여&lt;/li>
&lt;li>assert 구문 이용&lt;/li>
&lt;/ol>
&lt;p>Spring을 바탕으로 개발하는 경우 JUnit이라는 테스트 프레임워크를 주로 이용하고 이를 통해 테스트하는 방식이 거의 정형화 되어있는 것 같습니다. 하지만 Golang은 그닥 테스트 코드를 작성하는 형태가 정형화되어있지는 않습니다. 하지만 어떤 언어나 프레임워크를 통해 유닛 테스트 코드를 사용하든 위의 세 가지 항목들을 어떻게 이용할 지 알아야할 것입니다.&lt;/p>
&lt;h3 id="1-유연성을-위한-의존성-주입-및-변수-초기화-방법">1. 유연성을 위한 의존성 주입 및 변수 초기화 방법&lt;/h3>
&lt;p>어떠한 모듈이 자신의 멤버 변수들을 내부적으로 생성하는 것이 아니라 외부에서 주입 받는 형태인 &lt;code>의존성 주입&lt;/code>은 유연한 의존성 관리를 위해 권장됩니다. 예를 들어 User에 대한 도메인/비즈니스 로직을 실행하며 UserRepository를 이용해 User를 영속적으로 저장하기도 하는 UserService가 UserRepository에 의존하는 경우를 살펴봅시다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 1. 의존성 주입 형태 - Good
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewUserService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">userRepository&lt;/span> &lt;span class="nx">UserRepository&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">UserService&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">UserService&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">userRepository&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">userRepository&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 2. 의존성을 주입하지 않는 형태 - Bad
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewUserServiceWithoutInjection&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">client&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UserClient&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">UserService&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">UserService&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">userRepository&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">NewUserRepository&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">client&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>첫 번째 - 의존성 주입 형태&lt;/strong>는 테스트 하는 경우나 개발 환경에 따라 유동적으로 적절한 UserService가 이용할 UserRepository를 주입받을 수 있습니다. 즉 실제로 &lt;strong>API 서버를 구동시킬 때에는 &lt;code>NewUserService(userRepository UserRepository)&lt;/code> 메소드에 실제로 DB를 이용하는 Repository인 &lt;code>UserRepositoryImpl&lt;/code> 을 주입하고, 유닛 테스트를 수행할 때에는 모킹한 타입인 &lt;code>MockUserRepository&lt;/code>를 주입&lt;/strong>하는 것입니다.&lt;/p>
&lt;p>&lt;strong>두 번째 - 의존성을 주입하지 않는 형태&lt;/strong>는 자신이 의존하는 UserRepository가 이미 &lt;code>NewUserServiceByItSelf&lt;/code>라는 메소드에서 &lt;code>NewUserRepository&lt;/code> 라는 메소드를 통해 특정 UserRepository를 이용하도록 정의되어있기 때문에 Mocking을 적용하기도 힘들고, 만약 다른 모듈들 또한 UserRepository를 이용하는 경우 Singleton으로 이용하지 못하고 여러 UserRepository가 생성될 수도 있습니다. 사실 ent.UserClient라는 DB Client 또한 주입받지 않고 내부적으로 새로 생성해야 의존성을 완전히 주입받지 않는 형태이겠지만 그런 방식은 너무도 구현하기 번거로워 편의상 DB client는 주입받았습니다. 이것만 봐도 개발하는 형태가 일관되지 못하고 불편한 사항이 많다는 것을 알 수 있죠.&lt;/p>
&lt;h3 id="2-mocking에-대하여">2. Mocking에 대하여&lt;/h3>
&lt;p>&lt;code>모킹&lt;/code>이란 실제로 서버가 실행될 때 사용하는 모듈이 아닌 가짜 모듈을 이용하는 기법입니다. 앞에서 잠깐 언급했듯이 종종 테스트 코드 작성 시에 종종 Mocking이 이용됩니다. 의존성 주입 패턴을 통해 테스트 코드에서는 실제 type이 아닌 Mocking type을 유동적으로 주입할 수 있습니다. 잘 와닿지 않을 수 있는데 예를 들어 UserService의 비즈니스 룰과 로직이 잘 동작하는지를 확인할 때 Data access layer의 동작까지 테스트하고 싶지 않을 수 있습니다. 이 경우 Data access layer의 모듈을 가짜 타입으로 모킹합니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">MockUserRepository&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="nx">MockUserRepository&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">UserCreateInput&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">ent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">ent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Password&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Password&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">TestUserService_Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 해당 이름의 유저가 있는지 확인
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">NewUserService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">MockUserRepository&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">UserCreateInput&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;jinsu_umi&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Jinsu Park&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Password&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;123123123&amp;#34;&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">assert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NoError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이런 식으로 MockUserRepository 타입에서는 Create 메소드가 직접 DB에 유저를 영속화하는 작업을 생략한 뒤 그럴싸한 리턴값을 리턴하도록만 구현함으로써 UserRepsotiroy를 모킹하는 것입니다.&lt;/p>
&lt;p>하지만 이렇게 수작업으로 Mock type을 매번 정의하는 것은 귀찮을 수 있죠. 따라서 이번 글의 뒤에서는 mocking framework들에 대해서도 정리해보겠습니다.&lt;/p>
&lt;blockquote>
&lt;p>종종 Stub과 Mock에 대해 혼동이 올 수 있습니다. 기본적으로 실제 모듈이 아닌 가짜 모듈을 이용하는 기법 자체를 mocking이라고 합니다. 이를 좀 더 세분화해서 봤을 땐 stub은 단순히 테스트를 간단히 통과시키기 위해 실제 모듈을 대체하는 가짜 객체를 말하고 mock은 예상값까지 비교를 하고, 때때로 테스트를 실패시키기도 하는 더 스마트한 stub이라고 볼 수 있다고 합니다.&lt;/p>
&lt;p>참고: &lt;a class="link" href="https://stackoverflow.com/questions/3459287/whats-the-difference-between-a-mock-stub" target="_blank" rel="noopener"
>https://stackoverflow.com/questions/3459287/whats-the-difference-between-a-mock-stub&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="3-assert-구문-이용하기">3. assert 구문 이용하기&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">TestUserService_Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 해당 이름의 유저가 있는지 확인
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">NewUserService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">MockUserRepository&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">t&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">UserCreateInput&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;jinsu_umi&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Jinsu Park&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Password&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;123123123&amp;#34;&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 이런 식으로 로그를 통해 하나 하나 테스트 결과를 확인하는 것이 아니라
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//t.Log(&amp;#34;에러가 존재하지 않아야합니다.&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//t.Log(&amp;#34;err == nil 인지 확인하십시오. err == nil: &amp;#34; , err == nil)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// assert를 이용해 자동으로 성공/실패를 판단합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">assert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NoError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>assert&lt;/code> 라는 방식을 통한 테스트 케이스 검증은 다양한 테스트 프레임워크에서 사용됩니다. 눈으로 하나 하나 테스트 케이스들의 결과를 확인하는 것이 아니라 assert라는 방식을 통해 자동으로 테스트의 성공/실패를 판단하는 것입니다. 저는 주로 &lt;code>github.com/stretchr/testify&lt;/code> 패키지의 &lt;code>assert&lt;/code> 메소드를 이용하고 있습니다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-testcode/test-output.png"
width="1251"
height="932"
srcset="https://umi0410.github.io/blog/golang/how-to-backend-in-go-testcode/test-output_hufe5dd54340b2f486cdb532c721c19e5f_159105_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-testcode/test-output_hufe5dd54340b2f486cdb532c721c19e5f_159105_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="test-output.png"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;p>assert를 통해 테스트의 성공/실패 여부를 판단하면 성공시에는 크게 stdout을 확인할 필요 없고, 실패한 경우에는 그것에 대한 에러 메시지들만 확인하면 되기 때문에 편리합니다. 만약 로그나 프린트 문을 통해 수작업으로 테스트 결과를 판단해야한다면&amp;hellip; 매번 테스트마다 너무 불편하겠죠?!&lt;/p>
&lt;h2 id="golang에서-mocking-이용하기">Golang에서 Mocking 이용하기&lt;/h2>
&lt;p>이번엔 Golang에서 Mocking을 이용하는 방법을 좀 더 자세히 알아보겠습니다. golang에서 Mocking을 이용하는 방법은 크게 3가지로 나눌 수 있을 것 같습니다.&lt;/p>
&lt;ol>
&lt;li>직접 Mock type 구현하기&lt;/li>
&lt;li>&lt;code>golang/mock&lt;/code> 즉 &lt;code>gomock&lt;/code> 프레임워크 이용하기&lt;/li>
&lt;li>&lt;code>stretchr/testify/mock&lt;/code> 프레임워크 이용하기&lt;/li>
&lt;/ol>
&lt;p>자바의 경우 따로 미리 mock 타입(즉 가짜 타입)을 작성해놓지 않더라도 그리고 기존 타입이 interface가 아닌 concrete한 일반 class이더라도 상속 혹은 프록시를 통해 mock 타입을 이용할 수 있습니다. 반면 Golang은 투명한 동작과 엄격한 타입이 특징인 만큼 테스트 진행 시에 자동으로 적절한 mock 타입을 생성하거나 프록시를 이용하거나 interface가 아닌 struct에 다른 type의 struct를 할당할 수도 없습니다. 따라서 Go에서 mocking을 이용하기 위해서는 아래와 같은 제약 조건들이 존재합니다. 이러한 점을 생각해본다면 Go에서는 Mocking을 이용하는 것은 다른 언어에 비해 쉬운 편은 아닌 것처럼 느껴지기도 합니다.&lt;/p>
&lt;ul>
&lt;li>interface로 선언된 변수에만 mock type을 할당할 수 있다.&lt;/li>
&lt;li>mock type을 직접 정의하거나 mocking framework을 이용해 코드를 생성한다.(테스트 진행 시 자동이 아님. 직접 우리가 실행시켜야함.)&lt;/li>
&lt;/ul>
&lt;p>주로 1번(직접 Mock type 구현하기) 같은 경우는 이 mock 타입이 우리 서비스에서 자주 사용될 것이고 그냥 예상치못한 call이나 missing call(호출되길 예상했지만 호출되지 않는 경우)에 대한 대응이 필요 없는 경우 사용하면 좋을 것 같습니다. 반면 2, 3번은 이번 테스트를 위한 1회성 mocking인 경우 많이 사용되기도 하고 mock 타입의 메소드에 대한 unexpected call이나 missing call 에 대한 대응을 수행하고자하는 경우 이용할 수 있습니다.&lt;/p>
&lt;p>추가적으로 1번 방식이 아닌 2, 3 번 방식처럼 모킹 프레임워크를 이용하는 게 더 편했던 적이 있는데요. 바로 메소드가 여러 개 존재하는 타입을 모킹할 때 입니다. Golang이 지향하는 방향 자체가 interface는 많은 메소드를 갖지 않는다는 것이긴 하지만 뭐.. 경우에 따라 메소드가 많아질 수도 있죠 ㅎㅎ. interface를 모킹하기 위해 별로 테스트 시에 필요도 없는 메소드들을 구현하는 것은 꽤나 귀찮습니다. 하지만 mocking 프레임워크들을 이용하면 기본적으로 모킹하려는 interface들의 메소드들은 모두 구현되고, 우리는 필요한 경우에만 추가적으로 구현을 해나가는 형태이므로 모킹 프레임워크를 이용하는 것이 편리할 수 있습니다.&lt;/p>
&lt;p>반면 mocking 프레임워크를 이용할 때의 단점은 프레임워크 사용법을 익혀야한다는 것이나 내가 직접 작성하지 않은 코드가 많이 생성된다는 점이 되겠네요. 그럼 이제 &lt;code>gomock&lt;/code>과 &lt;code>testify/mock&lt;/code>을 비교해보겠습니다. &lt;a class="link" href="https://blog.codecentric.de/2019/07/gomock-vs-testify/" target="_blank" rel="noopener"
>&amp;ldquo;GoMock vs. Testify: Mocking frameworks for Go&amp;rdquo; - codecentric blog&lt;/a>에도 내용이 잘 정리되어있으니 참고해보세요.&lt;/p>
&lt;h3 id="golang-mocking-프레임워크-gomock-vs-testifymock-비교">Golang mocking 프레임워크 gomock vs testify/mock 비교&lt;/h3>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-testcode/star-comparison.png"
width="806"
height="585"
srcset="https://umi0410.github.io/blog/golang/how-to-backend-in-go-testcode/star-comparison_hu3121147bea7725a070fb77a748a94b6d_46090_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-testcode/star-comparison_hu3121147bea7725a070fb77a748a94b6d_46090_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="star-comparison.png"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;p>golang에서 직접 제작하는 &lt;code>gomock&lt;/code>과 &lt;code>stretchr/testify&lt;/code>라는 유명한 테스트 관련 레포지토리의 하위 패키지인 &lt;code>testify/mock&lt;/code> 은 Golang에서 사용할 수 있는 가장 유명한 모킹 프레임워크들입니다. 깃헙 스타만 놓고 봤을 때에는 testify가 훨씬 많지만 testify는 다른 테스트를 위한 패키지들도 함께 있어서 정확히 비교는 안되겠네요.&lt;/p>
&lt;p>저도 두 프레임워크의 특징에 대해 정확히는 모르지만 간단히 아는 선에서 주관적인 추천을 하자면 &lt;code>gomock&lt;/code>을 추천드리겠습니다. &lt;code>testify/mock&lt;/code>에 비해 원본 interface 타입을 바탕으로 모킹 메소드를 좀 더 safe하게 정의할 수 있었던 것 같습니다. 다만 정말 뭘 쓰든 상관 없을 것 같습니다. 각자 조금의 장단점은 있지만 뭐 하나가 특출나거나 모자란 느낌은 아닙니다. 두 프레임워크의 특징을 아래와 같이 정리해봤습니다. (참고로 알아보니 제가 좋아하는 서비스인 &lt;code>ArgoCD&lt;/code> (K8s의 GitOps 방식의 배포 도구)에서는 &lt;code>testify/mock&lt;/code>을 이용하더군요&amp;hellip; T.T)&lt;/p>
&lt;ul>
&lt;li>
&lt;p>코드 생성 도구를 이용해 원하는 interface의 mock type을 정의, 구현하는 코드를 생성하는 것이 &lt;code>testify/mock&lt;/code>이 좀 더 편함.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>testify/mock&lt;/code> 이 좀 더 메소드를 mocking하고 expectation을 설정하는 게 직관적이고 간결하다. 이 부분이 &lt;code>testify/mock&lt;/code>의 큰 장점인듯 함.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>testify/mock&lt;/code> 의 코드 생성 도구인 &lt;code>mockery&lt;/code>가 &lt;code>gomock&lt;/code>의 코드 생성 도구인 &lt;code>mockgen&lt;/code>보다 쓰기 편하다는 의견이 있음. (본인은 잘 체감 못하겠음)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>gomock&lt;/code>이 좀 더 type safe하게 모킹 코드를 작성할 수 있다. 일단 메소드가 gomock은 타입을 기반으로 자동완성 되지만 &lt;code>testify/mock&lt;/code>은 메소드 명을 문자열로 받음. 이 부분이 gomock의 큰 장점인듯 함.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>두 프레임워크 모두 unexpected call이나 missing call, 특정 횟수 만큼 call 등등의 기능들은 제공하는 것 같음. 단 조사한 바로는 &lt;code>testify/mock&lt;/code>은 모킹 메소드 구현 시에 인자 값을 이용할 수 없음.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>그럼 말로만 설명하지 말고 코드로 한 번 간단하게 비교드리겠습니다!&lt;/p>
&lt;h3 id="1-직접-mock-타입-작성">1. 직접 mock 타입 작성&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">ManualMockUserRepository&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ManualMockUserRepository&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">UserCreateInput&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">ent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;직접 Mocking. Args: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">ent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">TestUserService_CreateWithManualMock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">s&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">NewUserService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ManualMockUserRepository&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">UserCreateInput&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;jinsu_umi&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Jinsu Park&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Password&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;123123123&amp;#34;&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 이런 식으로 로그를 통해 하나 하나 테스트 결과를 확인하는 것이 아니라
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//t.Log(&amp;#34;에러가 존재하지 않아야합니다.&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//t.Log(&amp;#34;err == nil 인지 확인하십시오. err == nil: &amp;#34; , err == nil)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// assert를 이용해 자동으로 성공/실패를 판단하십시오.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">assert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NoError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>앞서 말씀드린 대로 직접 mock type을 작성하는 경우입니다. 정말 정말 safe하지만 테스트 케이스마다 메소드가 return하는 값이나 동작을 다르게 하고 싶다면 코드가 복잡해지거나 한 interface에 대한 다양한 mock type을 여러 개 작성해야할 수 있습니다.&lt;/p>
&lt;h3 id="2-testifymock-이용">2. &lt;code>testify/mock&lt;/code> 이용&lt;/h3>
&lt;blockquote>
&lt;p>testify/mock을 이용하는 경우 &lt;a class="link" href="https://github.com/vektra/mockery" target="_blank" rel="noopener"
>mockery&lt;/a>라고 하는 코드 생성 CLI 도구를 이용하면 편리합니다. 본 코드는 mockery를 통해 생성된 mock 타입을 이용했습니다.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">TestUserService_CreateWithMockery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mockUserRepository&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">MockUserRepository&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// method를 문자열 자체로 설정해야해서 safe하지 않음.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">mockUserRepository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">On&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Create&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">mock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Anything&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span> &lt;span class="nx">mock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Arguments&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;testify/mock과 mockery를 이용한 Mocking. Args: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}).&lt;/span>&lt;span class="nf">Return&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">ent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 해당 이름의 유저가 있는지 확인
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">NewUserService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mockUserRepository&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">UserCreateInput&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;jinsu_umi&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Jinsu Park&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Password&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;123123123&amp;#34;&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">assert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NoError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>앞서 말씀드린 대로 메소드 명이 unsafe하게 &lt;code>.On(methodName string, ...)&lt;/code>의 형태로 문자열을 이용하고 있습니다. argument 또한 단순히 mock.Arguments를 통해 얻을 수 있고 이에 대해 &lt;code>.Get&lt;/code>을 통해 얻는 값은 &lt;code>interface{}&lt;/code>이기 때문에 type assertion을 거쳐야만 내부 값을 복사해서 이용할 수 있습니다.&lt;/p>
&lt;h3 id="3-gomock-이용">3. &lt;code>gomock&lt;/code> 이용&lt;/h3>
&lt;blockquote>
&lt;p>gomock은 mockgen(참고: &lt;a class="link" href="https://github.com/golang/mock" target="_blank" rel="noopener"
>https://github.com/golang/mock&lt;/a>)이라는 코드 생성 CLI 도구를 이용합니다. 본 코드는 mockgen을 통해 생성된 mock 타입을 이용했습니다.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">TestUserService_CreateWithMockgen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// gomock controller을 만들고 Finish 시켜주는 등의 불편함 존재.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">ctrl&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">gomock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewController&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Finish&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mockUserRepository&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">NewGomockRepository&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctrl&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 원래의 type을 기반으로 method가 safe하게 제공됨.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">mockUserRepository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">EXPECT&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">gomock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Any&lt;/span>&lt;span class="p">()).&lt;/span>&lt;span class="nf">DoAndReturn&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">UserCreateInput&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">ent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Gomock을 이용한 Mocking. Args: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">ent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 해당 이름의 유저가 있는지 확인
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">NewUserService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mockUserRepository&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">UserCreateInput&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;jinsu_umi&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Jinsu Park&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Password&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;123123123&amp;#34;&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">assert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NoError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>gomock controller라는 녀석을 생성해주고 finish 시켜줘야하는 불편함이 생겨났습니다만 모킹하고자 하는 메소드를 safe하게 제공받을 수 있습니다. &lt;code>.DoAndReturun()&lt;/code> 메소드의 인자로서 어떤 함수로 모킹할 지를 전달하는데 사실 이 함수 자체를 interface{}가 받기 때문에 인자는 제가 정의하기 나름이라 원본 interface와 싱크되지는 않는 약간의 아쉬움이 존재합니다. 하지만 &lt;code>testify/mock&lt;/code>처럼 args의 순서에 따라 &lt;code>.Get()&lt;/code>을 한 뒤 &lt;code>interface{}&lt;/code> 타입의 각각의 인자들을 type assertion할 필요도 없고 가독성이 더 좋다고 생각합니다.&lt;/p>
&lt;h2 id="테스트-코드-작성해보기">테스트 코드 작성해보기&lt;/h2>
&lt;ol>
&lt;li>&lt;code>*_test.go&lt;/code> 형태의 파일 생성하기&lt;/li>
&lt;li>func &lt;code>Test* (t *testing.T){...}&lt;/code> 형태의 테스트 케이스 작성하기&lt;/li>
&lt;li>로그나 Print문이 아닌 assert 문을 이용해 테스트 성공/실패 판단을 자동화하기&lt;/li>
&lt;/ol>
&lt;p>Golang에서 테스트 코드를 하기 위해선 우선 위의 3가지 사항만 알아두면 됩니다.&lt;/p>
&lt;p>그리고 추가적으로 golang에선 테스트 케이스 속에 nested된 테스트 케이스를 얼마든지 집어넣을 수 있습니다. 너무너무 편리하죠~! 그럼 이번에도 코드로 예시를 보여드리겠습니다. User에 대한 Domain/Business layer에서의 도메인 룰을 테스트하는 코드입니다. Data access 계층을 통해 User가 영속적으로 잘 저장되었는지보다는 도메인 룰을 테스트하려는 목적이기 때문에 Data access 계층(Repository)에 대해서는 모킹을 적용했습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// nested test case를 작성하고 싶은 경우. 이렇게 작성하십시오.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">TestA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;A-a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;A-a-1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// service_test.go 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">TestUserService_유저_생성&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// repository mocking
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">ctrl&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">gomock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewController&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">ctrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Finish&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mockUserRepository&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">NewGomockRepository&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctrl&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 원래의 type을 기반으로 method가 safe하게 제공됨.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">mockUserRepository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">EXPECT&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">gomock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Any&lt;/span>&lt;span class="p">()).&lt;/span>&lt;span class="nf">DoAndReturn&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">UserCreateInput&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">ent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Gomock을 이용한 Mocking. Args: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">ent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 해당 이름의 유저가 있는지 확인
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">NewUserService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mockUserRepository&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;성공&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">UserCreateInput&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;jinsu_umi&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Jinsu Park&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Password&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;123123123&amp;#34;&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">assert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NoError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;에러) 너무 짧은 아이디&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">UserCreateInput&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;short&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Jinsu Park&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Password&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;123123123&amp;#34;&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">assert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ErrorIs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrInvalidUserID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">assert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ErrorIs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrInvalidValue&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;에러) 너무 긴 이름&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">UserCreateInput&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;jinsu_umi&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;니노막시무스 카이저 쏘제 쏘냐도르앤 스파르타 죽지 않아 나는 죽지않아 오오오오 나는 카이저 쏘제&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Password&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;123123123&amp;#34;&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">assert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ErrorIs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrInvalidUserName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">assert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ErrorIs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrInvalidValue&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;에러) 너무 짧은 비밀번호들&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">errorPasswords&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;123&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;abc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;a1b2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;asd&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errorPassword&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">errorPasswords&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;테스트 케이스) &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">errorPassword&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">UserCreateInput&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;jinsu_umi&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Jinsu Park&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Password&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">errorPassword&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">assert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ErrorIs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrInvalidPassword&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">assert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ErrorIs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ErrInvalidValue&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>TestUserService_유저_생성&lt;/code> 이라는 테스트 케이스 안에 성공하는 경우와 올바르지 않은 ID나 이름, 비밀번호로 인해 에러가 발생해야하는 경우를 nested된 테스트 케이스로 작성했습니다. 특히나 비밀번호는 한 번 더 nested된 케이스를 작성했습니다. 같은 로직을 다양한 인풋을 이용해 테스트 하고 싶은 경우에는 &lt;code>errorPasswords&lt;/code> 부분처럼 인풋 혹은 결과값을 배열로 선언한 뒤 테스트 하는 경우를 종종 보게되더군요. (참고: &amp;ldquo;&lt;a class="link" href="https://blog.golang.org/subtests" target="_blank" rel="noopener"
>Using Subtests and Sub-benchmarks&lt;/a>&amp;rdquo; - Go Blog, &amp;ldquo;&lt;a class="link" href="https://github.com/uber-go/guide/blob/master/style.md" target="_blank" rel="noopener"
>Uber Go style guide&lt;/a>&amp;ldquo;의 test-tables 파트 - uber)&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-testcode/test-with-ide.png"
width="1184"
height="332"
srcset="https://umi0410.github.io/blog/golang/how-to-backend-in-go-testcode/test-with-ide_hu7b61495424919d2e1c8d663236a41b57_159980_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-testcode/test-with-ide_hu7b61495424919d2e1c8d663236a41b57_159980_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="test-with-ide.png"
class="gallery-image"
data-flex-grow="356"
data-flex-basis="855px"
>&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-testcode/run-each-test.png"
width="815"
height="505"
srcset="https://umi0410.github.io/blog/golang/how-to-backend-in-go-testcode/run-each-test_hu619b36e63953e285c6c9c2ff6f3f94e9_98540_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-testcode/run-each-test_hu619b36e63953e285c6c9c2ff6f3f94e9_98540_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="run-each-test.png"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/p>
&lt;p>게다가 GoLand를 비롯해 Go언어를 지원하는 IDE를 이용 중이시라면 높은 확률로 이렇게 편리하게 테스트를 실행하고 결과를 확인하실 수도 있습니다. 그리고 두 번째 사진에 보이듯 내부 테스트 케이스에 대한 단일 실행도 가능하다는 점~! 이제 좀 더 테스트 코드를 쉽게 이용할 수 있겠군요. ㅎㅎ&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>이번 편을 준비하면서 처음 유닛 테스트를 작성할 때 찾아봤던 자료들도 다시 한 번 읽어보고 etcd나 argocd 같은 Go로 작성된 유명 오픈 소스들은 어떻게 테스트 코드를 작성하는지도 찾아보는 등 꽤 조사를 많이 하게된 것 같습니다. 아무래도 테스트 코드라는 것이 어떠한 방향으로 테스트 코드와 개발을 설계해나갈지, 어디까지 테스트할 지와 같은 방법론적인 부분과 테스트 프레임워크 자체의 사용법, 모킹 프레임워크 사용법과 같은 약간은 Golang 특화적인 내용 등등 다양한 영역에 걸친 내용이라 쉽진 않은 것 같습니다. 그래도 이번을 기회 삼아 저도 평소에 궁금했던 mockery vs testify/mock 의 비교도 해볼 수 있었던 것 같고, mocking을 적용하는 방법에 대해 좀 더 자세히 알아볼 수 있었습니다! 감사합니다~!&lt;/p>
&lt;p>&lt;strong>예시 코드&lt;/strong>: &lt;a class="link" href="https://github.com/umi0410/how-to-backend-in-go/tree/master/testcode" target="_blank" rel="noopener"
>https://github.com/umi0410/how-to-backend-in-go/tree/master/testcode&lt;/a>&lt;/p>
&lt;h2 id="참고-자료">참고 자료&lt;/h2>
&lt;ul>
&lt;li>What&amp;rsquo;s the difference between a mock &amp;amp; stub? - &lt;a class="link" href="https://stackoverflow.com/questions/3459287/whats-the-difference-between-a-mock-stub" target="_blank" rel="noopener"
>https://stackoverflow.com/questions/3459287/whats-the-difference-between-a-mock-stub&lt;/a>&lt;/li>
&lt;li>gomock vs testify - &lt;a class="link" href="https://blog.codecentric.de/2019/07/gomock-vs-testify/" target="_blank" rel="noopener"
>https://blog.codecentric.de/2019/07/gomock-vs-testify/&lt;/a>&lt;/li>
&lt;li>mockery Github Repository - &lt;a class="link" href="https://github.com/vektra/mockery" target="_blank" rel="noopener"
>https://github.com/vektra/mockery&lt;/a>&lt;/li>
&lt;li>stretchr/testify Github Repository - &lt;a class="link" href="https://github.com/stretchr/testify" target="_blank" rel="noopener"
>https://github.com/stretchr/testify&lt;/a>&lt;/li>
&lt;li>gomock Github Repository - &lt;a class="link" href="https://github.com/golang/mock" target="_blank" rel="noopener"
>https://github.com/golang/mock&lt;/a>&lt;/li>
&lt;li>Using Subtests and Sub-benchmarks - &lt;a class="link" href="https://blog.golang.org/subtests" target="_blank" rel="noopener"
>https://blog.golang.org/subtests&lt;/a>&lt;/li>
&lt;li>uber-go Guide - &lt;a class="link" href="https://github.com/uber-go/guide/blob/master/style.md" target="_blank" rel="noopener"
>https://github.com/uber-go/guide/blob/master/style.md&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Golang으로 백엔드 개발하기 - 1. 데이터베이스 작업하기 (Ent 프레임워크 이용)</title><link>https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/</link><pubDate>Sat, 03 Jul 2021 12:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/</guid><description>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/o2m-relation.png" alt="Featured image of post Golang으로 백엔드 개발하기 - 1. 데이터베이스 작업하기 (Ent 프레임워크 이용)" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>Go 언어를 처음 시작한 지 벌써 1년이 지났다니 시간이 참 빠른 것 같습니다! Java는 Spring이라고하는 거대한 프레임워크가 자리 잡고 있어 딱히 어떤 프레임워크나 라이브러리를 사용할지에 대한 고민이 별로 필요 없었던 것 같습니다. 반면 Go 언어는 정형화된 아키텍쳐에 대한 내용이 별로 없고 프레임워크나 라이브러리의 대세도 참 빠르게 변하다보니 그게 장점이라면 장점이겠지만 이래저래 고생도 했네요.&lt;/p>
&lt;p>게다가 Go 언어는 개발 입문자들이 많이 사용하지 않는 언어라 그런지 아직 웹 백엔드 개발에 익숙하지 않은 (저처럼) 사람들을 위한 자료들은 많이 없었던 것 같습니다. 예를 들면 Java의 스프링이나 Node.js의 express, Python의 django 같은 프레임워크들은 인프런만 가봐도 A to Z로 알려주는 강의가 많죠. 하지만 Go 언어는 보통 언어 입문 내용들이 많고,
&lt;em>&lt;del>&amp;ldquo;자~! 여러분들은 어차피 개발 초보자들이 아니시잖아요? 이쯤하면 Golang을 맛보셨으니 알아서들 입맛대로 쓰십시오~!&amp;quot;&lt;/del>&lt;/em> 식으로 입문 이후의 내용은 보통 동시성 패턴에 대한 내용들일 뿐
백엔드 개발을 위한 아키텍쳐나 Unit test를 어떻게 실제로 적용하는지 같은 예시는 많이 없었습니다. 그래서 이번엔 Golang으로 웹 백엔드 개발을 하는 과정에 대해 좀 적어볼까합니다!&lt;/p>
&lt;p>이번 글은 그런 내용을 다룰 시리즈 중 첫 번째로 Golang으로 데이터베이스 작업하는 것과 관련한 내용을 담아봤습니다. 데이터베이스를 어떻게 사용하는지에 대한 세세한 내용보단 어떤 프레임워크를 추천드리고, 그 프레임워크를 사용하는 모습이 어떠한지
가볍게 쓰윽 보시면 좋을 것 같습니다.&lt;/p>
&lt;h2 id="3-layered-architecture에-대해-간단히-짚고-넘어가겠습니다">3 layered architecture에 대해 간단히 짚고 넘어가겠습니다&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Presentation layer&lt;/code> - 어떻게 데이터가 클라이언트에게 보여줄 지에 대한 작업을 담당. 클라이언트는 이 계층을 통해 상호작용한다.&lt;/li>
&lt;li>&lt;code>Business/Domain layer&lt;/code> - Presentation layer와 Data access layer의 사이에 위치해 비즈니스 룰과 그 룰을 따르는 비즈니스 로직을 구현. 보통 이 계층에 Service라고 하는 클래스(혹은 타입 등등)가 위치한다.&lt;/li>
&lt;li>&lt;code>Data Access Layer&lt;/code> - DB에 접근하는 작업을 담당. DAO(Data Access Object, repository)가 위치한다.&lt;/li>
&lt;/ul>
&lt;p>대부분의 웹 애플리케이션은 &lt;code>3 layered architecture&lt;/code>라고하는 구조로 기초로 하여 개발됩니다. 그 속에서 여러 단순 작업이나 개별적으로 개발하긴 번거로운 기능들이 존재할 수 있는데, 우리는 프레임워크나 라이브러리가 제공하는 기능들을 영리하게 가져다 씀으로서 좀 더 유지 보수 하기 쉬운 개발을 할 수 있을 것입니다.&lt;/p>
&lt;h3 id="presentation-layer">Presentation layer&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/users/:id&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">fiber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Ctx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">userId&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Params&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ... 기타 작업 생략
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;userId&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">userId&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/presentation-layer-output.png"
width="323"
height="164"
srcset="https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/presentation-layer-output_hu82c0e5805551b09a7aaeabc91ba76592_7927_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/presentation-layer-output_hu82c0e5805551b09a7aaeabc91ba76592_7927_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="presentation-layer-output.png"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="472px"
>&lt;/p>
&lt;p>&lt;em>url path variable은 어떻게 인식할 것인지, Golang의 map을 어떻게 JSON으로 직렬화할 지와 같은 로직들이 모두 프레임워크에서 제공됨.&lt;/em>&lt;/p>
&lt;p>저는 Presentation layer는 대부분 웹 프레임워크 자체나 해당 웹 프레임워크가 제공하는 형태를 따르는 핸들러 단에서 제공이 된다고 생각하고 있습니다. 예를 들어 어떻게 응답을 JSON 형태로 제공할지 HTML, XML, 이진 데이터(gRPC)와 같은 내용들 말이죠. 즉 Presentation layer에서는 우리가 그닥 개발할 것이 많지는 않습니다.&lt;/p>
&lt;h3 id="business-layer">Business layer&lt;/h3>
&lt;blockquote>
&lt;p>Domain logic과 Business logic의 차이는 어느 정도 존재하는 걸로 알고 있습니다만 3 tier로 나눴을 때는 동일한 계층으로 보겠습니다.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Domain/Business layer 코드 예시 - 우리 도메인 특정 코드들이 많아 남(우리 팀 혹은 기업이 아닌 사람들)이 만든 오픈소스로 대체하기 힘듦.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">UserService&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">updateProfileImage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">requestUser&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">imageFile&lt;/span> &lt;span class="nx">Image&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">UserResponse&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">requestUser가&lt;/span> &lt;span class="nx">인증된&lt;/span> &lt;span class="nx">유저인가&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">인증된&lt;/span> &lt;span class="nx">유저가&lt;/span> &lt;span class="nx">아니라면&lt;/span> &lt;span class="nx">어떤&lt;/span> &lt;span class="nx">에러를&lt;/span> &lt;span class="nx">리턴할&lt;/span> &lt;span class="nx">것인가&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">imageFile이&lt;/span> &lt;span class="nx">제대로&lt;/span> &lt;span class="nx">된&lt;/span> &lt;span class="nx">Image인가&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">제대로&lt;/span> &lt;span class="nx">된&lt;/span> &lt;span class="nx">Image가&lt;/span> &lt;span class="nx">아니라면&lt;/span> &lt;span class="nx">어떤&lt;/span> &lt;span class="nx">에러를&lt;/span> &lt;span class="nx">리턴할&lt;/span> &lt;span class="nx">것인가&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">imageFile을&lt;/span> &lt;span class="nx">업로드&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">업로드&lt;/span> &lt;span class="nx">과정&lt;/span> &lt;span class="nx">중&lt;/span> &lt;span class="nx">에러&lt;/span> &lt;span class="nx">발생&lt;/span> &lt;span class="nx">시&lt;/span> &lt;span class="nx">어떤&lt;/span> &lt;span class="nx">에러를&lt;/span> &lt;span class="nx">리턴할&lt;/span> &lt;span class="nx">것인가&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">유저의&lt;/span> &lt;span class="nx">친구들에게&lt;/span> &lt;span class="nx">새로운&lt;/span> &lt;span class="nx">프로필&lt;/span> &lt;span class="nx">사진&lt;/span> &lt;span class="nx">업로드에&lt;/span> &lt;span class="nx">대한&lt;/span> &lt;span class="nx">알림&lt;/span> &lt;span class="nx">발송&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span> &lt;span class="nx">등등&lt;/span> &lt;span class="nx">생략&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">생략&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>반면 &lt;code>Domain/Business layer&lt;/code>에서는 비즈니스 룰과 로직이라고 하는 우리 애플리케이션의 핵심적인 기능에 대한 구현이나 조합이 이루어지게 되는데 이 부분 타 오픈소스들로 대체되기는 힘든 부분이 많아 당연히 직접 개발하는 경우가 많습니다. 위의 코드를 보면 다양한 우리 서비스의 로직들이 구현되거나 조합되는 것을 볼 수 있습니다.&lt;/p>
&lt;h3 id="data-access-layer">Data access layer&lt;/h3>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/jpa-method.png"
width="582"
height="306"
srcset="https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/jpa-method_hu755e2c0222938f117e5959a368d53523_41512_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/jpa-method_hu755e2c0222938f117e5959a368d53523_41512_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="jpa-method.png"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="456px"
>&lt;/p>
&lt;p>&lt;em>Java의 JPA 프레임워크의 경우 기본적으로 CRUD 메소드를 제공해준다.&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/django-method.png"
width="717"
height="268"
srcset="https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/django-method_hu35af591f1da6148e3aa53a5e144defd6_38902_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/django-method_hu35af591f1da6148e3aa53a5e144defd6_38902_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="django-method.png"
class="gallery-image"
data-flex-grow="267"
data-flex-basis="642px"
>&lt;/p>
&lt;p>&lt;em>Python의 django의 경우 Join 기능도 기본적으로 제공해준다.&lt;/em>&lt;/p>
&lt;p>이제 Data Access Layer만이 남았네요. 이 계층 또한 대부분의 객체지향 언어들에선 ORM이라는 개념을 통해 대부분의 프레임워크들이 많은 기능을 제공합니다. 그래서 필요한 경우에만 추가적으로 정의하는 형태로 편리하게 이용할 수 있습니다.&lt;/p>
&lt;p>그렇다면 Go에서는 어떻게 Data access layer를 편하게 이용할 수 있을까요? 이번 글에서는 &lt;strong>Golang은 이 Data Access Layer(Repository)에서 어떤 DB framework을 사용하면 좋을지 어떤 식으로 사용해나갈 수 있을지에 대해&lt;/strong> 다뤄보려 합니다.&lt;/p>
&lt;h2 id="golang의-좋은-db-framework-좀-추천해주세요">Golang의 좋은 DB framework 좀 추천해주세요.&lt;/h2>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/ent-gorm-stars.png"
width="797"
height="515"
srcset="https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/ent-gorm-stars_hu93b57724131d9ce35065e9adedba8094_34328_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/ent-gorm-stars_hu93b57724131d9ce35065e9adedba8094_34328_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ent-gorm-stars.png"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="371px"
>&lt;/p>
&lt;p>&lt;em>차트 출처: &lt;a class="link" href="https://star-history.t9t.io/" target="_blank" rel="noopener"
>https://star-history.t9t.io/&lt;/a>&lt;/em>&lt;/p>
&lt;p>Golang에는 Django나 JPA와 같은 강력한 데이터베이스 관리 프레임워크가 몇 년 전까지 존재하지 않았던 것 같습니다. 생 쿼리문을 직접 짤 게 아닌 경우라면 얼마 전까지는 &lt;code>gorm&lt;/code> 이라고하는 프레임워크가 거의 유일한 선택지였던 것 같습니다. 하지만 요즘 추세를 보면 무섭게 &lt;code>ent&lt;/code>라는 패키지가 쫓아오고 있는 모습을 보실 수 있습니다.&lt;/p>
&lt;h3 id="-gorm-프레임워크-사용-후기">👎 gorm 프레임워크 사용 후기&lt;/h3>
&lt;p>제가 golang 개발을 막 시작했던 때가 2020년 여름쯤이었기에 저도 &lt;code>gorm&lt;/code>을 첫 데이터베이스 프레임워크로 사용했었지만 몇 가지 단점들이 존재했습니다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>문서의 내용이 빈약했고, 에러에 대한 설명이나 디버깅이 쉽지 않았다.&lt;/strong>&lt;/p>
&lt;p>문서의 내용들이 실질적인 다양한 케이스에 대한 예시나 설명이 부족했다고 느껴졌습니다. 또한 에러가 발생한 경우 왜 에러가 발생한 것인지 정확한 위치나 이유가 제공되지 않아 디버깅하기도 힘들었던 것 같습니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>불편한 struct tag 기반의 테이블, 컬럼 설정&lt;/strong>&lt;/p>
&lt;p>Go가 강력히 type을 강제하면서 높은 안정성과 편의성을 제공하는 반면 gorm은 struct tag를 기반으로 여러 설정들을 관리하도록 개발되었습니다. Go 언어를 좋아하지만 struct tag에 대해서는 가뜩이나 조금의 불만을 갖고 있었는데 이런 저런 컬럼 설정들마저 struct tag로 이용하니 정확히 이 tag가 동작하는 태그인지, 왜 에러가 나거나 적용이 안되는지도 안전하게 확인할 수 없었고 무엇보다 가독성이 너무 너무~! 좋지 않았습니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>제공되는 메소드가 별로 없다.&lt;/strong>&lt;/p>
&lt;p>gorm은 아주 가벼운 느낌이었습니다. 하지만 데이터베이스 프레임워크를 사용함에도 불구하고 너무나 제공되는 메소드가 없다고 느껴졌습니다. JPA나 Django는 조금의 설정만 해주면 CRUD와 Join까지 제공해주는데 gorm은 거의 정말 정말 기본적인 기능을 하는 메소드에 적절한 인자를 전달함으로써 동작시켜야합니다. 예를 들어 메소드가 어떤 매개변수를 왜 필요로 하는지에 내용이 그닥 없고 그냥 통으로 Create메소드에 알아서 적절한 inteface{}인자를 전달해야하는 형태라 Go의 장점인 강력한 type을 바탕으로한 안정성, 편의성을 누릴 수도 없었고 이럴꺼면 파이썬 쓰지&amp;hellip; 싶은 생각이 자주 들었습니다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="-추천하는-프레임워크---ent">👍 추천하는 프레임워크 - ent&lt;/h3>
&lt;p>물론 위의 Github star history만 봐도 아실 수 있겠지만 ent는 매우 무섭게 성장 중인 Golang의 데이터베이스 관리 프레임워크입니다. 게다가 아마 Facebook에서 내부적으로 사용하다가 오픈소스화한 프로젝트인 걸로 알고 있는데 따라서 어느 정도의 완성도나 편의성이 보장되겠죠. ㅎㅎ 저는 사이드 프로젝트에서 gorm을 사용하다가 많은 불편을 느꼈고, Go 개발 커뮤니티에서 ent가 그렇게나 핫하다길래 ent로 data access layer를 마이그레이션했고 만족 중입니다. ㅎㅎ&lt;/p>
&lt;p>&lt;strong>ent의 사용 후기 및 특징&lt;/strong>은 아래와 같습니다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>타입을 바탕으로 안전하고 편리하게 테이블을 설계할 수 있다.&lt;/strong>&lt;/p>
&lt;p>테이블, 컬럼 정의들이 모두 ent 패키지의 컬럼 type 혹은 테이블 type, 관계 type 등등을 이용해서 정의할 수 있기 때문에 너무 너무 편리하죠. 게다가 복잡한 struct tag도 안녕~! &lt;code>ent&lt;/code>는 미리 정의된 타입과 메소드들로 다양한 설정을 할 수 있습니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>다양한 메소드 제공&lt;/strong>&lt;/p>
&lt;p>go generate라고 하는 기능을 통해 우리가 정의한 스키마(테이블 및 필드 설정)을 바탕으로 다양한 타입과 메소드들을 만들어줍니다. 이 부분으로 인해 꽤 빌드 시간이 늘어나는 느낌이긴한데 그래봤자 2초 정도인데 ent가 제공해주는 메소드들로 인해 개발적 편의와 안정성이 훨씬 크다고 느끼기 때문에 만족하고 있습니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>별 다른 문서가 필요 없다..?&lt;/strong>&lt;/p>
&lt;p>그냥 메소드를 기반으로 이용할 수 있다보니 그 사용 방법이 직관적인 편이고, 경우에 따라서는 코드 자체를 까보면 이해되는 별 다른 문서 없이도 이용할 수 있었던 것 같습니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>참조 관계 설정이 좀 헷갈린다&lt;/strong> (몇 안 되는 단점 중 하나)&lt;/p>
&lt;p>뭔가 From이나 To등을 통해 참조 관계를 정의하는데 이 From이 어떤 테이블을 From으로 생각하는건지 뭔가 많이 애매합니다. 커뮤니티를 보면 이로 인해 많은 분들도 혼란을 겪고 있는 현황입니다.&lt;/p>
&lt;p>하지만 너무 걱정은 마세요~! 이번 글에서 정리해드리려하니까요~! ㅎㅎ&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="ent-패키지를-통해-database-작업해보기">Ent 패키지를 통해 Database 작업해보기&lt;/h2>
&lt;p>&amp;ldquo;&lt;strong>시작하며&lt;/strong>&amp;ldquo;에서도 말씀드렸다시피 사실 Go 언어로 개발하시는 분들 중에 정말 개발 자체가 익숙하지 않은 분들은 정말 적으리라 생각합니다&amp;hellip;ㅎㅎ 따라서 너무 디테일한 내용을 직접 알려드리기 보다는 커다란 흐름이나 헷갈리는 요소들을 짚어드리는 방향으로 글을 작성해 보겠습니다.&lt;/p>
&lt;h3 id="예시-application---여행-상품-관리-crud-서비스">예시 Application - 여행 상품 관리 CRUD 서비스&lt;/h3>
&lt;ul>
&lt;li>1:N의 여행 상품 담당자 관계 - 담당자(일종의 유저)는 여행 상품과 1:N 관계&lt;/li>
&lt;/ul>
&lt;p>위의 관계를 갖는 여행 상품 관리 CRUD 서비스를 만들어보겠습니다. 본 글에서는 코드를 짧게 짧게 잘라서 올릴테니 원본 코드를 보고싶으신 분들은 제 깃헙을 참고해주세요.&lt;/p>
&lt;p>원본 코드 - &lt;a class="link" href="https://github.com/umi0410/how-to-backend-in-go" target="_blank" rel="noopener"
>https://github.com/umi0410/how-to-backend-in-go&lt;/a>&lt;/p>
&lt;h3 id="1-ent-package-설치">1. ent package 설치&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 참고: https://entgo.io/docs/tutorial-setup/#installation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ go get entgo.io/ent/cmd/ent
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>우선 ent는 다양한 명령 기능도 제공하고 저희는 그걸 필요로 하기 때문에 ent를 설치해주어야합니다. 스키마 정의 코드 또한 ent 를 이용해 자동으로 기본 형태를 제공 받을 수 있습니다. ent 패키지를 설치한 이후 저희는 다음과 같은 명령을 수행하게 될 것입니다.&lt;/p>
&lt;ol>
&lt;li>&lt;code>$ go run entgo.io/ent/cmd/ent init {{엔티티 이름}}&lt;/code> - 엔티티 이름을 바탕으로한 초기 스키마 코드 생성&lt;/li>
&lt;li>&lt;code>$ go generate ./ent&lt;/code> - 정의했던 스키마를 바탕으로 한 많은 boilerplate 코드를 자동으로 생성&lt;/li>
&lt;/ol>
&lt;h3 id="2-스키마-설정">2. 스키마 설정&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ go run entgo.io/ent/cmd/ent init User &lt;span class="c1"># or shortly $ ent init User&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ go run entgo.io/ent/cmd/ent init TourProduct &lt;span class="c1"># or shortly $ ent init TourProduct&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위의 명령어들을 통해 User와 User가 관리하는 TourProduct라는 엔티티들의 스키마를 작성할 것입니다. 정확한 스키마 작성에 대한 설명은 생략하겠습니다. &lt;a class="link" href="https://entgo.io/docs/schema-def" target="_blank" rel="noopener"
>ent 공식 문서&lt;/a>에 매우 잘 설명되어있고, &lt;a class="link" href="https://github.com/ent/ent/tree/master/examples" target="_blank" rel="noopener"
>examples in ent github&lt;/a>에서 대부분의 예시 코드도 확인해볼 수 있기 때문입니다.&lt;/p>
&lt;h4 id="-참조-관계-설정-시의-from과-to">⭐ 참조 관계 설정 시의 From과 To&lt;/h4>
&lt;p>다만 한 가지. Edge를 이용해 &lt;strong>참조 관계를 설정할 때 &lt;code>From&lt;/code>과 &lt;code>To&lt;/code>의 사용에 대해&lt;/strong> 한 가지만 짚고 넘어가려 합니다. 저를 포함해 많은 ent 사용자분들께서 Edge 설정 시에 많은 혼란을 겪습니다. 그 이유는 일반적으로 우리는 &lt;strong>1:N 관계에서 N쪽이 From, 1쪽이 To가 되며 N쪽 테이블에서 1을 참조하는 내용을 정의하는 반면 ent는 그 반대로 동작&lt;/strong>하기 때문입니다.&lt;/p>
&lt;p>&lt;em>(ent에서의 참조 관계 정의 방식에 대해 궁금하지 않으신 분들은 넘어가셔도 됩니다.)&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/o2m-relation.png"
width="560"
height="189"
srcset="https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/o2m-relation_huda98d5d877ff5063fa9c786910881686_21160_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/how-to-backend-in-go-db/o2m-relation_huda98d5d877ff5063fa9c786910881686_21160_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="o2m-relation.png"
class="gallery-image"
data-flex-grow="296"
data-flex-basis="711px"
>&lt;/p>
&lt;p>&lt;em>출처: &lt;a class="link" href="https://entgo.io/docs/schema-edges" target="_blank" rel="noopener"
>https://entgo.io/docs/schema-edges&lt;/a>&lt;/em>&lt;/p>
&lt;p>위와 같은 경우 데이터베이스상으로는 &lt;code>Pet&lt;/code> 테이블이 자신의 &lt;code>owner_id&lt;/code> 컬럼을 통해 &lt;code>User&lt;/code>을 참조하므로 &lt;code>Pet&lt;/code>이 &lt;code>From&lt;/code>, &lt;code>User&lt;/code>가 &lt;code>To&lt;/code>가 되며 이를 통해 owner라는 관계를 나타낼 수 있습니다.
하지만 &lt;code>ent&lt;/code>는 그 반대로 &lt;code>User&lt;/code>가 &lt;code>Pet&lt;/code>을 관리(참조)한다는 의미로 &lt;code>User&lt;/code>가 &lt;code>From&lt;/code>, &lt;code>Pet&lt;/code>이 &lt;code>To&lt;/code>가 되어 &lt;code>pets&lt;/code>라는 관계를 나타내는 식으로 정의하는 것 같습니다.
이렇게 기존의 테이블 설계 방식과는 대조되는 방식으로 인해 많은 사람들이 혼란을 겪는 것 같아요.&lt;/p>
&lt;p>이렇게 테이블을 정의하도록 ent를 개발한 개발자들의 의도나 철학은 뭔지 잘 모르겠습니다. 혹시 아시는 분이 있다면 알려주시면 좀 더 entf를 이해하는 데에 도움이 될 것 같아요!&lt;/p>
&lt;p>아무튼 ent에서는 &lt;strong>1:N 방식에서 1이 연관 관계의 주인처럼 동작/정의한다&lt;/strong>고 생각하고 작업하고 있습니다.(실제 문서에서도 From쪽. 즉 1 혹은 User 쪽이 연관 관계의 주인이라고 기술되어있는데, 이 부분은 JPA와는 거의 반대라고 볼 수 있죠.)
저는 그냥 &lt;strong>예시를 참고하면서 실제 테이블의 참조 관계랑 반대라고 외웠어요.&lt;/strong>(ㅎㅎ&amp;hellip;.;;)&lt;/p>
&lt;h4 id="스키마-정의-및-적용">스키마 정의 및 적용&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ent/schema/user.go
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kn">package&lt;/span> &lt;span class="nx">schema&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;entgo.io/ent&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;entgo.io/ent/schema/edge&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;entgo.io/ent/schema/field&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// User holds the schema definition for the User entity.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">User&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Schema&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Fields of the User.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Fields&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">ent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Field&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">ent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Field&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 타입을 기반으로 안전하고 편리하게 컬럼을 정의할 수 있습니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">field&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">field&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">field&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;isActivated&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Default&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Edges of the User.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Edges&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">ent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Edge&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">ent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Edge&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ent에서는 To를 정의하는 스키마, 즉 여기선 User
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 가 참조 관계의 주인이라고 정의합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 일반적인 JPA의 방식과는 반대입니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">edge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">To&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;products&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">TourProduct&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Type&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ go generate ./ent
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>아무튼 저는 User 스키마를 이렇게 설정했고 이 스키마들을 적용해 ent가 generate해준 코드들을 이용해보겠습니다.&lt;/p>
&lt;p>(TourProduct 스키마는 생략했습니다. 원본 코드를 참고해주세요.)&lt;/p>
&lt;h3 id="3-repository-정의">3. repository 정의&lt;/h3>
&lt;p>ent가 데이터베이스 관련 작업을 위한 다양한 메소드를 지원해줍니다. 하지만 ent는 간단 간단한 메소드들을 조합해서 사용해야하기 때문에 비즈니스 로직을 구현하는 계층에서 매번 ent의 메소드를 조합하며 사용하는 것은 계층의 관심사와 책임을 흐리게 할 수 있습니다. 따라서 몇 가지 메소드들을 &lt;code>data access layer&lt;/code>인 &lt;code>repository&lt;/code>에 정의하겠습니다.&lt;/p>
&lt;p>예를 들면 특정 user가 관리하는 여행 상품을 모두 조회하는 &lt;code>FindAllByManager(managerID string)&lt;/code>와 같은 메소드 말이죠. 이 작업을 위해서는 User 테이블과 TourProduct 테이블을 조인해야하는데 ent가 역시 이 기능을 제공합니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// repository.go
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">TourProductRepository&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Client&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TourProductClient&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">repo&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">TourProductRepository&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">FindAllByManager&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">managerID&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">ent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TourProduct&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">result&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">repo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Query&lt;/span>&lt;span class="p">().&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 특정 manager_id의 TourProduct를 조회하도록 조인
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">Where&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tourproduct&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HasManagerWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ID&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">managerID&lt;/span>&lt;span class="p">))).&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">WithManager&lt;/span>&lt;span class="p">().&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">AllX&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">TODO&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-실행">4. 실행&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main.go
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;전체 유저 조회&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">userRepository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">FindAll&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;User(id=%s, name=%s)\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;--------------------------------------------------------------------------&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;전체 여행 상품 조회&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tour&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">tourProductRepository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">FindAll&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;TourProduct(id=%d, name=%s, manager=%s)\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tour&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tour&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tour&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Edges&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Manager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;--------------------------------------------------------------------------&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ID&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;가 관리하는 전체 여행 상품 조회&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tour&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">tourProductRepository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">FindAllByManager&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;TourProduct(id=%d, name=%s, manager=%s)\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tour&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tour&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tour&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Edges&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Manager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>전체 유저 조회
User(id=umi0410, name=박진수)
User(id=devumi, name=개발자)
--------------------------------------------------------------------------
전체 여행 상품 조회
TourProduct(id=1, name=미국 뉴욕 여행, manager=umi0410)
TourProduct(id=2, name=유럽 여행, manager=devumi)
--------------------------------------------------------------------------
umi0410가 관리하는 전체 여행 상품 조회
TourProduct(id=1, name=미국 뉴욕 여행, manager=umi0410)
&lt;/code>&lt;/pre>&lt;p>간단한 테스트용으로 2명의 유저를 만들었고, 각각의 유저가 관리하는 2개의 여행 상품을 만들어서 조회하는 프로그램을 만들어보았습니다. repository 계층에서 만든 FindAll()이나 FindAllByManager()와 같은 메소드들을 통해 편리하게 작업할 수 있네요!&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>글을 쓰다보니 백엔드 개발에서 데이터베이스가 왜 필요하고 어떤 식으로 사용되는지를 다루는 글도 아니고, Golang에서 ent 프레임워크를 사용하는 방법을 자세히 알려주는 글도 아닌 이도 저도 아닌 글이 된 건 아닌가 싶기도 합니다.&lt;/p>
&lt;p>그래도 앞으로 Golang으로 백엔드 개발하는 것에 대해 천천히 한 5~6편 정도의 글을 써나가볼까하는데 이때 DB 관련된 내용을 우선 짚고는 넘어가야할 것 같기도 했고, 무엇보다 한글로 된 ent 자료를 하나도 찾을 수 없다는 점에서 데이터베이스 관련 프레임워크인 ent를 소개해보고자 했습니다! ㅎㅎ&lt;/p>
&lt;p>지면 사정 상 코드들을 잘라서 올렸는데 원본 코드는 &lt;a class="link" href="https://github.com/umi0410/how-to-backend-in-go" target="_blank" rel="noopener"
>https://github.com/umi0410/how-to-backend-in-go&lt;/a> 에 올려놓을테니 참고해주시면 감사하겠습니다.&lt;/p>
&lt;h2 id="참고">참고&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://entgo.io/" target="_blank" rel="noopener"
>https://entgo.io/&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/ent/ent" target="_blank" rel="noopener"
>https://github.com/ent/ent&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Go 언어로 적용해보는 Computer Science - Mutex와 Semaphore</title><link>https://umi0410.github.io/blog/golang/go-mutex-semaphore/</link><pubDate>Wed, 20 Jan 2021 15:25:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/go-mutex-semaphore/</guid><description>&lt;img src="https://umi0410.github.io/blog/golang/go-mutex-semaphore/mutex-2.png" alt="Featured image of post Go 언어로 적용해보는 Computer Science - Mutex와 Semaphore" />&lt;p>Go 언어로 적용해보는 Computer Science의 첫 번째 내용으로 OS 관련 내용 중 이론적으로는 흔하게 접할 수 있지만 실제 적용에 대한 내용은
찾아보기 힘들었던 &lt;code>Mutex&lt;/code>, &lt;code>Semaphore&lt;/code>에 대해 알아보려한다.&lt;/p>
&lt;p>Mutex와 Semaphore은 각각의 추상적인 개념을 바탕으로 OS나 Go 등에서 사용될 수 있기에 세부적인 내용은 문맥에 따라 달라질 수 있다고 생각한다. 예를 들어 Go에서의 Mutex는 주로 &lt;code>sync.Mutex&lt;/code>를 이용한 서로 다른 Goroutine의 동시 접근에 대한 제어를 의미하는 반면, 다른 프로그래밍 언어나 OS에서는 주로 서로 다른 Kernel thread나 Process에 대한 동시 접근 제어를 의미할 수 있다.&lt;/p>
&lt;h2 id="mutex">Mutex&lt;/h2>
&lt;p>&lt;code>Mutex&lt;/code>는 &lt;strong>Mutual Exclusion&lt;/strong>의 줄임말로 &lt;strong>상호 배제&lt;/strong>를 의미한다. 즉 &lt;strong>서로 다른 워커가 공유 자원에 접근하는 것을 제한&lt;/strong>한다는 말이다. &lt;code>Go&lt;/code>에서는 이 &amp;ldquo;&lt;strong>워커&lt;/strong>&amp;ldquo;가 &lt;code>Goroutine&lt;/code>이 되고, 컨텍스트에 따라 프로세스가 될 수도, 스레드가 될 수도 그 외의 다른 존재가 될 수도 있다. &lt;code>공유 자원&lt;/code>이란 여러 워커가 동시에 접근하는 자원을 말하고 이 &lt;strong>공유 자원에 대한 동시 접근을 제한해 thread-safe하게 작업하고자 하는 영역&lt;/strong>을 &lt;code>Critical section&lt;/code>이라고 한다. Cricical section은 Mutex가 Lock을 수행한 뒤 Unlock되기 전까지의 영역이며, Lock과 Unlock은 Atomic한 작업이기때문에 어떠한 경우에도 동시적으로 수행될 수 없다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-mutex-semaphore/mutex-1.png"
width="817"
height="547"
srcset="https://umi0410.github.io/blog/golang/go-mutex-semaphore/mutex-1_hu76213fc7fff91be05fb9c7f7e7037656_79471_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-mutex-semaphore/mutex-1_hu76213fc7fff91be05fb9c7f7e7037656_79471_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="mutex-1.png"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="358px"
>&lt;/p>
&lt;p>이해하기 쉽게 예시를 통해 접근해보겠다. 원래 화장실 예제를 보고 굉장히 와닿았는데, 화장실보다는 피팅룸이 좀 더 청결한 것 같아서 피팅룸으로 예를 들어보겠다. 우리 귀여운 고퍼가 &lt;strong>피팅룸을 한 개만 운영하는 옷가게에 방문&lt;/strong>했다고 가정해보자.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-mutex-semaphore/mutex-2.png"
width="831"
height="331"
srcset="https://umi0410.github.io/blog/golang/go-mutex-semaphore/mutex-2_hu253887d6f424b5a6c4c14b3309becda5_68035_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-mutex-semaphore/mutex-2_hu253887d6f424b5a6c4c14b3309becda5_68035_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="mutex-2.png"
class="gallery-image"
data-flex-grow="251"
data-flex-basis="602px"
>&lt;/p>
&lt;ul>
&lt;li>피팅룸 - Critical section&lt;/li>
&lt;li>고퍼가 피팅룸에 들어가서 옷을 입는 작업은 하나의 Goroutine&lt;/li>
&lt;/ul>
&lt;p>동시에 여러 고퍼가 하나의 피팅룸에서 옷을 갈아입으려한다면 😟 난처한 상황이 발생할 것이다. 그렇기때문에 피팅룸에는 Lock, Unlock 기능이 존재해야하는데, 이 기능을 구현한다해도 &lt;strong>Atomic&lt;/strong>하게 동작할 수 있도록 제대로 구현하지 않는다면 &lt;strong>한 워커가 Lock을 하는 사이에 다른 워커가 동시에 Lock&lt;/strong>을 걸려할 수 있고, 그 경우 두 워커가 동시에 한 피팅룸(Critical Section)에서 작업을 하려할 것이다. 그렇기때문에 &lt;strong>Lock, Unlock은 Atomic해야하며 이렇게 각 워커를 상호 배제시켜 동시에 작업할 수 없도록 하는 것&lt;/strong>이 바로 &lt;code>Mutex&lt;/code>이다.&lt;/p>
&lt;h3 id="mutex를-이용한-go-program---counter">Mutex를 이용한 Go program - Counter&lt;/h3>
&lt;p>&lt;strong>Count = 0에서 시작해 동시적으로 +1을 10만 번, -1을 10만 번 수행하는 카운터 프로그램&lt;/strong>&lt;/p>
&lt;p>그럼 실생활에 비유한 Mutex는 이 정도로 마치고, Mutex가 어떻게 사용되는지 Go로 짠 간단한 Counter 프로그램을 통해 알아보자.&lt;/p>
&lt;ul>
&lt;li>Mutex를 잘 적용한 경우 - 몇 번을 수행하든 결과는 0.&lt;/li>
&lt;li>Mutex가 적용되지 않은 safe하지 않은 경우 - 결과가 0이 나오지 않을 수 있다.&lt;/li>
&lt;/ul>
&lt;p>특히 &lt;code>Go&lt;/code>에서는 &lt;code>sync&lt;/code> 패키지의 &lt;code>Mutex&lt;/code>라는 type을 통해 간단하게 Mutex 기능을 이용할 수 있다. &lt;strong>동일한 Mutex struct를 참조한다면 같은 Key를 이용한다는 개념&lt;/strong>이고, &lt;code>mutex.Lock()&lt;/code>을 호출한 뒤 &lt;code>mutex.Unlock()&lt;/code>이 호출되기 이전까지가 Critical section이 되며 다른 goroutine들은 같은 Mutex(즉 키)에 의한 Critical section에 진입할 수 없다.&lt;/p>
&lt;p>&lt;em>내가 처음 Mutex를 처음 접했을 때 한 가지 헷갈렸던 것&lt;/em>은 당시 Critical section이라는 개념이 없었기 때문에 Lock을 호출하기만 하면 런타임에 &lt;del>알아서 스마트하게 Lock과 Unlock사이의 변수들에 대한 접근 중 동시적인 접근만을 잠시 블락해주는 줄&lt;/del> 알았는데, 사실 그 사이 변수들중 동시적으로 접근하려는 변수에 대해서만 잠시 블락해주는 게 아니라 &lt;strong>Lock과 Unlock 사이를 Critical section으로 만드는 것&lt;/strong>이었다.&lt;/p>
&lt;p>자 그럼 Count라는 하나의 int형 변수에 동시적으로 접근을 하는 상황을 극대화하기 위해 여러 고루틴으로 작업해보겠다. +1을 1만 번하는 고루틴을 10개, -1을 1만 번하는 고루틴을 마찬가지로 10개 이용하겠다.&lt;/p>
&lt;p>전체 코드 참고: &lt;a class="link" href="https://play.golang.org/p/xaLE1YkAdvd" target="_blank" rel="noopener"
>https://play.golang.org/p/xaLE1YkAdvd&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-mutex-semaphore/output-1.png"
width="516"
height="443"
srcset="https://umi0410.github.io/blog/golang/go-mutex-semaphore/output-1_hu6e22a3f3f203a0242d8843396eefee7b_63957_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-mutex-semaphore/output-1_hu6e22a3f3f203a0242d8843396eefee7b_63957_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="output-1.png"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="279px"
>&lt;/p>
&lt;ul>
&lt;li>우리가 일반적으로 익숙한 Sync 즉 동기적인 순차적 진행 시에는 당연히 10만번 +1, 10만번 -1 후에 결과가 0이었다.&lt;/li>
&lt;li>동시적 접근을 수행하자 10만번 +1, 10만번 -1을 했지만 &lt;code>Count += 1&lt;/code> 을 수행하던 중 또 다른 &lt;code>Count += 1&lt;/code>이 수행되는 등의 원치않던 상황이 야기될 수 있기에 결과값이 0인 경우를 찾기 힘들다.&lt;/li>
&lt;li>여러 Goroutine이 concurrent하게 진행하되 &lt;code>Count += 1&lt;/code>, &lt;code>Count -= 1&lt;/code> 과 같은 &lt;strong>동시적 접근이 수행되어서는 안되는 영역은 Critical Area&lt;/strong>로 설정해 상호 배제적으로 작업되게 하기 위해 Critical section의 전/후에 &lt;code>sync.Mutex&lt;/code>를 이용해 Lock, Unlock 기능을 넣어주자 &lt;strong>기대했던 대로 0의 결과&lt;/strong>를 얻을 수 있었다.&lt;/li>
&lt;/ul>
&lt;h3 id="-mutex-그래서-언제-써요">💡 Mutex.. 그래서 언제 써요?&lt;/h3>
&lt;p>사실 Mutex라는 개념이 그렇게 어려운 것도 아니고, 사용법 자체가 어려운 것도 아니다. 나는 하지만 항상 &lt;strong>&amp;ldquo;언제&amp;rdquo;&lt;/strong>, &lt;strong>&amp;ldquo;왜&amp;rdquo;&lt;/strong> 써야하는지를 궁금해하는 편이다.&lt;/p>
&lt;ol>
&lt;li>Critical section에서 많은 시간이 소요되는 경우? ⇒ ❌
위의 counter와 같은 작업은 대부분의 작업이 critical section 속에 있다고 볼 수 있다. 이 경우 동시적인 작업과 함께 Lock, Unlock을 하며 critical section을 관리하는 것보다 애초에 작업 자체를 동기적으로 수행하는 게 나을 수 있다. 왜냐하면 동시적 작업 속에서 Mutex를 통해 동기적으로 작업할 수 있도록 하는 것에서 오는 오버헤드는 분명히 존재하고, Critical section 밖에서 효율적으로 동시적으로 작업을 진행했다하더라도 critical section에서 병목이 발생해버려 전체적인 Throughput이 안 좋아질 것이다.&lt;/li>
&lt;li>&lt;strong>Critical section에서는 적은 시간이 소요되고, 대부분은 동시적으로 작업이 가능한 경우&lt;/strong>? ⇒ ⭕
예를 들어 어떤 API를 여러 번 호출한 뒤 그 응답 중 일부를 계속해서 더해 결과를 내는 Reduce 작업을 수행한다고 치자. 순차적으로 수행할 시 오랜 시간이 소요될 API 호출은 동시적으로 진행하고, 결과에 대한 Reduce 작업만 잠시 Critical section내에서 작업한다면 아주 좋은 성능과 함께 안전하게 작업할 수 있을 것이다!&lt;/li>
&lt;/ol>
&lt;h2 id="semaphore">Semaphore&lt;/h2>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-mutex-semaphore/semaphore.png"
width="884"
height="619"
srcset="https://umi0410.github.io/blog/golang/go-mutex-semaphore/semaphore_hu1456e527b7729559b12f99ce1b9bda34_227201_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-mutex-semaphore/semaphore_hu1456e527b7729559b12f99ce1b9bda34_227201_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="semaphore.png"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
>&lt;/p>
&lt;p>Mutex에서 대부분의 Lock이나 Critical section에 대한 내용을 설명했기 때문에 Semaphore에서 더 설명할 내용이 많지는 않다. Semaphore의 동작에 대한 간단한 예시는 위의 그림과 같은데, 5마리의 고퍼가 존재한다해도 동시에 접근할 수 있게하는 고퍼를 3개로 제한한다면 2마리의 고퍼는 피팅룸에 들어가지 못하고 블락된다. Locked와 Unlocked 상태 뿐인 &lt;code>Mutex&lt;/code>와 달리 &lt;code>Semaphore&lt;/code>는 &lt;strong>임의의 개수를 세는 Counter처럼 동작해 임의의 개수의 워커만이 Critical section에 동시적으로 접근&lt;/strong>할 수 있도록 한다.&lt;/p>
&lt;p>Counter를 예로 들자면 10개의 워커가 존재한다해도 &amp;ldquo;5&amp;quot;를 세는 Semaphore는 한 워커가 Critical section에 진입할 때마다 Counter 값을 1씩 낮추고, Critical section을 탈출할 때마다 Counter 값을 다시 1씩 높인다. 만약 어떤 워커가 Critical section에 진입하려는데 Count 값이 0이라면 초기에 계획했던 대로 5개의 워커가 이미 동시적으로 작업중이라는 의미이므로 이 워커는 한 워커가 Critical section을 나오면서 Counter 값을 다시 1 증가시킬 때까지 Block된다.&lt;/p>
&lt;p>Mutex의 Lock과 Unlock이 Atomic하기에 어떠한 경우에도 동시적으로 수행될 수 없었듯이 Semaphore의 Counting 작업 또한 Atomic해야하고 그래야만 Thread-safe한 counter로 동작할 수 있다. Semaphore가 수행하는 Counting 작업은 주로 try를 뜻하는 네덜란드어 Proberen의 앞 글자를 딴 &lt;code>P&lt;/code>와 increment를 뜻하는 Verhogen의 앞 글자를 딴 &lt;code>V&lt;/code>로 두 가지가 표현하는 듯하다. &lt;code>P&lt;/code>는 Count 값이 0이 아니면 작업을 수행하겠다는 의미하며 만약 Count 값이 0이라면 0이 아닌 값이 될 때까지 wait했다가 0 아닌 값이 되면 count 값을 1 감소시키며 작업을 시작한다. &lt;code>V&lt;/code>는 작업을 마치며 count 값을 다시 1 증가시키겠다는 의미이다.&lt;/p>
&lt;h3 id="mutex와-binary-semaphore의-유사한-점">Mutex와 Binary semaphore의 유사한 점&lt;/h3>
&lt;p>동시 접근 워커를 1개로 제한하는 Semaphore의 경우 Count 값이 0과 1 두 개로만 존재할 수 있는데 이를 Binary semaphore라고한다. 특히 이는 Locked와 Unlocked라는 두 가지의 상태만을 갖는 Mutex와 유사하다. 하지만 Binary semaphore는 mutex가 유사한 기능을 할 뿐 동일하지는 않다는 의견이 많다. 그 이유는 &lt;strong>Mutex는 Lock 방식을 이용하고 Semaphore는 Signal(신호) 방식을 이용&lt;/strong>하기 때문이다. Lock 방식의 경우 Lock을 수행한 워커만이 Unlock을 할 수 있는 반면 Signal 방식은 try(작업 시도)를 수행한 워커가 아니더라도 increment(작업 완료) 신호를 보낼 수 있기에 서로 명백히 동작 방식이 다르다는 것이다. (하지만 이 부분에 대해서는 직접 실습해보지는 못했다.)&lt;/p>
&lt;p>*Semaphore를 이해하는 데에 있어 내가 착각해서 헤맸던 부분은 바로 &lt;del>Semaphore의 요점이 thread-safe한 count라고 착각&lt;/del>*했던 것이다. 하지만 semaphore의 요점은 여러 워커에 대해서 thread safe한 count 기능을 제공하는 것이 아니라 임의의 숫자만큼의 동시적 접근을 허용하고, 그 이상은 Block 상태로 대기시킨다는 것이다.&lt;/p>
&lt;h3 id="semaphore를-이용한-go-program-1---counter">Semaphore를 이용한 Go Program 1 - Counter&lt;/h3>
&lt;p>go에서 Semaphore를 이용하는 방법은 크게 2가지가 있는 것 같다. 아래 두 가지 방법 중 좀 더 Go스러운 &lt;code>channel&lt;/code>을 이용해보겠다.&lt;/p>
&lt;ol>
&lt;li>Go 특유의 자료형인 &lt;code>channel&lt;/code>을 이용하기 - channel은 여러 goroutine의 concurrent한 작업간 데이터 전송은 물론이고 동시적인 작업 중 데이터를 편리하게 동기화해주는 녀석이다. 따라서 동기적인 count와 유사한 기능을 내재하고있다.&lt;/li>
&lt;li>&lt;a class="link" href="http://golang.org/x/sync/semaphore" target="_blank" rel="noopener"
>golang.org/x/sync/semaphore&lt;/a>의 Weighted를 이용하기 - Semaphore의 P를 Acquire, V를 Release로 구현해 이용할 수 있게 했다.&lt;/li>
&lt;/ol>
&lt;p>전체 코드는 Mutex와 동일하며 마찬가지로 다음 링크로 참고해볼 수 있다: &lt;a class="link" href="https://play.golang.org/p/xaLE1YkAdvd" target="_blank" rel="noopener"
>https://play.golang.org/p/xaLE1YkAdvd&lt;/a>&lt;/p>
&lt;h3 id="buffered-channel을-이용한-semaphore-in-go">Buffered channel을 이용한 Semaphore in Go&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">DoSemaphore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">maxConcurrent&lt;/span> &lt;span class="kt">int64&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Count&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">sem&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="nx">maxConcurrent&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="nf">Add1Sem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">wg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">sem&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="nf">Sub1Sem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">wg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">sem&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Concurrent goroutines + Semaphore&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">maxConcurrent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Result(Desired 0):&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;=====================================&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Sub1Sem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">wg&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">sem&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">10000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">sem&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Count&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">sem&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>channel을 이용한 Semaphore 코드를 설명하기 위해 전체 코드 중 일부를 가져와보았다. Semaphore를 이용하기 위해 &lt;code>Unbuffered channel&lt;/code>이 아닌 &lt;code>Buffered channel&lt;/code>을 이용하는 이유는 다음과 같은 Unbuffered channel의 동작 방식이 Semaphore의 동작 방식과 동일하기 때문이다.&lt;/p>
&lt;ul>
&lt;li>Buffer의 크기만큼은 동시적으로 channel에 값을 넣으려는 시도가 허용됨.&lt;/li>
&lt;li>buffered channel이 꽉 찬 경우 채널에서 값을 꺼내지 않는 이상은 추가적으로 Channel에 값을 넣으려시도하는 goroutine은 Block됨.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-mutex-semaphore/output-2.png"
width="534"
height="313"
srcset="https://umi0410.github.io/blog/golang/go-mutex-semaphore/output-2_hu5c9eb1f96e3e02a52a6b354b1459125f_26935_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-mutex-semaphore/output-2_hu5c9eb1f96e3e02a52a6b354b1459125f_26935_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="output-2.png"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="409px"
>&lt;/p>
&lt;p>(앞서 코드를 링크한 go playground에서 코드를 바로 실행해볼 수 있다.)&lt;/p>
&lt;p>동시 접근 워커를 1개로 제한하는 Semaphore는 &lt;strong>Binary Semaphore로서 Mutex를 이용했을 때와 유사하다고 말했듯이 thread-safe하게 count 작업이 이루어져 예상되는 값이었던 0이 출력됨&lt;/strong>을 확인할 수 있다. 하지만 동시접근이 가능한 워커가 1개 이상이 되면 thread-safe하지 않게 되고, 동시접근 워커 개수가 많아질수록 결과가 더 부정확한 경향이 있는 것으로 나타났다.&lt;/p>
&lt;h3 id="-semaphore-그래서-언제-쓰나요">💡 Semaphore.. 그래서 언제 쓰나요?&lt;/h3>
&lt;blockquote>
&lt;p>Mutex는 thread-safe한 작업을 할 때 사용하면 되는 것 같은데 Semaphore는 개념은 알겠는데 언제 써야할 지를 잘 모르겠네요. 일정 개수만큼만 동시 접근을 허용하려는 경우가 있을까요?&lt;/p>
&lt;/blockquote>
&lt;p>Semaphore을 사용하기 좋은 케이스는 &lt;strong>동시에 접근할 수 있는 워커 수를 제한하는 경우&lt;/strong>이고, 이는 주로 &lt;strong>전체 작업이 늘어지는 것을 방지하고자 하는 경우&lt;/strong>에 이용된다. 많은 작업을 동시에 수행하려하면 먼저 수행될 수 있는 작업은 먼저 수행되도록 하기보다는 전체적으로 모든 작업이 늘어지게 되고 CPU나 Memory 리소스를 많이 소모하게 되고 이는 서버의 안정성에도 좋지 않다. Semaphore를 이용해 동시 접근 워커 수를 제한하고자하는 케이스는 Go의 Worker pool 패턴을 이용하는 경우나 Pipeline pattern을 이용하는 경우와 유사하다.(&lt;em>처음엔 Go의 모든 Concurrent pattern들을 개별적으로 구별지으려했었는데, 공부하다보니 일정한 개수의 Worker를 이용하는 Worker Pool pattern, Channel을 기반으로 작업 내역을 쪼개어 실시간 처리하는 Pipeline, 한 채널, 여러 Goroutine을 이용하는 Fan-in Fan-out pattern 등등 다들 유사하고 연관이 되어있더라.&lt;/em>)&lt;/p>
&lt;p>&lt;strong>Semaphore로 동시 접근 Worker 수를 제한하지 않고 모든 Goroutine을 동시적으로 수행하는 경우엔 어떻게 될까?&lt;/strong>&lt;/p>
&lt;p>Logical Processor 개수를 훨씬 넘는 모든 Goroutine 동시적으로 작업을 진행할 경우 아무리 Goroutine이 concurrent한 작업 수행에 뛰어난 성능을 보인다할지라도 과하게 많은 수의 Goroutine은 성능 저하를 야기하지 않을까 예상했다. 하지만 user-level thread 혹은 green level thread의 일종인 Goroutine은 OS(혹은 Kernel) thread와 달리 Context switch로 인한 penalty가 거의 없어서인지 거의 Throughput 면에서의 성능 차이가 없었다.&lt;/p>
&lt;blockquote>
&lt;p>Kernel level thread는 OS가 스케쥴링을 담당하기 때문에 Go 프로그램이 뭐 어떻게 할 수 있는 게 아니지만 Goroutine은 프로그램이 실행되는 동안 Go 런타임이 스케쥴링을 담당한다. 같은 Kernel level thread에 속한 User level thread인 goroutine간의 switch는 cost가 거의 없다. 즉 goroutine이 많든 적든 Kernel level thread간의 context switch cost는 동일하다고 볼 수 있고, 해당 Kernel level thread에 속한 goroutine간의 context switch cost는 거의 없다.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>참고: Kernel level thread에 대한 스케쥴링은 주로 Preemptive 방식을, User level thread에 대한 스케쥴링은 주로 Cooperative한 방식을 이용하지만 Goroutine은 User level thread임에도 Go 1.14 버전부터는 10ns를 기준으로 goroutine을 switch 할 수 있는 asynchronously preemptive한 스케쥴 방식을 지원한다고 한다. 하지만 Go 1.14가 릴리즈된 지 얼마되지 않아서인지, asynchorously preemptive scheduling에 대해서는 명확히 설명된 문서를 찾기 힘들었다.
User level thread의 예로는 RxJava in Java, Coroutine in Kotlin, Goroutine in Golang이 있다.&lt;/p>
&lt;/blockquote>
&lt;p>하지만 Throughput 적인 측면보다는 Machine의 Resource 소모 측면에서는 모든 Goroutine이 동시적으로 수행되는 구조보다는 &lt;strong>Semaphore을 바탕으로한 동시에 일정 개수의 워커만이 작업하는 Worker Pool 구조가 훨씬 Memory나 CPU 리소스를 적게 소모&lt;/strong>하는 듯 했다. 또한 100개의 동시 요청을 수행하는데 동일한 Throughput으로 약 10초가 걸린다고 치면, 요청당 goroutine을 생성하는 경우는 첫 번째 요청도 거의 10초가 걸린 반면 Semaphore을 이용한 경우는 먼저 온 요청은 대체로 빠르게 먼저 처리되는 경향을 보였다. 이 차이는 &lt;strong>처음 요청을 보낸 사용자 마저 10초를 기다리게 할 것이냐, 0.1초만에 응답을 받도록 할 것이냐의 차이&lt;/strong>이다. 또한 &lt;strong>전체 작업이 늘어지면 그 작업에 대한 메모리 점유가 지속&lt;/strong>되기에 메모리 측면에서도 비효율적이다.&lt;/p>
&lt;h3 id="semaphore을-이용한-go-program-2---이미지-크기-변환기">Semaphore을 이용한 Go Program 2 - 이미지 크기 변환기&lt;/h3>
&lt;p>마침 이번에 프로젝트에서 thumbnail 생성, image 크기 변환, hashed uri 생성 작업 등을 담당하는 &lt;code>image processing 서버&lt;/code>를 개발하려했는데, image를 불러오는 I/O 작업 이후의 image processing은 CPU Bound 한 작업이기 때문에 동시적으로 동작하는 Goroutine이 일정 숫자(대게 Logical Processor 개수) 이상으로는 많아져봤자 크게 효율이 없을 것이라 예상했고, 그와 관련해 간단하게 이미지 크기 변환 프로그램을 하나 만들어 테스트 해보았다.&lt;/p>
&lt;p>약 2MB의 이미지에 대한 크기 변환 작업 요청이 동시에 30개 들어왔다는 가정을 했고, semaphore을 이용한 경우 동시적으로 최대 4개의 worker(goroutine)이 작업을 수행할 수 있게, concurrent를 이용한 경우는 30개의 요청 모두 동시적으로 작업을 하는 경우이다.&lt;/p>
&lt;p>(코드 참고(인터넷 액세스를 하는 경우 Playground에서 동작하지는 않는듯하다): &lt;a class="link" href="https://play.golang.org/p/Vfyw6uCOIuL" target="_blank" rel="noopener"
>https://play.golang.org/p/Vfyw6uCOIuL&lt;/a>)&lt;/p>
&lt;blockquote>
&lt;p>사실 Logical Processor 8개, RAM 16GB의 개인 노트북으로는 그 차이가 많이 나지는 않아서 AWS EC2 t2.micro instance에서 성능을 테스트해봤다.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">ubuntu&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nx">ip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">172&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">31&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">~$&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">sem&lt;/span> &lt;span class="nx">semaphore&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">변환하고자하는&lt;/span> &lt;span class="nx">Image들을&lt;/span> &lt;span class="nx">메모리에&lt;/span> &lt;span class="nx">Load했습니다&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2021&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mo">01&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">18&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">28&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">13&lt;/span> &lt;span class="nx">Elapsed&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">1.974380959&lt;/span>&lt;span class="nx">s&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="nx">생략&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2021&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mo">01&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">18&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">28&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">26&lt;/span> &lt;span class="nx">Elapsed&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">1.159552779&lt;/span>&lt;span class="nx">s&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2021&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mo">01&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">18&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">28&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">26&lt;/span> &lt;span class="nx">Elapsed&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">1.016627316&lt;/span>&lt;span class="nx">s&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2021&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mo">01&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">18&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">28&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">26&lt;/span> &lt;span class="nx">Total&lt;/span> &lt;span class="nx">elapsed&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">14.959516003&lt;/span>&lt;span class="nx">s&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">ubuntu&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nx">ip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">172&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">31&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">~$&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">sem&lt;/span> &lt;span class="nx">concurrent&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">변환하고자하는&lt;/span> &lt;span class="nx">Image들을&lt;/span> &lt;span class="nx">메모리에&lt;/span> &lt;span class="nx">Load했습니다&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Killed&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>놀랍게도 동시적으로 30개의 요청을 보내는 경우에 30개의 모든 goroutine이 동시에 작업을 시도할 때에는 과도한 리소스 사용으로 인해 아예 OS가 프로세스를 Kill해버렸다. 즉 &lt;strong>Semaphore로 동시 접근 Worker 수를 제한하지 않는 경우 t2.micro 인스턴스로 돌리는 image 서버에 동시에 30개의 image resizing 요청이 들어오면 process가 죽어버린다&lt;/strong>는 말이다&amp;hellip;!&lt;/p>
&lt;p>또한 앞서 말했듯이 동시에 요청하는 사용자가 많아지더라도 Semaphore을 이용한 경우는 나중에 들어온 요청일 수록 처리가 늘어지지만, Semaphore를 통해 동시 작업을 제한하지 않는 경우는 전체 작업이 늘어진다.&lt;/p>
&lt;p>이렇게 Semaphore는 동시 접근 워커 수를 제한하여 전체적인 Throughput 측면보다는 리소스 소모적인 측면과 먼저 처리될 수 있는 작업은 먼저 처리되도록 할 수 있다는 면에서 장점이 있음을 확인할 수 있었다.&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>Mutex나 Semaphore의 개념이나 설명과 같은 이론적인 내용은 구글링을 통해 어렵지 않게 얻을 수 있는 흔한 지식인 반면, 정확히 언제 쓰면 좋을지, 언제 쓰일 수 있을지와 같은 실용적인 내용은 찾아보기 어려웠기때문에 Go를 통해 Mutex와 Semaphore을 이용해보는 간단한 프로그램을 만들어 실습해보았다.&lt;/p>
&lt;p>예제 프로그램으로서 코드를 간결하고 읽기 쉽게 깔끔하게 제공해보고자했는데, 그러기 쉽지 않았던 것 같아 아쉽다. 다음엔 기회가 되면 go의 benchmark test를 이용해보면 어떨까싶다.&lt;/p>
&lt;h2 id="참고">참고&lt;/h2>
&lt;p>&lt;strong>Goroutine과 Goroutine scheduling에 대해&lt;/strong> - &lt;a class="link" href="https://thegopher.tistory.com/3" target="_blank" rel="noopener"
>https://thegopher.tistory.com/3&lt;/a>&lt;/p>
&lt;p>화장실에 비유한 뮤텍스와 세마포어 - &lt;a class="link" href="https://worthpreading.tistory.com/90" target="_blank" rel="noopener"
>https://worthpreading.tistory.com/90&lt;/a>&lt;/p>
&lt;p>semaphore in Go &lt;a class="link" href="https://medium.com/@deckarep/gos-extended-concurrency-semaphores-part-1-5eeabfa351ce" target="_blank" rel="noopener"
>https://medium.com/@deckarep/gos-extended-concurrency-semaphores-part-1-5eeabfa351ce&lt;/a>&lt;/p>
&lt;p>cooperative vs preemptive - &lt;a class="link" href="https://medium.com/traveloka-engineering/cooperative-vs-preemptive-a-quest-to-maximize-concurrency-power-3b10c5a920fe" target="_blank" rel="noopener"
>https://medium.com/traveloka-engineering/cooperative-vs-preemptive-a-quest-to-maximize-concurrency-power-3b10c5a920fe&lt;/a>&lt;/p>
&lt;p>preemptive scheduling in go - &lt;a class="link" href="https://blog.puppyloper.com/menus/Golang/articles/Goroutine%EA%B3%BC%20Go%20scheduler" target="_blank" rel="noopener"
>https://blog.puppyloper.com/menus/Golang/articles/Goroutine과 Go scheduler&lt;/a>&lt;/p></description></item><item><title>Go vs Java - Go에서의 객체 지향</title><link>https://umi0410.github.io/blog/golang/go-vs-java-oop/</link><pubDate>Sat, 09 Jan 2021 12:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/go-vs-java-oop/</guid><description>&lt;img src="https://umi0410.github.io/blog/golang/go-vs-java-oop/declaration.png" alt="Featured image of post Go vs Java - Go에서의 객체 지향" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>요즘 &lt;code>Go&lt;/code>와 &lt;code>Java&lt;/code> 모두를 이용해 개발을 하다보니 각각의 장단점에 대해 느껴볼 수 있었다. &lt;code>Go&lt;/code>는 리소스를 적게 먹으며 코드가 간결하고 라이브러리나 프레임워크 또한 심플해서 적용하기 편하다. &lt;code>Java&lt;/code>는 이런 저런 기능이 많은 반면 그런 기능을 이용하기 위해 이해해야하는 내용들이 많고, 코드가 투명하지는 않다(다양한 Annotation을 이용하게 되면서 코드가 투명하게 그 동작을 나타내지 않음). Java의 장점 중에서는 특히나 &lt;strong>객체지향의 대표적인 언어답게 상속과 다형성을 능력에 따라 자유자재로 이용&lt;/strong>할 수 있다는 점이 매력적이었다.&lt;/p>
&lt;p>Go 언어를 좋아하는 입장에서 개인적으로 이런 객체지향적인 특징이나 예외 처리를 제외하고는 딱히 Java가 Go에 비해 갖는 장점이 크게 느껴지지 않았다. 예외 처리는 Go가 바라보는 방향이 일반적인 예외 처리와 다르기에 어쩔 수 없지만, 객체지향적의 특징들은 어떻게 적용해볼 수 있을까하는 생각에 공부를 좀 해봤고 그 내용을 정리해본다. (&lt;em>기회가 된다면 Go에서 error를 다루는 철학에 대해 추가적으로 공부해보고싶다.&lt;/em>)&lt;/p>
&lt;p>❗&lt;strong>Go에 대한 기본적인 내용을 정리해보는 것이 아니라 객체 지향 관점에서 바라본 Go에 대한 내용을 정리해보는 것이므로 Go의 기초 내용에 대한 설명은 생략할 것이므로 Go에 대한 기초 이해가 없다면, 그 부분을 먼저 알아보는 것을 추천한다!&lt;/strong>&lt;/p>
&lt;h3 id="예시-코드">예시 코드&lt;/h3>
&lt;p>Go에서 객체 지향을 적용한 간단한 계산기 프로그램을 예시로 작성해보았다. 전체 소스코드를 다 볼 필요는 없겠지만 필요에 따라 참고할 수 있도록 아래와 같이 첨부한다.&lt;/p>
&lt;p>&lt;strong>main 패키지 - /main.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;bufio&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;calculator/calc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;strconv&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;strings&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">calculator&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">calc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Calculator&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">calc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewCalculator&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 계산기 struct
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">operationUnit&lt;/span> &lt;span class="nx">calc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OperationUnit&lt;/span> &lt;span class="c1">// OperationUnit이라는 interface type을 통해 Polymorphism 이용
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">operationResult&lt;/span> &lt;span class="kt">float64&lt;/span> &lt;span class="c1">// 계산 결과를 담음
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">operationErr&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="c1">// 계산 수행에 대한 error을 담음
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// main package에서는 calc package에 정의된 unexported name인 id에 접근할 수 없다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//calculator.id = &amp;#34;Jinsu Park&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">scanner&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">bufio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewScanner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdin&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 연산 option을 위해 값을 입력받기 (e.g. 1)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">`A simple calculator program.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">=======================================================
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">Operation options
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> 1. Mulitply a, b float 64
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> 2. Sqaure val, square float64
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">Please input an int for your desired operation.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">&amp;gt;&amp;gt;&amp;gt; `&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">scanner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Scan&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">option&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">strconv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Atoi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">scanner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Text&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// args를 위해 입력받기 (e.g. 10 20)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Please input floats as args.\n&amp;gt;&amp;gt;&amp;gt; &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">scanner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Scan&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">inputs&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">input&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">scanner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Text&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">strconv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ParseFloat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">64&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">inputs&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inputs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 연산에 대한 multiplexing. 즉 option에 따른 연산을 수행한다는 의미
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// operationUnit이라는 OperationUnit interface type을 통해 Polymorphism 이용
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="nx">option&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">operationUnit&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">calculator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Multiplier&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">operationUnit&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">calculator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SquareMultiplier&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Operate라는 기능을 다양한 동작으로 수행할 수 있다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">operationResult&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">operationErr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">operationUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Operate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inputs&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// result
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">operationErr&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;[Error]&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">operationErr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Result:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">operationResult&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>calc 패키지 - /calc/calc.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">calc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;errors&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">autoIncrementID&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Calculator&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">// 제조된 Calculator을 식별하기 위한 ID. 변수명이 소문자로 시작하므로 export 되지 않는다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">Multiplier&lt;/span> &lt;span class="nx">OperationUnit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">SquareMultiplier&lt;/span> &lt;span class="nx">OperationUnit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">OperationUnit&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">IsValidInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Operate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">MultiplyOperationUnit&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">SquareOperationUnit&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">MultiplyOperationUnit&lt;/span> &lt;span class="c1">// Embed의 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewCalculator&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Calculator&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Calculator&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">autoIncrementID&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Multiplier&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">MultiplyOperationUnit&lt;/span>&lt;span class="p">{},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">SquareMultiplier&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">SquareOperationUnit&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">MultiplyOperationUnit&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">MultiplyOperationUnit&lt;/span>&lt;span class="p">{}},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">autoIncrementID&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">unit&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">MultiplyOperationUnit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">IsValidInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">unit&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">MultiplyOperationUnit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Operate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">unit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">IsValidInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;MultiplyOperationUnit의 args가 유효하지 않습니다.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//func (unit *SquareOperationUnit) IsValidInput(args ...float64) bool{
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ... 필요에 따라 정의하면 Override처럼 이용 가능
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">unit&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">SquareOperationUnit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Operate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// *SquareOperationUnit에 대한 IsValidInput 메소드는 정의한 적 없지만
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Embedding을 통해 일반적인 OOP에서 부모의 메소드를 이용하듯이 이용 가능.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">unit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">IsValidInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SquareOperationUnit의 args가 유효하지 않습니다.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// val^square 즉 &amp;#34;val의 square 제곱&amp;#34;에 대한 계산
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">square&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">reduced&lt;/span> &lt;span class="kt">float64&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="c1">// 제곱 연산 중 값을 담아 놓는 변수
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">cnt&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">float64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 제곱 연산 루프를 위한 counter
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="nx">cnt&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">square&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">cnt&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">reduced&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">unit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MultiplyOperationUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Operate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reduced&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">val&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">reduced&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-vs-java-oop/preview.png"
width="557"
height="307"
srcset="https://umi0410.github.io/blog/golang/go-vs-java-oop/preview_hu606630559448eebea4de9d8c902ece24_23429_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-vs-java-oop/preview_hu606630559448eebea4de9d8c902ece24_23429_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="preview.png"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-vs-java-oop/declaration.png"
width="406"
height="355"
srcset="https://umi0410.github.io/blog/golang/go-vs-java-oop/declaration_hu2809de309117ad963d612eaa5a399aab_35836_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-vs-java-oop/declaration_hu2809de309117ad963d612eaa5a399aab_35836_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="declaration.png"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="274px"
>&lt;/p>
&lt;ul>
&lt;li>Calculator라는 계산기 &lt;code>struct&lt;/code>가 존재
&lt;ul>
&lt;li>✨ &lt;code>id&lt;/code> field는 소문자로 시작하기때문에 외부에서 함부로 접근할 수 없도록 data를 &lt;code>캡슐화&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>계산기에서 각각의 연산을 담당하는 OperationUnit &lt;code>interface&lt;/code>존재&lt;/li>
&lt;li>OperationUnit &lt;code>interface&lt;/code>는 Input의 유효성을 검사하는 IsValidInput 메소드와 연산을 수행하는 Operate 메소드 존재&lt;/li>
&lt;li>각각의 연산을 담당하는 Unit은 OperationUnit interface가 정의한 메소드들을 구현함으로써 duck-typing을 통해 OperationUnit interface로 사용된다. ⇒ ✨ interface를 통한 &lt;code>추상화&lt;/code>와 &lt;code>다형성&lt;/code> 이용 가능
&lt;ul>
&lt;li>OperationUnit interface로 사용이 가능한 struct의 예시
&lt;ul>
&lt;li>MultiplyOperationUnit struct - 곱셈 연산을 담당&lt;/li>
&lt;li>SquareOperationUnit struct - 제곱셈 연산을 담당
&lt;ul>
&lt;li>✨ &lt;code>Embed&lt;/code>를 통해 MultiplyOperationUnit을 &lt;code>상속&lt;/code>한 것처럼 field와 method를 사용 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="객체지향적-관점에서의-go에-대해">객체지향적 관점에서의 Go에 대해&lt;/h2>
&lt;p>Go는 아무래도 객체 지향 언어라고 하지는 않는 듯하다. 이에 대해선 다양한 의견이 있는 것 같은데 Post-OOP 언어라는 사람도 있고 OOP 언어는 아니지만 Object-Oriented하게 할 수 있으므로 OOP 언어이면서 OOP언어가 아니라는 사람도 있다.&lt;/p>
&lt;p>OOP에는 크게 4가지 원칙이 있다.&lt;/p>
&lt;ol>
&lt;li>연관된 변수와 함수를 클래스로 묶으며 외부에서 특정 데이터나 기능에 접근하지 못하도록 하는 정보를 은닉해주는 &lt;strong>캡슐화&lt;/strong>&lt;/li>
&lt;li>부모 객체의 field, method를 자식 객체가 이용할 수 있도록해주고, Override할 수 있게 해주는 &lt;strong>상속&lt;/strong>&lt;/li>
&lt;li>세부 사항은 제외하고, 어떤 기능이 존재하는지 등의 추상적인 정보만으로도 이용할 수 있게 해주는 &lt;strong>추상화&lt;/strong>&lt;/li>
&lt;li>즉 하나의 타입이 여러 타입으로 이용될 수 있으며, 각각이 다양하게 동작할 수 있는 &lt;strong>다형성&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>그리고 대표적인 OOP 언어인 &lt;code>Java&lt;/code>는 이러한 내용들을 아주 잘 이용할 수 있게끔 되어있다. OOP 언어가 아닌 &lt;code>Go&lt;/code>에서 이러한 &lt;strong>OOP의 특징이자 장점인 요소들을 어떻게 적용할 수 있을지&lt;/strong> 알아보도록하겠다.&lt;/p>
&lt;h2 id="-encapsulation캡슐화">💊 Encapsulation(캡슐화)&lt;/h2>
&lt;p>Go에서는 Export를 통해 캡슐화를 이용할 수 있다. Export에 대해 간단히 설명하자면 private, public 을 이용해 변수나 함수에 접근 제한을 두는 것이 아니라 이름이 대문자냐 소문자냐에 따라 패키지 외부에서 접근을 제어하는 것을 말한다.&lt;/p>
&lt;p>Go의 Export 이용 방법은 많이 찾아볼 수 있으니 캡슐화에 초점을 맞춘 그 쓰임에 대해 알아본다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">// Calculator에 대한 정의와 구현을 담당하는 calc 패키지
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">package calc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">type&lt;/span> Calculator struct&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ID int // 제조된 Calculator을 식별하기 위한 ID. 변수명이 소문자로 시작하므로 &lt;span class="nb">export&lt;/span> 되지 않는다.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위와 같이 Calculator를 정의하는 calc라는 패키지가 있다고 가정하다. Calculator를 식별하는 ID에 대한 작업은 calc 패키지에서 담당하고 함부로 외부에서 값을 바꾸지 못하도록하고싶은 경우 field가 소문자로 시작하도록 함으로써 외부 패키지에서 직접 접근하지 못하도록할 수 있다.&lt;/p>
&lt;p>필요에 따라 Java에서 그러하듯 getter와 setter를 정의해줄 수도 있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">package main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func main&lt;span class="o">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var &lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> calculator *calc.Calculator &lt;span class="o">=&lt;/span> calc.NewCalculator&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // main package에서는 calc package에 정의된 unexported name인 id에 접근할 수 없다.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //calculator.id &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Jinsu Park&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>앞서 말했듯이 이렇게 calc 패키지가 아닌 외부 패키지(예를 들어 main 패키지)에서는 unexported name인 id에 접근할 수 없다.&lt;/p>
&lt;p>주로 캡슐화와 Go에 대해선 은닉을 어떻게 하는가가 요점이라고 생각해 이 부분에 대해 다뤄보았다.&lt;/p>
&lt;blockquote>
&lt;p>자세한 내용은? - 연관된 변수와 함수를 묶어주는 내용은 Go의 struct, receiver와 method 등에 대해 검색해보면 더 깊이 알아볼 수 있다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="-inheriatance상속">👩‍👧‍👦 Inheriatance(상속)&lt;/h2>
&lt;p>Go는 Composition을 이용한 Embedding이라는 방식을 통해 Inheritance와 같은 기능을 이용할 수 있게 해준다는 식으로 많이들 설명을 하는 것 같았으나 주관적인 해석을 해보자면 Go의 &lt;code>Embedding&lt;/code>은 &lt;strong>Composition이면서 자동으로 embed된 field의 method와 본인의 method인 것처럼 사용할 수 있게 해주기에 Inheritance처럼 이용&lt;/strong>할 수 있다고 볼 수 있겠다.&lt;/p>
&lt;p>Go의 Embedding은 struct의 field에 별도의 name이 아닌 type만을 적어줌으로써 이용할 수 있다. B라는 type이 는 메소드 Say()를 가지고 있는 경우 struct A가 type B를 Embed한다면 A는 B의 Say 메소드를 두 가지 방법으로 이용 가능하다.&lt;/p>
&lt;ol>
&lt;li>&lt;code>A.Say()&lt;/code> - 이경우 암묵적으로 2.로 변환되어 수행되는 셈&lt;/li>
&lt;li>&lt;code>A.B.Say()&lt;/code> - 이렇게 명시적으로 &lt;code>Selector&lt;/code>(여기선 B)를 적어줄 수도 있다. 일반적인 &lt;code>Composition&lt;/code>과 동일하다.&lt;/li>
&lt;/ol>
&lt;p>&lt;em>Go에서 Embedding을 사용하는 방법 자체 또한 많은 내용을 인터넷에서 찾아볼 수 있으니 &lt;strong>상속과 Embedding에 초점을 맞춰 설명해보도록하겠다.&lt;/strong>&lt;/em>&lt;/p>
&lt;p>일반적인 객체 지향적인 방식에서는 &lt;code>type MultiplyOperationUnit struct&lt;/code> 라는 type이 존재하고&lt;/p>
&lt;p>&lt;code>type SquareOperationUnit struct&lt;/code> 가 &lt;code>MultiplyOperationUnit&lt;/code> type을 상속받는다면 SquareOperationUnit은 IsValidCheck 메소드를 비롯한 MultiplyOperationUnit의 메소드와 멤버 변수를 이용할 수 있을 것이다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">MultiplyOperationUnit&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">SquareOperationUnit&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">MultiplyOperationUnit&lt;/span> &lt;span class="c1">// type만을 전달함으로써 Embed
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 곱셈 연산에 대한 Input validation
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">unit&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">MultiplyOperationUnit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">IsValidInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">unit&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">MultiplyOperationUnit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Operate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">unit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">IsValidInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;MultiplyOperationUnit의 args가 유효하지 않습니다.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">unit&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">SquareOperationUnit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Operate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// *SquareOperationUnit에 대한 IsValidInput 메소드는 정의한 적 없지만
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Embedding을 통해 일반적인 OOP에서 부모의 메소드를 이용하듯이 이용 가능.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">unit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">IsValidInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SquareOperationUnit의 args가 유효하지 않습니다.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 경우 Go에서는 SquareOperationUnit이 MultiplyOperationUnit을 Embed하도록 한다. 평범한 Compostion 방식으로 이용할 수 있겠지만 Go의 특이한 Embed 방식을 이용함으로써 &lt;code>*SquareOperationUnit&lt;/code> 에 대한 &lt;code>IsValidInput&lt;/code> &lt;strong>메소드를 정의한 적 없지만 일반 OOP에서 부모 클래스에 정의된 메소드를 이용하듯&lt;code>unit *SquareOperationUnit&lt;/code>과 같이 이용 가능&lt;/strong>하다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">unit&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">SquareOperationUnit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">IsValidInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>OOP에서의 Method Override와 같은 작업을 Go에서 하고싶다면 위와 같이 추가적으로 자신의 타입에 대한 method를 정의하면된다. 메소드를 추가적으로 정의해준 뒤 Selector를 지정하지 않으면 당연히 우리가 바란대로 Embed된 type의 method가 아닌 자기 자신의 method를 호출하게 된다.&lt;/p>
&lt;blockquote>
&lt;p>자세한 내용은? - 아무래도 Go의 Embedding과 Composition에 대한 이해가 없다면 무슨 말인지 이해하기 힘들 수 있다. 따라서 해당 내용들에 대해 알아볼 것을 추천!&lt;/p>
&lt;/blockquote>
&lt;h2 id="abstraction추상화">Abstraction(추상화)&lt;/h2>
&lt;p>추상화는 그 객체의 세부 내용이 아닌 공통된 기능을 바탕으로 추려내는 것을 의미한다.&lt;/p>
&lt;p>추상화에 있어서는 Java와 Go가 interface를 이용한다는 점에서 크게 다르진 않다.&lt;/p>
&lt;p>interface에 추상적으로 해당 interface를 구현하는 type들이 구현하기를 바라는 method를 정의만한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">OperationUnit&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">IsValidInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Operate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 경우 OperationUnit는 &amp;ldquo;IsValidInput과 Operate 기능을 수행할 수 있는 무언가&amp;rdquo; 이라고 추상화된 것이다.&lt;/p>
&lt;blockquote>
&lt;p>자세한 내용은? - 추상화의 쓰임은 다형성의 쓰임과도 밀접한 연관이 있다. Go에서 interface를 사용하는 패턴과 사용법에 대해 알아보면 좋을 것 같다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="-polymorphism다형성">🌒🌓🌕 Polymorphism(다형성)&lt;/h2>
&lt;p>&lt;code>다형성&lt;/code>이란 &lt;strong>한 가지 타입이 경우에 따라 같은 기능에 대해 다양한 동작을 수행&lt;/strong>할 수 있는 것을 말한다. &lt;strong>추상화는 interface에 대한 정의&lt;/strong>에 해당하고 &lt;strong>다형성은 interface 활용&lt;/strong>에 해당하는 듯하다.&lt;/p>
&lt;p>일반적인 OOP 언어에서는 interface가 아닌 상속 관계에서도 부모⇒자식으로 타입 변환을 통해 다형성 활용이 가능하다. 하지만 Go는 이를 지원하지 않는다. 이유는 런타임에 동적으로 method dispatch(해당 type의 객체 혹은 value가 어떤 함수를 메소드로 할 지 결정하는 것)을 수행함으로 인한 오버헤드를 줄이기 위해서 컴파일 타임에 정적으로 method dispatch할 수 있게 하기 위해서라고한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">OperationUnit&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">IsValidInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Operate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">MultiplyOperationUnit&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">SquareOperationUnit&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">MultiplyOperationUnit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="nx">각종&lt;/span> &lt;span class="nx">메소드&lt;/span> &lt;span class="nx">정의&lt;/span> &lt;span class="nx">생략&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">calculator&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">calc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Calculator&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">calc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewCalculator&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">operationUnit&lt;/span> &lt;span class="nx">calc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OperationUnit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">operationResult&lt;/span> &lt;span class="kt">float64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">operationErr&lt;/span> &lt;span class="kt">error&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 연산에 대한 multiplexing. 즉 option에 따른 연산을 수행한다는 의미
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="nx">option&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">operationUnit&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">calculator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Multiplier&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">operationUnit&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">calculator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SquareMultiplier&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">operationResult&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">operationErr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">operationUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Operate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inputs&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// result
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">operationErr&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;[Error]&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">operationErr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Result:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">operationResult&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>operationUnit이라는 Interface에 다른 type의 struct인 calculator.Multiplier와 calculator.SquareMultiplier가 담길 수 있다.&lt;/p>
&lt;p>이를 통해 &lt;code>operationUnit.Operate()&lt;/code> 는 &lt;strong>경우에 따라 &amp;ldquo;&lt;em>연산&lt;/em>&amp;ldquo;이라는 기능으로 &lt;em>Multipliy&lt;/em> 작업을 수행할 수도 있고, &lt;em>SqaureMultipliy&lt;/em> 작업을 수행할 수도 있는데, 이를 다형성&lt;/strong>이라고 한다.&lt;/p>
&lt;h2 id="go에서의-객체-지향의-한계점과-장점">Go에서의 객체 지향의 한계점과 장점&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">public&lt;/span> &lt;span class="nx">class&lt;/span> &lt;span class="nx">Example&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">public&lt;/span> &lt;span class="nx">static&lt;/span> &lt;span class="nx">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">String&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Parent class와 Parent를 extends한 Child class에 대한 구현은 생략한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">Parent&lt;/span> &lt;span class="nx">parent&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">new&lt;/span> &lt;span class="nf">Parent&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Parent&lt;/span> &lt;span class="nx">child&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">new&lt;/span> &lt;span class="nf">Child&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">parent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ShowMetaData&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// parent.GetName() 이용
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="cm">/* Output
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> =======================================
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> Name: Parent
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> =======================================
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">child&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ShowMetaData&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// child.GetName()이용.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 이 때에는 .ShowMetaData()가 Parent class가 아닌 Child class가 Override한 GetName() 이용
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="cm">/* Output
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> =======================================
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> Name: Child of Parent
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> =======================================
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>객체 지향 프로그래밍에선 &lt;strong>부모 클래스에 정의된 메소드가 내부에서 자식이 Override한 메소드를 이용할 수도 있는데, Go는 그런 기능은 이용할 수 없다는 점이 가장 큰 한계점&lt;/strong>인 것 같다.&lt;/p>
&lt;p>예를 들어 Parent class의 .ShowMetaData()라는 method가 .GetName()이라는 메소드를 호출하는 경우, java에서는 Child가 GetName을 Override하면 child.ShowMetaData() 호출 시에 Child가 Override한 child.GetName()을 이용하지만, Go는 그럴 수 없다. 필요한 경우 함수를 인자나 field로 전달함으로써 사용할 수 있겠지만, 사용성이 제한적이다. 이 내용에 대해 여기서 설명하면 글이 길어질 것 같아 자세한 묘사는 생략하겠다.&lt;/p>
&lt;p>반면 Go에서의 객체 지향은 &lt;strong>장점&lt;/strong>은 이 글(&lt;a class="link" href="https://www.toptal.com/go/golang-oop-tutorial" target="_blank" rel="noopener"
>https://www.toptal.com/go/golang-oop-tutorial&lt;/a>)의 후반부에 잘 나와있는데, &lt;strong>굳이 Java를 이용하지 않아도 이렇게 OOP가 충분히 가능하다&lt;/strong>는 것이 핵심이다. Java의 VM/JIT으로 인한 리소스 부족, 자유도가 떨어지는 프레임워크, 많은 annotation, &amp;hellip; 등등의 단점 없이도 충분히 Go를 통해 가볍게 OOP 할 수 있다는 것이 장점이다.&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>아무래도 객체 지향적 개발을 하는 데에 있어서는 Java가 좀 더 직관적으로 그대로 설계, 구현해서 이용이 가능한 것 같다. 처음 Java를 공부했을 때부터 Java는 객체지향적으로 개발하는 패턴에 대해 수없이 많은 예제가 존재했고, 그 패턴이 명확했던 반면 Go는 명확한 패턴이나 깔끔하게 정의가 없다(&lt;em>이런 식으로 OOP 원칙을 이용해볼 수 있지 않을까~ 정도&lt;/em>). 아마 애초에 Go는 객체 지향 언어로 설계하지 않았기 때문이 아닐까싶다.&lt;/p>
&lt;p>이를 계기로 Go에서는 OOP 원칙들이 어떻게 다양하게 적용할 수 있는지 좀 더 자세히 알아볼 수 있었다.&lt;/p>
&lt;h2 id="참고">참고&lt;/h2>
&lt;ul>
&lt;li>[번역] Go와 OOP - &lt;a class="link" href="https://mingrammer.com/translation-go-and-oop/" target="_blank" rel="noopener"
>https://mingrammer.com/translation-go-and-oop/&lt;/a>&lt;/li>
&lt;li>Golang OOP tutorial - &lt;a class="link" href="https://www.toptal.com/go/golang-oop-tutorial" target="_blank" rel="noopener"
>https://www.toptal.com/go/golang-oop-tutorial&lt;/a>&lt;/li>
&lt;li>go object-oriented - &lt;a class="link" href="https://golangkorea.github.io/post/go-start/object-oriented/" target="_blank" rel="noopener"
>https://golangkorea.github.io/post/go-start/object-oriented/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Go 언어로 적용해보는 Computer Science - Deadlock</title><link>https://umi0410.github.io/blog/golang/go-deadlock/</link><pubDate>Sun, 31 Jan 2021 18:25:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/go-deadlock/</guid><description>&lt;img src="https://umi0410.github.io/blog/golang/go-deadlock/pprof-debugging-1.png" alt="Featured image of post Go 언어로 적용해보는 Computer Science - Deadlock" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>개발 공부를 시작하고 여태까지 몇 년간 데드락을 실제로 접할 일은 없었다. 사실 동시성을 주의해야하는 작업을 해본 적도 없었고, 트랜잭션에 대한 개념도 없었기 때문일 수도 있다. 전공 과목에서 데드락에 대한 내용을 듣고서도 &amp;lsquo;&lt;em>아 이런 게 있구나&lt;/em>&amp;rsquo; 정도로만 생각하고 넘겼었다. 하지만 Go 언어를 통해 개발을 하던 도중 &lt;code>Channel&lt;/code>이나 &lt;code>Mutex&lt;/code>로 인해 종종 데드락을 경험할 수 있었고, 이 경우 프로그램이 완전히 멈춰버리는 크리티컬한 문제가 발생하기도 했고, 디버깅하기 힘든 경우도 있었다. 그런 경험을 하면서 &amp;lsquo;&lt;em>데드락 이 녀석&amp;hellip; 만만치 않구나&lt;/em>&amp;lsquo;라는 생각을 하곤 했다.&lt;/p>
&lt;p>이번 글에서는 &lt;strong>&lt;code>Golang&lt;/code> 즉 &lt;code>Go&lt;/code> 언어를 통해 어떤 경우에 &lt;code>Deadlock&lt;/code>이 발생할 수 있는지 실제 프로그램을 통해 알아보려한다.&lt;/strong> Mutex에 대한 &lt;code>Lock&lt;/code>과 같이 일반적으로 발생할 수 있는 데드락부터 &lt;code>channel&lt;/code>이나 &lt;code>goroutine&lt;/code>에 대한 &lt;code>Cooperative scheduling&lt;/code>과 같은 Go 언어에 특화된 내용까지를 정리해보았다.&lt;/p>
&lt;h2 id="deadlock이란">Deadlock이란&lt;/h2>
&lt;blockquote>
&lt;p>Deadlock이란 교착상태를 의미하며 두 개 이상의 작업이 서로 상대방의 작업이 끝나기만을 기다리고 있기 때문에 결과적으로 아무것도 완료되지 못하는 상태를 가리킨다. - 위키백과 -&lt;/p>
&lt;/blockquote>
&lt;p>데드락의 개념 자체는 그리 어렵지 않고, 예시를 통해서 쉽게 이해가 가능하다. 위키 백과에 나온 예시를 인용하자면 하나의 사다리에 위에서 내려오려는 사람, 아래에서 올라가는 사람이 동시에 올라가있으면 아무도 내려오거나 올라가지 못하는 경우를 예로 들 수 있다.&lt;/p>
&lt;h3 id="교착-상태의-조건">교착 상태의 조건&lt;/h3>
&lt;p>더 자세히 정의나 의미에 대해 설명할 것은 없을 듯하고, 학문적으로는 주로 아래의 4가지 조건을 통해 발생한다고 설명하는 것 같다.&lt;/p>
&lt;ol>
&lt;li>상호 배제 (Mutual exclusion) - 하나의 자원을 동시에 사용하지 못하도록 하는 것&lt;/li>
&lt;li>점유 상태로 대기 (Hold and wait) - 하나의 자원을 소유한 상태로 다른 자원을 기다리고 있는 상태&lt;/li>
&lt;li>선점 불가 (No preemption) - 컴퓨터 분야에서의 선점은 한국말의 선점과 다소 다른 의미. process 혹은 goroutine의 자원을 빼앗는 것을 선점이라고 함. 선점 불가란 그럴 수 없는 상태.&lt;/li>
&lt;li>순환성 대기 (Circular wait) - 각 프로세스가 순환적으로 다음 프로세스가 요구하는 자원을 가지고있다. 쉽게 2개의 프로세스를 예로 들면 A는 B가 소유 중인 자원을, B는 A가 소유 중인 자원을 얻으려고 대기 중인 상황을 말함.&lt;/li>
&lt;/ol>
&lt;p>Deadlock의 개념 자체가 어렵다거나 위의 4가지 조건을 암기하는 것이 중요한 것은 아니라고 생각한다. 중요한 것은 실제로 어떤 경우에 데드락이 발생할 수 있을 지 파악하고 주의하는 것과 그 경우 어떻게 해결할 수 있을지 인지하는 것이라고 생각한다. 그럼 Go 언어로 간단한 프로그램을 짜보며 알아보자.&lt;/p>
&lt;h2 id="go에서-발생할-수-있는-deadlock">Go에서 발생할 수 있는 Deadlock&lt;/h2>
&lt;h3 id="channel">Channel&lt;/h3>
&lt;p>주로 채널을 접한 지 얼마 안 되어 그 동작 방식을 잘 이해하지 못한 채 사용할 경우 채널로 인한 데드락이 발생한다.&lt;/p>
&lt;h4 id="unbuffered-channel">Unbuffered channel&lt;/h4>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-deadlock/unbuffered-channel-1.png"
width="658"
height="523"
srcset="https://umi0410.github.io/blog/golang/go-deadlock/unbuffered-channel-1_hu10a616b58d6a106d3f4b8196ebfc4c11_56914_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-deadlock/unbuffered-channel-1_hu10a616b58d6a106d3f4b8196ebfc4c11_56914_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="unbuffered-channel-1.png"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;p>특히나 unbuffered channel에 대한 미숙한 사용은 자주 데드락을 야기한다. &lt;code>unbuffered channel&lt;/code>에서 발생하는 일반적인 데드락의 의미인 2개 이상의 작업 서로의 작업이 완료되기를 대기하는 교착 상태와는 약간 다르다고 볼 수도 있다. 왜냐하면 &lt;code>sender&lt;/code>와 &lt;code>receiver&lt;/code> 중 누군가가 먼저 작업을 끝내야지 그 다음으로 누군가가 작업을 수행할 수 있는 것이 아니라 &lt;strong>서로 동시에 협력해야만 unbuffered channel에 대한 대기를 끝낼 수 있는데 이 경우는 동시에 협력해줄 그 누군가(receiver)가 없는 경우&lt;/strong>이기 때문이다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-deadlock/unbuffered-channel-2.png"
width="524"
height="280"
srcset="https://umi0410.github.io/blog/golang/go-deadlock/unbuffered-channel-2_huc23feddb7907332ddbd012773a8469b8_20930_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-deadlock/unbuffered-channel-2_huc23feddb7907332ddbd012773a8469b8_20930_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="unbuffered-channel-2.png"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="449px"
>&lt;/p>
&lt;p>그렇다고해서 위와 같이 자기 혼자 send와 receive를 하려해봤자 Unbuffered channel은 sender와 receiver가 모두 ready여야 작업을 진행할 수 있기 때문에 불가능하다. (&lt;em>Unbuffered channel의 동작에 대해 좀 더 궁금하신 분들은 제가 번역에 참여한 &lt;a class="link" href="https://go-tour-ko.appspot.com/concurrency/2" target="_blank" rel="noopener"
>A Tour of Go&lt;/a>를 참고해주시면 감사하겠습니다!&lt;/em>)&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-deadlock/unbuffered-channel-3.png"
width="667"
height="474"
srcset="https://umi0410.github.io/blog/golang/go-deadlock/unbuffered-channel-3_hu79ddac0bd959ff7fccac87fc3364f23d_48295_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-deadlock/unbuffered-channel-3_hu79ddac0bd959ff7fccac87fc3364f23d_48295_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="unbuffered-channel-3.png"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="337px"
>&lt;/p>
&lt;p>따라서 &lt;strong>다른 goroutine에서 A에 대한 receiver 역할을 해주면 된다.&lt;/strong>&lt;/p>
&lt;h3 id="buffered-channel">Buffered channel&lt;/h3>
&lt;blockquote>
&lt;p>Buffered channel을 이용하면 어떨지 좀 더 자세히 들어가보자. 독자분께서 Go의 channel에 대해 별 관심이 없다면 패스~!&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-deadlock/buffered-channel-1.png"
width="668"
height="474"
srcset="https://umi0410.github.io/blog/golang/go-deadlock/buffered-channel-1_hu3ce95aebbfcae3388bc01c477c5405bf_44856_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-deadlock/buffered-channel-1_hu3ce95aebbfcae3388bc01c477c5405bf_44856_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="buffered-channel-1.png"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="338px"
>&lt;/p>
&lt;p>맨 처음에 Unbuffered channel에서는 위와 같이 한 goroutine에서 sender와 receiver 역할 모두를 수행하려해도 이미 sender에서 block이 걸려버려 deadlock을 야기한다고 했으나 buffered channel에서는 그렇지 않다! &lt;strong>buffered channel은 buffer size까지는 입력 작업이 블락되지 않기 때문&lt;/strong>이다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-deadlock/buffered-channel-2.png"
width="672"
height="609"
srcset="https://umi0410.github.io/blog/golang/go-deadlock/buffered-channel-2_hu5d060740dcd194dde0764aece5d1bf11_61778_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-deadlock/buffered-channel-2_hu5d060740dcd194dde0764aece5d1bf11_61778_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="buffered-channel-2.png"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="264px"
>&lt;/p>
&lt;p>하지만 &lt;strong>buffer size를 넘어서는 순간부터는 receiver가 channel 내의 아이템을 꺼내어 줄 때까지 block되어버리므로 주의&lt;/strong>해야한다.&lt;/p>
&lt;h3 id="mutexlock의-중첩">Mutex.Lock의 중첩&lt;/h3>
&lt;p>&lt;code>Mutex&lt;/code>의 구현에 따라 다르겠지만 Go에서는 Lock이 걸린 자물쇠에 다시 자기가 Lock을 걸려해도 Unlock이 될 때까지는 Lock을 걸 수 없다. 즉 어떤 Mutex에 Lock을 건 것이 자신(Goroutine)이라 해도 해당 Mutex에 또 다시 Lock을 걸려하면 그 작업은 Mutex가 Unlock 될 때까지 블락되고 결과적으로는 Deadlock 상태가 되어버린다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;sync&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">scores&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Mutex&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Mutex&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Lock을 건 뒤 안전하게 topScore를 구함.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">GetTopScore&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">playerIndex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">topScore&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">topScore&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">idx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">score&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">scores&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">topScore&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">score&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">playerIndex&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">idx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">topScore&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">score&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// GetTopScore는 이미 Lock을 이용해 thread safe하게 작업하는데
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 그걸 인지하지 못하고 실수로 그 밖인 Award에서 Lock을 걸어버림.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">Award&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">playerIdx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">topScore&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">GetTopScore&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d가 %d의 점수로 우승했습니다!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">playerIdx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">topScore&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Award&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// deadlock 발생
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위의 예시에는 thread-safe하게 top score를 구하는 &lt;code>GetTopScore&lt;/code> 함수가 선언되어있다. 하지만 &lt;code>Award&lt;/code> 함수에서 이미 &lt;code>GetTopScore&lt;/code>는 scores에 대해 &lt;code>thread-safe&lt;/code>함에도 불구하고 Lock을 걸고 &lt;code>GetTopScore&lt;/code>를 수행하려하기 때문에 데드락이 발생한다. 이 경우에는 &lt;strong>inner인 GetTopScore 혹은 outer인 Award 둘 중 한 곳에서만 Lock, Unlock 작업을 수행&lt;/strong>하도록 해주어야한다.&lt;/p>
&lt;p>inner에서 Lock/Unlock을 담당하는 게 옳을 지 outer에서 Lock/Unlock을 담당하는 게 옳을 지는 잘 모르겠다. inner에서 Lock/Unlock을 담당하면 outer에서는 데드락으로 인해 절대 Lock/Unlock을 못한다는 단점이 있지만, 해당 작업은 언제나 Atomic하게 thread-safe하다는 것이 보장된다는 장점이 있다. 반면 outer에서 Lock/Unlock을 담당하도록하면 비교적 자유자재로 Lock/Unlock을 명령할 수 있는 반면 thread-safe해야할 내부 작업이 unsafe해질 수도 있다. 실수로 Lock/Unlock 작업을 잊어버릴 수 있기 때문이다. 하지만 무엇보다도 &lt;strong>inner에서 Lock/Unlock을 담당할 지 outer에서 담당할 지를 정확히 정할 수 없는 이유는 outer도 결국엔 또 다른 outer의 inner가 될 수 있기 때문&lt;/strong>이라고 생각한다.&lt;/p>
&lt;h3 id="cooperative-scheduling-방식에서의-무한-loop">Cooperative scheduling 방식에서의 무한 Loop&lt;/h3>
&lt;p>Goroutine scheduler가 &lt;strong>Goroutine을 스케쥴링 하는 방식은 Go 1.14 이전까지는 Cooperative 방식이었으나, Go 1.14 부터는 Preemptive한 방식으로 바뀌었다&lt;/strong>고 한다. OS가 Go process의 thread를 스케쥴 하는 방식은 OS 마다 다르겠지만 대체로 preemptive할 것이고 여기서 얘기하려는 스케쥴러는 Goroutine을 스케쥴링하는 Goroutine scheduler임을 주의하자.&lt;/p>
&lt;p>Goroutine은 syscall와 mutex, channel, 함수 콜 등으로 인해 switch 될 수 있는데, &lt;strong>cooperative 방식을 이용하는 경우에는 이러한 goroutine switch 조건에 해당하지 않는 경우 임의로 goroutine switch 함수를 호출하지 않는 한은 같은 스레드 내의 다른 goroutine은 절대로 실행될 수 없다&lt;/strong>. preemption(선점) 즉 다른 goroutine을 block 상태로 만들어버리고 자신이 CPU를 선점하는 것이 불가능했기 때문이다. 하지만 Go 1.14부터는 약 10ms를 기준으로 preemption을 수행하고 있다. Asynchronous preemption이라고 부르는 것 같은데, 정확히 왜 asynchronous인지, 기존의 preemptive schedule과는 무엇이 다른지는 찾아봤으나 제대로 설명되어있는 곳을 찾지 못했다.&lt;/p>
&lt;p>앞으로 이어지는 내용은 &lt;em>데드락에 대한 예시라기 보다는 &amp;lsquo;cooperative 스케쥴링과 preemptive 스케쥴링의 차이로 인해 데드락이 발생할 수도 있고 발생하지 않을 수도 있구나&amp;rsquo;에 대해 알아보는 예시&lt;/em>이다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Foo&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;No Deadlock. 나도 실행될 수 있어!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="nf">Foo&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dummy&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1">// 그냥 for 문 안에서 dummy 작업을 수행하기 위한 변수
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dummy&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>for 문 안에서는 함수콜도 syscall도 channel/mutex도 아닌 goroutine swtich와 관련 없는 &lt;code>dummy += 1&lt;/code> 작업만을 수행하고 있다. 이 경우 &lt;code>go Foo()&lt;/code>를 통해 goroutine을 생성하긴 하지만 그 goroutine은 바로 실행되는 것이 아니라 대기 상태이며 만약 스레드가 하나라면 cooperative 스케쥴링으로는 Foo라는 goroutine이 실행될 수가 없을 것이다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Go 버전 &amp;gt;= 1.14 일 때에도 Deadlock 발생&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nv">GOMAXPROCS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="nv">GODEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">asyncpreemptoff&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> go run main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>GOMAXPROCS=1&lt;/code> - Go 프로그램이 사용할 최대 OS Thread 개수를 1개로 제한함으로써 여러 스레드에서 Goroutine이 실행되는 것을 방지. (데드락을 야기해보려는 조건)&lt;/li>
&lt;li>&lt;code>GODEBUG=asyncpreemptoff=1&lt;/code> - Go 1.14부터 적용된 Asynchronous preemptive scheduling을 사용하지 않는 옵션&lt;/li>
&lt;/ul>
&lt;p>이 경우 Go 버전이 1.14 이상이라면 Foo는 실행되지 않는다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Go 버전 &amp;gt;= 1.14인 경우 async preemption으로 인해 Deadlock 발생 X&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nv">GOMAXPROCS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> go run main.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">No Deadlock. 나도 실행될 수 있어!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>하지만 asyncpreemptoff 옵션을 생략하면 기본적으로 선점형 스케쥴링이 지원되므로 이 경우엔 Deadlock이 발생하지 않고 Foo() 함수가 실행되는 것을 &amp;ldquo;No Deadlock. 나도 실행될 수 있어!&amp;rdquo; 라는 Stdout을 통해 볼 수 있다.&lt;/p>
&lt;h4 id="pprof를-이용한-goroutine-schedule-시각화">pprof를 이용한 goroutine schedule 시각화&lt;/h4>
&lt;p>하지만 정말로 async preemption이 동작했기 때문에 데드락에 빠지지 않은 것인지 다른 이유 때문인지는 그닥 직관적으로 와닿지 않는다. 그래서 몇몇 외국 블로그의 글에서 봤던 &lt;code>pprof&lt;/code>라는 도구를 사용해봤고, 처음엔 사용법이 다소 어려웠지만 조금 익숙해지니 너무나도 편리했다.
&lt;code>pprof&lt;/code>는 &lt;code>net/http&lt;/code> 패키지 하위에 존재하고, Goroutine scheduling, syscall log, CPU 사용 등을 시각화해서 보여주는 간편한 디버깅 도구이다.
요청을 날리면 요청 이후 N초 간의 goroutine scheduling에 대한 정보를 기록해 보여주는 기능을 이용해보았다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-deadlock/pprof-debugging-1.png"
width="547"
height="502"
srcset="https://umi0410.github.io/blog/golang/go-deadlock/pprof-debugging-1_hu27a13bf8dcdafb0aaff224765e3a83ab_59369_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-deadlock/pprof-debugging-1_hu27a13bf8dcdafb0aaff224765e3a83ab_59369_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="pprof-debugging-1.png"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="261px"
>&lt;/p>
&lt;p>End Stack Trace를 통해 어떤 작업으로 인해 goroutine이 잠시 중단되고 CPU를 다른 goroutine에게 양보하게 되는지 알 수 있다. 놀랍게도 dummy에 대한 무한 루프 진행 도중 처음으로 &lt;strong>async preemption이 발생한 뒤 이어서 Foo 함수를 실행하는 goroutine이 CPU를 점유&lt;/strong>하게 된다는 것을 시각적으로 볼 수 있다.&lt;/p>
&lt;p>Wall Duration은 해당 고루틴 블럭을 수행한 시간으로 보여지고 약 10ms를 기준으로 preemptive하게 switch가 일어날 수 있다는 여러 블로그의 글들과 유사하게 15,021,904ns, 즉 약 15ms만에 asyncPreempt라는 이벤트로 인해 goroutine switch가 일어났다.
cooperative 스케쥴링만을 이용하는 경우에는 데드락으로 인해 한 번도 Foo를 실행하는 goroutine이 수행되지 못한다는 것도 시각화해서 제공해보고싶었지만, 당연하게도 그 데드락으로 인해 일정 기간동안 runtime을 관찰한 뒤 그 정보를 저장하는 goroutine 조차 실행할 수 없어 그 정보를 얻을 수 없었다!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># Go의 버전을 1.13으로 제한해본다.&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> golang:1.13&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;run&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;main.go&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ docker build . -t tmp &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> docker run -it --rm -e &lt;span class="nv">GOMAXPROCS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> tmp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>그렇다면 정말 Go의 1.14 이전 버전은 Preemptive한 방식이 아니라 Cooperative한 방식을 이용하고, 이 경우 데드락이 발생할까? 이전 글들과 마찬가지로 Docker를 이용해 간편하게 Go의 버전을 변경해서 실행해보자. golang:1.13 이미지를 이용해보았다.&lt;/p>
&lt;p>1.13 버전 이하로는 &lt;code>GODEBUG=asyncpreemptoff=1&lt;/code> 옵션을 설정하지 않아도 cooperative한 스케쥴링만을 지원하므로 프로그램이 데드락 상태에 빠져 Foo()가 실행되지 못함을 알 수 있다.&lt;/p>
&lt;h4 id="참고-사항-gomaxprocs1-옵션을-주는-이유는">참고 사항) GOMAXPROCS=1 옵션을 주는 이유는?&lt;/h4>
&lt;blockquote>
&lt;p>The GOMAXPROCS variable limits the number of operating system threads that can execute user-level Go code simultaneously. - go rutime package 문서 -&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>GOMAXPROCS&lt;/code>는 &lt;strong>Go 프로그램이 사용할 수 있는 최대의 OS 스레드 개수&lt;/strong>를 의미한다. 만약 OS 스레드가 2개 이상으로 생성된다면 위의 경우 main goroutine과 함수 Foo를 실행하는 Goroutine이 서로 다른 스레드에 배치될 것이고, 그 경우 &lt;strong>Go의 스케쥴러가 Cooperative한 방식을 이용한다해도 OS 스케쥴러가 Preemptive하게 각각의 Go 스레드(OS Level)를 스케쥴&lt;/strong>하기 때문에 Foo goroutine도 실행될 수 있는 기회가 주어진다. 이 경우에는 데드락이 발생하지 않는다. 따라서 &lt;strong>우리는 데드락을 발생시켜보고자 GOMAXPROCS를 1로 제한&lt;/strong>한다.&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>Go를 이용해 실제 프로그램을 짜보며 어떤 경우에 Deadlock이 발생할 수 있는지 알아보았다. 이 글에선 서로 같은 Mutex를 이용하는 경우를 예시로 들었지만 서로 다른 두 Mutex를 통해 서로의 작업을 기다리는 경우의 Deadlock도 거의 유사하며 일반적으로 말하는 Deadlock에 가장 가까운 경우이긴할 것이다. 그래도 Go로 개발을 하면서 아직 서로 다른 Mutex를 이용했던 경우가 딱히 없었기에 같은 Mutex에 중첩으로 Lock을 걸었던 경우를 예시로 들어보았다.&lt;/p>
&lt;p>&lt;code>Channel&lt;/code>이나 &lt;code>Cooperative scheduling&lt;/code>의 경우는 어느 정도 Go에 한정적인 내용이고 특히나 스케쥴링은 런타임이나 고루틴 스케쥴 방식까지 내려가는 세부적인 내용이긴하지만 Go에 특히 관심 있으신 분들께는 나름 재미있는 내용이 되지 않았을까싶다.&lt;/p>
&lt;p>그리고 이전 글에선 &lt;code>testing&lt;/code>의 &lt;code>benchmark&lt;/code>를 이용해 좀 더 정확하고 편리한 벤치마킹을 도입해봤다는 점과
이번엔 추가적으로 &lt;code>pprof&lt;/code>를 이용해 &lt;code>goroutine 스케쥴링&lt;/code>을 시각화해봤다는 점에서 Golang으로 적용해보는 컴퓨터 사이언스라는 이 시리즈를 처음 시작했을 때에 비해 컴퓨터 사이언스 뿐만 아니라 디버깅 기술이나 스케쥴링 방식 등등 다양한 주제에 대해서도 공부해보고 적용해볼 수 있었던 것 같아 뿌듯하다.
다소 Go만의 지엽적인 내용으로 여겨질 수도 있겠지만 추후에 내가 어떤 언어를 공부하든 어떤 기술을 공부하든 이러한 경험들을 얼마든지 녹여낼 수 있을 것이라 생각한다!!&lt;/p>
&lt;h2 id="참고">참고&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Go: How are Deadlocks Triggered? &lt;a class="link" href="https://medium.com/a-journey-with-go/go-how-are-deadlocks-triggered-2305504ac019" target="_blank" rel="noopener"
>https://medium.com/a-journey-with-go/go-how-are-deadlocks-triggered-2305504ac019&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Go: What Does a Goroutine Switch Actually Involve? &lt;a class="link" href="https://medium.com/a-journey-with-go/go-what-does-a-goroutine-switch-actually-involve-394c202dddb7" target="_blank" rel="noopener"
>https://medium.com/a-journey-with-go/go-what-does-a-goroutine-switch-actually-involve-394c202dddb7&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Goroutine and Preemption &lt;a class="link" href="https://medium.com/a-journey-with-go/go-goroutine-and-preemption-d6bc2aa2f4b7" target="_blank" rel="noopener"
>https://medium.com/a-journey-with-go/go-goroutine-and-preemption-d6bc2aa2f4b7&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Go: Asynchronous Preemption &lt;a class="link" href="https://medium.com/a-journey-with-go/go-asynchronous-preemption-b5194227371c" target="_blank" rel="noopener"
>https://medium.com/a-journey-with-go/go-asynchronous-preemption-b5194227371c&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>데드락 정의&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://namu.wiki/w/%EB%8D%B0%EB%93%9C%EB%9D%BD?from=Deadlock" target="_blank" rel="noopener"
>https://namu.wiki/w/%EB%8D%B0%EB%93%9C%EB%9D%BD?from=Deadlock&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://ko.wikipedia.org/wiki/%EA%B5%90%EC%B0%A9_%EC%83%81%ED%83%9C" target="_blank" rel="noopener"
>https://ko.wikipedia.org/wiki/%EA%B5%90%EC%B0%A9_%EC%83%81%ED%83%9C&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Go runtime documentation &lt;a class="link" href="https://golang.org/pkg/runtime/" target="_blank" rel="noopener"
>https://golang.org/pkg/runtime/&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Go 언어로 적용해보는 Computer Science - Cache</title><link>https://umi0410.github.io/blog/golang/go-cpu-cache/</link><pubDate>Wed, 27 Jan 2021 15:25:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/go-cpu-cache/</guid><description>&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>저번 학기에 &lt;code>컴퓨터 구조&lt;/code>를 수강하면서 간과하고 있던 로우 레벨의 지식에도 흥미가 생겼었다. 그 중 CPU와 Memory, Disk의 역할에 대해 알아볼 수 있었고 &lt;strong>캐시는 CPU와 Memory 사이에 위치해 메모리 대신 빠르게 CPU에게 데이터를 제공하는 녀석&lt;/strong>이라고 배웠다.&lt;/p>
&lt;p>이전에는 주로 캐시라고 하면 주로 CDN과 같은 네트워크에서 쓰이는 캐시들밖에 몰랐다. 그렇다보니 L1 캐시, L2 캐시 같은 얘기를 들으면 OSI 7계층과 연관 지어 &amp;lsquo;음..? L2 캐시는 스위치에서 쓰는 캐시인가..?&amp;rsquo; 라는 상상을 하곤했다.&lt;/p>
&lt;p>이번에는 Go를 통해 배열에 여러 차례 접근하는 프로그램을 만들어보고 벤치마킹을 통해 캐시라는 녀석이 어떤 효과를 가져다주는지 직접 확인해보려한다.&lt;/p>
&lt;h2 id="캐시란">캐시란&lt;/h2>
&lt;p>캐시는 아주 다양한 문맥에서 사용된다. 공통적으로 &amp;ldquo;사용자가 요청할 것 같은 데이터를 작고 빠른 저장소에 저장해놓음으로써 좀 더 빨리 해당 데이터를 제공한다&amp;quot;는 목적을 갖는다. CDN, DB, REST API, Memory, CPU 등등 다양한 곳에서 쓰일 수 있을 것 같다. 그 중 이번에는 &lt;strong>CPU와 메모리 사이의 캐시&lt;/strong>에 대해 알아보겠다.&lt;/p>
&lt;p>CPU와 메모리 사이의 캐시는 &lt;strong>메모리의 데이터를 얻기 위해 메모리에 직접 접근하지 않고 캐시라는 빠른 저장소를 이용해 해당 데이터를 얻게끔&lt;/strong>해준다. 예를 들어 변수 a=10 이라는 데이터가 메모리에 존재한다해도 a의 값을 얻기 위해 메모리에 직접 접근하기 보다는 가까우면서 빠르게 이용 가능한 캐시에서 데이터를 가져올 수도 있다는 것이다. 사실 캐시의 개념적인 측면에서 보면 메모리 또한 디스크 대신 빠르게 값을 전달해주기 위한 경우일 수 있으니 캐시 기능을 한다고 볼 수 있다. 그리고 CPU와 메모리 사이에 정말 캐시라는 이름을 갖는 녀석들은 프로세서 속에 있는 L1 캐시, 프로세서 옆에 있는 L2 캐시, 프로세서들이 공유하는 L3 캐시가 있긴 하지만 이는 시대가 지나면서 얼마든지 변할 수 있는 내용들이기 때문에 어떤 캐시가 어디에 있고 누구랑 누가 공유하는지와 같은 세부 내용은 크게 중요하진 않을 것 같다.&lt;/p>
&lt;p>물리적인 크기나 거리는 속도와 반비례할 수 밖에 없다. 거리가 멀면 정보가 전달되는 속도가 느려지고 크기가 크면 여러 Mux나 Gate를 이용한다는 것이기 때문에 느려진다. 그렇기때문에 캐시는 작고 가까워야한다. 데이터를 요청하는 녀석은 CPU이기 때문에 캐시는 CPU 속 혹은 그 근처에 위치한다. 또한 작아야하기때문에 모든 정보를 담을 수 없고, 사용자가 요청할법한 데이터만을 담아야한다. 이 때 어떻게 사용자가 요청할 법한 데이터를 정할까? 이는 &lt;code>공간 지역성&lt;/code>과 &lt;code>시간 지역성&lt;/code>이라는 중요한 두 가지 성질을 기반으로 한다.&lt;/p>
&lt;p>이외에도 태그나 충돌 같은 개념들이 있긴하지만 실제로 벤치마킹해보기도 쉽지 않고 다소 지엽적인 내용이라 간단히만 정리해보면 태그 없이 주소값을 모듈러(나머지)연산해서 cache line index를 결정하고 그것만을 이용해 데이터를 저장하면 한 line 내에 저장할 워드(Word)에 대한 충돌이 발생할 수 있다. cache line이 20개인 캐시는 0번지와 20번지가 같은 line이므로 충돌이 발생해 계속해서 같은 line에 서로의 데이터가 번갈아 저장될 수 있다는 것이다. 하지만 태그를 이용하면 cache line 수는 줄어들더라도 한 line내에 여러 태그의 정보를 저장할 수 있게되어 cache line이 10개인 cache의 한 line에 0번지와 20번지의 데이터가 다른 태그로 저장되어 불필요한 충돌을 방지할 수 있다는 장점이있다. 간단히 설명하기는 힘든 내용이라 좀 더 자세히 알고싶다면 &lt;code>Direct mapped cache&lt;/code>나 &lt;code>Fully associative cache&lt;/code> 등으로 검색해보기를 권장한다.&lt;/p>
&lt;h2 id="spatial-locality">Spatial locality&lt;/h2>
&lt;p>&lt;code>Spatial locality(공간 지역성)&lt;/code>이란 지금 &lt;strong>요청 받은 데이터와&lt;/strong> &lt;strong>가까운 곳에 위치한 데이터는 높은 확률로 다시 요청 받게 된다&lt;/strong>는 성질이다. 예를 들어 100번지의 a=10과 108번지의 b=20이 존재할 때 변수 a를 요청하면 이후 a와 가까운 주소에 저장된 b 또한 높은 확률로 요청된다는 것이다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">a&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">b&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">20&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a: %p\nb: %p\nc: %p\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">Output:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">a: 0xc000100010
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">b: 0xc000100018
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">c: 0xc000100020
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>a, b, c의 크기는 8바이트로 주소값 또한 8바이트가 차이난다. (16진법이기에 20과 18의 차이는 8이다.) 즉 대체로 &lt;strong>비슷한 시기에 할당된 변수는 근접한 메모리 주소&lt;/strong>를 갖게 된다. 우리는 비슷한 시기에 할당한 변수 혹은 연속된 배열 요소에 자주 빠른 시일 내에 접근을 하지 맨 위에서 선언한 변수와 저 멀리 맨 밑에서 선언한 변수를 마구잡이로 왔다 갔다 하면서 작업을 하지 않는 편이기 때문에 공간 지역성을 근거로한 캐시가 효력을 갖게 된다. 만약 공간적으로 먼 맨 위의 변수와 맨 아래의 변수를 자주 번갈아가며 접근한다면 그것은 시간지역성을 띄는 경우이다.&lt;/p>
&lt;h2 id="temporal-locality">Temporal locality&lt;/h2>
&lt;p>&lt;code>Temporal locality(시간 지역성)&lt;/code>이란 &lt;strong>최근에 요청했던 데이터는 높은 확률로 다시 요청 받게 된다&lt;/strong>는 성질이다. 예를 들어 100번지의 a=10과 9999번지의 b=20은 서로 주소적인 거리는 멀지만 둘 다 최근에 호출됐다면 캐시에 적재하겠다는 것이다. 캐시는 주로 직사각형 형태로 생겼으며 &lt;strong>가로(행)는 연속된 주소의 데이터를 저장하는 공간 지역성, 세로(열)는 최근에 호출된 데이터를 저장하는 시간 지역성&lt;/strong>을 담당한다.&lt;/p>
&lt;h2 id="두-지역성-비교">두 지역성 비교&lt;/h2>
&lt;p>12칸의 캐시가 있다고 가정하자. 가로로 4칸 세로로 3칸 존재한다면 공간/시간 지역성의 균형이 잡힌 캐시라고 볼 수 있다.(경우에 따라 다르겠지만)&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-cpu-cache/balanced-cache.png"
width="620"
height="107"
srcset="https://umi0410.github.io/blog/golang/go-cpu-cache/balanced-cache_hu49d8d624edd0378535d64f9a5c47e767_8216_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-cpu-cache/balanced-cache_hu49d8d624edd0378535d64f9a5c47e767_8216_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="balanced-cache.png"
class="gallery-image"
data-flex-grow="579"
data-flex-basis="1390px"
>&lt;/p>
&lt;p>시간 지역성은 최근 불린 데이터는 다시 불릴 확률이 높다는 것이고 이는 연속된 공간이 아닌 다양한 공간(주소)의 데이터를 캐시에 저장한다는 말이기도 하다. 0번지 부근, 16번지 부근, 24번지 부근의 다양한 공간의 데이터를 저장할 수 있으면서 그 녀석들간의 주변 데이터도 제공하는 공간지역성도 만족한다.&lt;/p>
&lt;p>두 가지 지역성에 의해 다양한 캐시들이 데이터를 적재하고 제공한다. 요점은 캐시는 빠르게 동작해야하고 그러기 위해선 크기가 작고 가까워야하며 크기가 작기 때문에 모든 데이터를 담을 수 없으니 알짜 데이터만을 담아야하는데 그 알짜는 지역성을 기반으로 선별된다는 것이다. 크기가 한정적이기 때문에 한 지역성을 키우면 한 지역성은 작아질 수밖에 없다.&lt;/p>
&lt;h3 id="공간-지역성에-치우친-캐시-구조">공간 지역성에 치우친 캐시 구조&lt;/h3>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-cpu-cache/spatial-locality-biased-cache.png"
width="930"
height="110"
srcset="https://umi0410.github.io/blog/golang/go-cpu-cache/spatial-locality-biased-cache_hu038761de6193f1262a5c02c2aef3a97f_10262_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-cpu-cache/spatial-locality-biased-cache_hu038761de6193f1262a5c02c2aef3a97f_10262_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="spatial-locality-biased-cache.png"
class="gallery-image"
data-flex-grow="845"
data-flex-basis="2029px"
>&lt;/p>
&lt;p>한정된 크기의 캐시 속에서 공간지역성을 극대화시켜버리면 당연히 인접한 공간의 자료만 이용할 수 있고, 최근에 불린 데이터들은 안중에도 없고 인접한 공간의 데이터만을 저장하게 된다. 예를 들어 다음과 같은 시간 지역성이 필요한 경우에 제대로 기능을 할 수 없다.&lt;/p>
&lt;ol>
&lt;li>0~11번지 사이의 데이터가 한 번 접근 ⇒ 캐시에 0~11번지 적재&lt;/li>
&lt;li>이후 12번지의 데이터에 접근 ⇒ 캐시에 데이터가 없기때문에 0~11번지의 데이터 대신 12~23번지의 데이터를 캐시에 적재&lt;/li>
&lt;li>다시 최근에 접근했던 데이터인 0번지의 데이터에 접근 시도
⇒ 0번 데이터는 최근에 접근했던 데이터임에도 시간 지역성이 활용되지 못함
⇒ 캐시에서 데이터를 찾을 수 없음.&lt;/li>
&lt;/ol>
&lt;h3 id="시간-지역성에-치우친-캐시-구조">시간 지역성에 치우친 캐시 구조&lt;/h3>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-cpu-cache/temporal-locality-biased-cache.png"
width="312"
height="202"
srcset="https://umi0410.github.io/blog/golang/go-cpu-cache/temporal-locality-biased-cache_hu5d03129976ee7a9e19515a8e72953e35_8599_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-cpu-cache/temporal-locality-biased-cache_hu5d03129976ee7a9e19515a8e72953e35_8599_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="temporal-locality-biased-cache.png"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="370px"
>&lt;/p>
&lt;p>위의 경우 최근에 호출된 다양한 주소의 데이터들을 캐시에 저장해준다. 하지만 캐시의 크기는 한정되어있기 때문에 세로가 길어지면 가로는 짧아진다. 즉 최근 접근을 시도한 다양한 주소의 데이터를 저장할 수 있지만 그 데이터의 인근 데이터에 대한 저장은 많이 할 수 없다는 것이다.&lt;/p>
&lt;p>예를 들어 위의 그림과 같은 경우 최근 0, 3, 12, 18, 6, 20번지의 데이터에 접근했고 이후에도 해당 번지에 대한 데이터를 캐시를 통해 이용할 수 있다. 바로 내가 최근에 접근했던 데이터이기때문이다. 하지만 만약 18번지의 데이터에 접근한 경우 높은 확률로 공간지역성에 의거 19, 20, 21, &amp;hellip; 번지의 데이터에 접근하겠지만, 이 예시는 시간지역성에 치우쳐져 19번지의 데이터만을 캐시에서 제공받을 수 있다.&lt;/p>
&lt;h2 id="프로그램을-통한-벤치마킹">프로그램을 통한 벤치마킹&lt;/h2>
&lt;p>저번에 Mutex, Semaphore를 직접 벤치마킹해보면서 Go의 내장 벤치마크 기능을 이용하면 좀 더 편리하게 결과를 보여줄 수 있을 것 같았기에 이번에 Go의 내장 벤치마크 기능을 이용해봤다.&lt;/p>
&lt;p>&lt;strong>1000행 1000열의 2차원 int형 배열의 어떠한 요소에 접근해서 +1 하는 작업을 1000회 수행하는 것을 하나의 싸이클로 하는 벤치마크&lt;/strong>를 작성했다. 2차원 배열은 가로로는 연속적인 주소값을 갖기에 공간 지역성을 활용할 수 있지만 세로로는 N * (int형 자료형의 크기)씩 차이 나는 주소값을 갖기 때문에 공간 지역성을 활용하기 힘들고, 최근 접근했던 주소라면 시간 지역성은 활용할 수 있다.&lt;/p>
&lt;p>&lt;strong>공간 지역성&lt;/strong> (가로로 연속적인 데이터)&lt;/p>
&lt;ul>
&lt;li>공간 지역성을 사용하는 경우 가로로 연속된 요소에 접근. 즉 연속된 주소를 갖는 1000개의 요소에 접근&lt;/li>
&lt;li>공간 지역성을 사용하지 않는 경우에는 세로로 요소에 접근. 즉 1000 * int 자료형의 크기만큼 차이나는 연속되지 않은 주소의 1000개의 요소에 접근&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>시간 지역성&lt;/strong> (연속적 주소와 상관없이 최근에 불린 데이터)&lt;/p>
&lt;ul>
&lt;li>시간 지역성을 사용하는 경우 주소값이 근접하진 않지만 4개 혹은 16개의 데이터에만 계속해서 접근&lt;/li>
&lt;li>시간 지역성을 사용하지 않은 경우에는 계속해서 처음 접근하는 데이터에만 접근&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;testing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Size&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">generateArray&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">[][]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([][]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Size&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">Size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Size&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">Size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">arr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">BenchmarkSpatialLocality&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;공간지역성 사용&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">generateArray&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ResetTimer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">Size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;공간지역성 X&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">generateArray&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ResetTimer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">Size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">BenchmarkTemporalLocality&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;시간 지역성 적극 사용. 최근 접근한 데이터 4개.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">generateArray&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ResetTimer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">Size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;시간 지역성 조금 사용. 최근 접근한 데이터 16개.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">generateArray&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ResetTimer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">Size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 사실 완벽하게 새로운 데이터는 아님. 벤치마킹하는 동안 계속해서 반복되기 때문에
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;시간 지역성 X. 새로운 데이터에만 접근.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">generateArray&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ResetTimer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">Size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">goos&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">linux&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">goarch&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">amd64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pkg&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">playground&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">unix&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">cache&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">BenchmarkSpatialLocality&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">공간지역성_사용&lt;/span> &lt;span class="mi">50000&lt;/span> &lt;span class="mi">894&lt;/span> &lt;span class="nx">ns&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">op&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">BenchmarkSpatialLocality&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">공간지역성_X&lt;/span> &lt;span class="mi">50000&lt;/span> &lt;span class="mi">6561&lt;/span> &lt;span class="nx">ns&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">op&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">BenchmarkTemporalLocality&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">시간_지역성_적극_사용&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_최근_접근한_데이터_4개&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="mi">50000&lt;/span> &lt;span class="mi">1918&lt;/span> &lt;span class="nx">ns&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">op&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">BenchmarkTemporalLocality&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">시간_지역성_조금_사용&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_최근_접근한_데이터_16개&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="mi">50000&lt;/span> &lt;span class="mi">4153&lt;/span> &lt;span class="nx">ns&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">op&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">BenchmarkTemporalLocality&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">시간_지역성_X&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_새로운_데이터에만_접근&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="mi">50000&lt;/span> &lt;span class="mi">6564&lt;/span> &lt;span class="nx">ns&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">op&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>결과를 확인해보니 간단한 배열 내의 요소들에 대한 연산인데도 꽤나 차이가 컸다.&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>저번 학기에 컴퓨터 구조를 수강하면서 CPU-Memory 캐시의 효과를 직접 배열에 대한 프로그램을 통해 보여주는 예시를 보고 신기했던 기억이 있어서 이렇게 벤치마킹 프로그램을 작성해봤다. 다른 CS 주요 지식들에 비해 어려울 것은 없는 편이고 우리가 쉽게 접해오던 내용이라 더 이해하기 쉽지 않았을까 싶다.&lt;/p>
&lt;h2 id="참고">참고&lt;/h2>
&lt;ul>
&lt;li>캐시란 - &lt;a class="link" href="https://ko.wikipedia.org/wiki/%EC%BA%90%EC%8B%9C" target="_blank" rel="noopener"
>https://ko.wikipedia.org/wiki/캐시&lt;/a>&lt;/li>
&lt;li>캐시가 동작하는 아주 구체적인 원리 - &lt;a class="link" href="https://parksb.github.io/article/29.html" target="_blank" rel="noopener"
>https://parksb.github.io/article/29.html&lt;/a>&lt;/li>
&lt;li>cache mapping - &lt;a class="link" href="https://m.blog.naver.com/jkssleeky/220478400046" target="_blank" rel="noopener"
>https://m.blog.naver.com/jkssleeky/220478400046&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Go 언어로 적용해보는 Computer Science - Concurrency vs Parallelism</title><link>https://umi0410.github.io/blog/golang/go-concurrency-vs-parallelism/</link><pubDate>Thu, 04 Feb 2021 12:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/go-concurrency-vs-parallelism/</guid><description>&lt;img src="https://umi0410.github.io/blog/golang/go-concurrency-vs-parallelism/concurrency-vs-parallelism.jpg" alt="Featured image of post Go 언어로 적용해보는 Computer Science - Concurrency vs Parallelism" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>&lt;code>Go&lt;/code> 언어를 처음 배울 때 &lt;code>channel&lt;/code>이나 &lt;code>goroutine&lt;/code>에 대해 배우면서 &lt;code>Concurrency&lt;/code> 즉 &lt;code>동시성&lt;/code>으로 인해 많이 힘들었던 기억이 난다. &amp;lsquo;&lt;em>동시성과 병렬성이 도대체 뭐가 다르다는 것이냐..!&lt;/em>&amp;rsquo; Rob Pike 아저씨가 동시성에 관해 했던 세미나 영상들을 보며 같이 스터디 하던 멤버들과 멘붕에 빠지기도 했고, 이런 저런 의견 교류도 했다가 며칠 지나고 보면 다시 병렬성과 헷갈리고, 제대로 된 한글 자료는 찾기 힘들었다. &amp;lsquo;&lt;em>동시성은 사람이 느끼기에 동시처럼 느껴지는 것이고 병렬성은 실제로 동시적인 시점에 대한 것이다.&lt;/em>&amp;rsquo; 라는 내용이 많았지만 와닿지는 않았다.&lt;/p>
&lt;p>그리고 이번에 다뤄볼 동시성은 주로 &amp;ldquo;&lt;strong>제어&lt;/strong>&amp;ldquo;라는 단어와 함께 언급되는 &amp;ldquo;&lt;strong>동시성 제어&lt;/strong>&amp;ldquo;에서의 동시성이나 Concurrency와는 조금 다른 의미를 갖는다고 생각한다. 동시성 제어에서의 동시성은 그냥 동시에 무언가에 접근하는 것을 어떻게 제어하거나 막겠냐는 의미일 뿐이지만 동시성-병렬성에서의 동시성은 어떻게 작업들이 동시에 수행되느냐에 초점을 맞추는 느낌이기 때문이다.&lt;/p>
&lt;ul>
&lt;li>동시성 제어의 예시 - 여러 client가 하나의 db row에 access할 때 어떻게 제어할 것인가&lt;/li>
&lt;li>이번에 다룰 동시성의 예시 - 어떤 작업을 동시성을 이용해 수행하는 것이 좋을까 병렬성을 이용해 수행하는 것이 좋을까&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Golang&lt;/code>을 처음 접한 지 벌 써 반년이 넘은 것 같다. 처음 한 4개월 가량은 거의 머릿 속에 아른거리는 물음표 같은 내용이었는데, 꾸준히 공부하다보니 조금 알 것 같다. 이번 글에서는 그러한 내용을 추상적인 말보단 예시와 코드로 명확히 정리해보고자 한다.&lt;/p>
&lt;h2 id="concurrency-is-not-parallelism">Concurrency is not parallelism&lt;/h2>
&lt;p>위의 문장은 동시성과 병렬성에 대해 알아보려하면 매번 보게 되는 문장인다. 그렇다. 동시성은 병렬성과 다르다. 이에 대해 설명할 때 영어권에서는 아래의 두 문장이 자주 등장하는 듯 하다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;em>Concurrency is about dealing with lots of things at once.&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>Parallelism is about doing lots of things at once.&lt;/em>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>한 번에 dealing with하는 것과 한 번에 doing하는 것이라고 한다. 하지만 잘 와닿지 않는다&amp;hellip; 아마 저 글을 보고 이해할 수 있는 한국인은 극히 드물지 않을까 싶다.&lt;/p>
&lt;h3 id="예시로-보는-동시성-vs-병렬성">예시로 보는 동시성 vs 병렬성&lt;/h3>
&lt;p>따라서 좀 더 쉽게 예시로 설명해보려 한다. 예를 들어 &lt;strong>사회적 거리 두기로 인해 우리 Gopher(고퍼)가 친구들과 떠나려는 예약했던 여행이 취소되었고, 항공권, 호텔, 렌트카 예약을 모두 취소해야하는 상황&lt;/strong>이라고 해보자.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>동시성&lt;/strong>(Concurrent)의 예시 - 만약 모든 취소 작업이 &lt;strong>고객센터 1대1 채팅&lt;/strong>으로 이루어지는 경우. Gopher1 &lt;strong>혼자 모든 취소 작업을 동시적으로 수행 가능&lt;/strong>
&lt;ul>
&lt;li>Gopher1 혼자 항공권 취소 신청, 호텔, 렌트카의 고객센터 1대1 채팅에 예약 취소 신청을 함&lt;/li>
&lt;li>상담사분이 답장을 주는 대로 작업을 진행&lt;/li>
&lt;li>Gopher1 혼자서 세 개의 취소 작업을 동시에 진행하는 셈이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>병렬성&lt;/strong>(Parallelism)의 예시 - 만약 모든 취소 작업이 &lt;strong>고객센터 전화 상담&lt;/strong>으로 이루어 지는 경우. Gopher1 &lt;strong>혼자 모든 취소 작업을 동시에 진행할 수는 없고, Gopher 1, 2, 3이 병렬적으로 진행할 순 있음&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>뒤에서 설명하긴 하겠지만 전자의 경우에만 동시성이 일어날 수 있는 이유는 Gopher가 1대1 채팅으로 작업을 진행할 때는 한가한 반면(CPU 점유율이 낮고, 상담사의 메시지를 기다리느라 많은 블락킹이 존재) 전화로 작업을 진행할 때에는 여러 명과 전화할 수 없기 때문이다.(CPU 점유율이 높음.)&lt;/p>
&lt;p>항공권 취소 전화 도중 잠시 지연되는 시간에 전화를 끊고 호텔 고객 센터에 전화를 거는 방식으로 Gopher1 혼자 Concurrent하게 작업을 진행할 수 있겠지만 이 경우 &lt;strong>계속해서 전화를 끊고 다시 걸고 상황 설명을 하는 동안에 지연시간이 발생해서 효율이 좋지 않다&lt;/strong>. 이 지연 시간을 항공권 취소 전화 =&amp;gt; 호텔 예약 취소 전화로의 context switch penalty로 볼 수 있다.&lt;/p>
&lt;h2 id="프로그램으로-알아보는-concurrency-vs-parallelism">프로그램으로 알아보는 Concurrency vs Parallelism&lt;/h2>
&lt;p>동시성과 병렬성을 비교하는 한글 자료는 찾기 힘든 편이고, 영어로 된 자료는 꽤나 많이 찾아볼 수 있지만, 그래서 &amp;ldquo;언제&amp;rdquo;, &amp;ldquo;무엇을&amp;rdquo;, &amp;ldquo;왜&amp;rdquo; 써야하는 지에 대한 내용은 잘 찾아보기 힘들다. 게다가 간혹 Concurrent programming의 장점이라면서 parallelism을 설명하는 경우도 있어 혼란스러웠다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-concurrency-vs-parallelism/concurrency-vs-parallelism.jpg"
width="1845"
height="1000"
srcset="https://umi0410.github.io/blog/golang/go-concurrency-vs-parallelism/concurrency-vs-parallelism_hu86023f6654c19803b1eea4e88bc97fcd_191924_480x0_resize_q75_box.jpg 480w, https://umi0410.github.io/blog/golang/go-concurrency-vs-parallelism/concurrency-vs-parallelism_hu86023f6654c19803b1eea4e88bc97fcd_191924_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="concurrency-vs-parallelism.jpg"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="442px"
>&lt;/p>
&lt;p>&lt;strong>동시성&lt;/strong>이란 한 작업이 완료된 뒤 다음 작업이 수행되는 것이 아니라 계속해서 적절히 switch 되며 동시에 진행되어나가는 것을 의미한다. 그 결과 일정 기간동안 수행한 작업들에 대해 말할 때 그 작업들은 동시에 수행됐다고 할 수 있게 된다. 한 순간에는 엄밀히 따지면 한 작업이 수행된다.&lt;/p>
&lt;p>&lt;strong>병렬성&lt;/strong>이란 여러 코어에서 작업이 병렬적으로 진행되는 것을 의미한다. 그 결과 일정한 기간이 아닌 순간을 놓고 봤을 때에도 여러 작업이 병렬적으로 동시에 수행되게 된다.&lt;/p>
&lt;p>코어 수 보다 많은 스레드가 이용될 경우는 동시성과 병렬성이 함께 이용된다고 볼 수 있다. 즉 여러 스레드에 걸쳐 여러 작업이 완료 되지 않았지만 적절히 switch되며 진행된다는 의미이다.&lt;/p>
&lt;p>프로그래밍적으로 봤을 때 같이 동시성은 블락이 많이 걸리는 작업에 유리하고, 병렬성은 CPU bound한 작업에 유리하다고 생각된다. 그럼 좀 더 자세히 동시성과 병렬성이 &amp;ldquo;&lt;strong>언제&lt;/strong>&amp;rdquo; &amp;ldquo;&lt;strong>왜&lt;/strong>&amp;rdquo; 유리한지 알아보자.&lt;/p>
&lt;h3 id="concurrency---block이-많은-작업에-유리">Concurrency - Block이 많은 작업에 유리&lt;/h3>
&lt;p>&lt;strong>예상: 블락이 많은 작업의 경우 Core 숫자에 상관 없이 대체로 많은 thread(혹은 goroutine)을 생성할 수록 작업이 빨라질 것이다.&lt;/strong>&lt;/p>
&lt;p>block이 많은 작업이 뭐가 있을까? 네트워크 IO 블락이 많이 걸릴 작업으로서 &lt;a class="link" href="https://example.com" target="_blank" rel="noopener"
>https://example.com&lt;/a> 에 요청/응답을 얻는 작업을 64번 수행해보겠다. &lt;strong>core의 숫자를 1개로 제한&lt;/strong>하여 concurrency의 효과를 관찰해보기 위해 4개의 코어로 8개의 스레드를 하이퍼스레딩하는 내 랩탑이 아닌 AWS EC2 t2.micro에서 벤치마크를 수행했다.&lt;/p>
&lt;h4 id="프로그램-코드">프로그램 코드&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;github.com/stretchr/testify/assert&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;sync&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;testing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Benchmark동시성&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">goroutineNum&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">}{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d개의 goroutine&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">goroutineNum&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">do동시성&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">goroutineNum&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">do동시성&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">goroutineNum&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">totalRep&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">goroutineNum&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">totalRep&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">goroutineNum&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;https://example.com&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">assert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NoError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">assert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">resp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusCode&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}(&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="core-1개의-aws-ec2-t2micro에서의-벤치마킹">Core 1개의 AWS EC2 t2.micro에서의 벤치마킹&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ubuntu@ip-172-31-12-2:~/concurrency$ &lt;span class="nv">CGO_ENABLED&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> go &lt;span class="nb">test&lt;/span> ./concurrency_test.go -bench&lt;span class="o">=&lt;/span>. -benchtime&lt;span class="o">=&lt;/span>1x
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">goos: linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">goarch: amd64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark동시성/1개의_goroutine &lt;span class="m">1&lt;/span> &lt;span class="m">9426630119&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark동시성/4개의_goroutine &lt;span class="m">1&lt;/span> &lt;span class="m">2354737545&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark동시성/8개의_goroutine &lt;span class="m">1&lt;/span> &lt;span class="m">1192283559&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark동시성/16개의_goroutine &lt;span class="m">1&lt;/span> &lt;span class="m">604589767&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark동시성/32개의_goroutine &lt;span class="m">1&lt;/span> &lt;span class="m">313062480&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark동시성/64개의_goroutine &lt;span class="m">1&lt;/span> &lt;span class="m">182304298&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PASS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ok command-line-arguments 28.809s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>64번 요청/응답 작업을 수행할 때 맨 위의 경우는 1개의 goroutine이 64번, 맨 밑의 경우에는 64개의 goroutine이 각각 1번씩 수행하는 식으로 진행했다. 1개의 코어를 갖는 t2.micro에서도 64개의 goroutine으로 concurrent하게 작업을 진행하는 것이 더 속도가 빨랐다. &lt;strong>네트워크 IO로 CPU가 놀고있는 시간이 많았기 때문에 하나의 코어로도 concurrent하게 수 많은 작업을 효율적으로 진행&lt;/strong>할 수 있었다.&lt;/p>
&lt;h3 id="parallelism---cpu-bound한-작업에-유리">Parallelism - CPU bound한 작업에 유리&lt;/h3>
&lt;p>&lt;strong>예상: CPU bound한 작업의 경우 코어의 개수까지는 goroutine이 늘어날 수록 성능이 좋을 것이다.&lt;/strong>&lt;/p>
&lt;p>(&lt;em>아직 코어와 프로세서, vCPU의 차이는 명확히는 모르겠다&lt;/em>)&lt;/p>
&lt;p>CPU Bound한 작업의 경우는 정말 동시성보단 병렬성을 이용할 때 더 좋은 성능을 보일까? 일종의 제곱 연산으로 CPU를 혹사시키는 작업을 정의했다. 병렬성의 경우 어떤 경우까지가 병렬성이고, 어떤 경우까지가 동시성 + 병렬성인지 헷갈릴 수 있기에 정리해본다.&lt;/p>
&lt;ol>
&lt;li>코어 1개에 여러 혹은 goroutine =&amp;gt; 당연히 병렬성이 일어날 코어들이 없으니 동시성&lt;/li>
&lt;li>코어 N개에 N개 이하의 여러 goroutine =&amp;gt; 병렬성&lt;/li>
&lt;li>코어 N개에 N개 이상의 여러 goroutine =&amp;gt; 동시성 + 병렬성. &lt;strong>하지만 CPU Bound 한 작업의 경우 동시성은 별 이점을 가져다 주지 않는다.&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h4 id="프로그램-코드-1">프로그램 코드&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;sync&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;testing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Benchmark병렬성&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">goroutineNum&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">}{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d개의 goroutine&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">goroutineNum&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">do병렬성&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">goroutineNum&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">do병렬성&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">goroutineNum&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">totalRep&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">1024&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1024&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dummyNumber&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">12345&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">goroutineNum&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">totalRep&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">goroutineNum&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dummyNumber&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">dummyNumber&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">dummyNumber&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">100000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}(&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="core-1개의-aws-t2micro에서의-벤치마킹">Core 1개의 AWS t2.micro에서의 벤치마킹&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ubuntu@ip-172-31-12-2:~/concurrency$ &lt;span class="nv">CGO_ENABLED&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> go &lt;span class="nb">test&lt;/span> ./parallelism_test.go -bench&lt;span class="o">=&lt;/span>. -benchtime&lt;span class="o">=&lt;/span>10x
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">goos: linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">goarch: amd64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark병렬성/1개의_goroutine &lt;span class="m">10&lt;/span> &lt;span class="m">15228154&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark병렬성/4개의_goroutine &lt;span class="m">10&lt;/span> &lt;span class="m">14048765&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark병렬성/8개의_goroutine &lt;span class="m">10&lt;/span> &lt;span class="m">14038413&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark병렬성/16개의_goroutine &lt;span class="m">10&lt;/span> &lt;span class="m">13916091&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark병렬성/32개의_goroutine &lt;span class="m">10&lt;/span> &lt;span class="m">13877358&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark병렬성/64개의_goroutine &lt;span class="m">10&lt;/span> &lt;span class="m">14082735&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PASS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ok command-line-arguments 0.946s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>t2.micro의 경우 코어가 1개이기 때문에 병렬성이 존재할 것도 없이 동시성만이 존재한다고 했듯이 goroutine이 많아져도 성능이 좋아지지 않는다. 되려 불필요한 goroutine을 관리하기 위한 코스트와 미미하겠지만 존재할 goroutine에 대한 context switch로 인해 작업이 더 더뎌지기도 하는 결과를 볼 수 있다.&lt;/p>
&lt;h4 id="core-4개로-8개의-vcpu를-가진-나의-랩탑에서의-벤치마킹">Core 4개로 8개의 vCPU를 가진 나의 랩탑에서의 벤치마킹&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ go &lt;span class="nb">test&lt;/span> ./parallelism_test.go -bench&lt;span class="o">=&lt;/span>. -benchtime&lt;span class="o">=&lt;/span>10x
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">goos: linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">goarch: amd64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark병렬성/1개의_goroutine-8 &lt;span class="m">10&lt;/span> &lt;span class="m">10263785&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark병렬성/4개의_goroutine-8 &lt;span class="m">10&lt;/span> &lt;span class="m">7342331&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark병렬성/8개의_goroutine-8 &lt;span class="m">10&lt;/span> &lt;span class="m">4872064&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark병렬성/16개의_goroutine-8 &lt;span class="m">10&lt;/span> &lt;span class="m">5000452&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark병렬성/32개의_goroutine-8 &lt;span class="m">10&lt;/span> &lt;span class="m">4830541&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark병렬성/64개의_goroutine-8 &lt;span class="m">10&lt;/span> &lt;span class="m">4968710&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PASS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ok command-line-arguments 0.419s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>내 랩탑은 실제 core는 4개지만 8개의 스레드까지 병렬적으로 처리가 가능하므로 8개라고 볼 수 있다.&lt;/p>
&lt;p>따라서 &lt;strong>8개의 goroutine까지는 병렬성에 의해 성능이 점점 좋아지고, 8개 초과의 goroutine부터는 병렬성과 동시성이 모두 적용되겠지만 현재의 작업은 CPU bound하기 때문에 동시성은 그닥 이점을 가져다주지 못하고 EC2의 경우와 마찬가지로 과잉되는 goroutine으로 인해 오히려 성능을 저하&lt;/strong>시킬 수 있다. 코드에 첨부는 하지 않았지만 극단적으로 과잉되는 goroutine은 아래와 같은 성능 저하를 야기하기도 했다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">Benchmark병렬성/8개의_goroutine-8 10 580169905 ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark병렬성/16개의_goroutine-8 10 602391376 ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Benchmark병렬성/1024*1024개의_goroutine-8 10 879079810 ns/op
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(&lt;em>한편으론 1024*1024개의 goroutine을 관리하는 데에도 성능 저하가 저정도 뿐이라니 대단하단 생각도 든다&amp;hellip;!&lt;/em>)&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>동시성과 병렬성은 Go를 공부하면서 컴퓨터 구조를 공부하면서 너무도 많이 파고들었던 내용이라 술술 적힐 줄 알았는데 시간이 좀 지나서인지 가물가물한 내용도 좀 있었고 내용도 쉽지 않았으며 좋은 예시를 어떻게 들어야할 지 많이 고민이 됐던 것 같다. 이런 저런 생각들로 인해 설명이나 진행이 그렇게 깔끔히 된 것 같진 않지만 그래도 결론이 깔끔하게 나와서 다행이다. 사실 이런 코어나 고루틴, 스레드의 개수에 따라 병렬성이나 동시성을 구분 짓기보다 &amp;lsquo;&lt;em>동시성은 주로 구조와 관련되고 병렬성은 실행과 관련된다.&lt;/em>&amp;lsquo;와 같은 철학적인 내용도 간간히 나오긴 하지만 몇 달 째 그닥 와닿지 않고, 간간히 등장할 뿐 오피셜한 내용은 아닌 듯하여 생략했다.&lt;/p>
&lt;p>그리고 이번엔 벤치마크 테스트에 한글 이름을 도입해봤는데 읽기도 편하고 나름 귀여운 것 같다. ㅎㅎ 종종 개발하면서 테스트 코드 짤 때에도 한글 테스트 케이스를 사용해보려한다.&lt;/p>
&lt;h2 id="참고">참고&lt;/h2>
&lt;p>Concurrency is not parallelism &lt;a class="link" href="https://blog.golang.org/waza-talk" target="_blank" rel="noopener"
>https://blog.golang.org/waza-talk&lt;/a>&lt;/p>
&lt;p>Concurrency is not parallelism slide - Rob Pike &lt;a class="link" href="https://talks.golang.org/2012/waza.slide#1" target="_blank" rel="noopener"
>https://talks.golang.org/2012/waza.slide#1&lt;/a>&lt;/p>
&lt;p>Back to the Essence - Concurrency vs Parallelism &lt;a class="link" href="https://homoefficio.github.io/2019/02/02/Back-to-the-Essence-Concurrency-vs-Parallelism/" target="_blank" rel="noopener"
>https://homoefficio.github.io/2019/02/02/Back-to-the-Essence-Concurrency-vs-Parallelism/&lt;/a>&lt;/p>
&lt;p>[ 제 4회 파이썬 격월 세미나 ] 동시성과 병렬성 - 이찬형 &lt;a class="link" href="https://youtu.be/Iv3e9Dxt9WY" target="_blank" rel="noopener"
>https://youtu.be/Iv3e9Dxt9WY&lt;/a>&lt;/p></description></item><item><title>Go 언어로 적용해보는 Computer Science - Socket (Unix Domain Socket, Network/TCP/UDP Socket)</title><link>https://umi0410.github.io/blog/golang/go-socket/</link><pubDate>Sat, 13 Feb 2021 14:10:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/go-socket/</guid><description>&lt;img src="https://umi0410.github.io/blog/golang/go-socket/server-client-socket.jpeg" alt="Featured image of post Go 언어로 적용해보는 Computer Science - Socket (Unix Domain Socket, Network/TCP/UDP Socket)" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;p>개발 공부를 처음 시작한 지 언제 안 됐을 무렵, 의경 복무를 하며 자바로 TCP Socket을 이용해 옆 컴퓨터와 채팅을 하는 프로그램을 만들어 보는 것을 시작으로 docker나 mysql과 같은 다양한 오픈소스들을 이용해보면서나 네트워크를 공부하면서 다양하게 들어왔던 &lt;code>소켓&lt;/code>이지만 정확히 어떤 역할을 하는지 어떤 종류가 있는지 어떻게 동작하는지 알지 못했다.&lt;/p>
&lt;p>오늘은 그렇게 알쏭달쏭한 존재였던 소켓을 크게 &lt;strong>&lt;code>Unix Domain Socket&lt;/code>와 &lt;code>Network Socket&lt;/code> 두 가지로 나눠 정리해보고 Unix Domain Socket과 TCP를 사용하는 Network Socket을 벤치마크해보고 어떤 차이가 있는지 확인&lt;/strong>해보도록 하겠다. 주로 내가 소켓을 접했던 자료나 이슈 상황에서는 UDP보다는 TCP가 많이 등장했었기 때문에 &lt;strong>UDP에 대한 내용은 거의 제외할 것이므로 대부분이 Network socket과 Unix domain socket 각각의 stream(network socket에선 tcp를 이용하는 경우에 해당) type socket&lt;/strong>에 관련한 내용일 것이다.&lt;/p>
&lt;h2 id="socket-이란">Socket 이란&lt;/h2>
&lt;p>소켓은 어떠한 통신에서의 Endpoint(끝점) 역할을 한다. 끝점이 없으면 어디와 어디가 통신하는지 어디에 데이터를 써야하는지 알 수 없다.&lt;/p>
&lt;p>소켓을 마치 전구 소켓과 같이 소켓이라고 부르는 이유는 소켓에 올바르게 데이터를 적기만 하면 통신을 위한 세부적인 동작은 소켓이 알아서 수행하기 때문이다. 따라서 우리는 통신을 하기 위한 Socket을 올바르게 생성하고, 그 곳에 데이터를 올바르게 적거나 그곳의 데이터를 올바르게 읽기만 하면 된다. 실제 데이터 전송은 소켓이 알아서 수행해준다.&lt;/p>
&lt;p>소켓은 같은 호스트 내에서 IPC를 위해 사용되는 &lt;code>Unix domain socket&lt;/code>과 네트워크 통신을 하기 위해 사용되는 &lt;code>Network socket&lt;/code>으로 분류할 수 있다. 간혹 unix domain socket과 TCP를 이용하는 Network socket, UDP를 이용하는 Network socket 이렇게 세 가지로 분류하는 경우를 본 것 같은데 이는 잘못된 분류라고 생각한다. Network socket 뿐만 아니라 Unix domain socket 또한 stream(Network socket의 경우 TCP를 이용하는 경우에 해당) 타입과 datagram 타입(Network socket의 경우 UDP를 이용하는 경우에 해당)으로 사용될 수 있기 때문이다.&lt;/p>
&lt;h3 id="서버-소켓과-클라이언트-소켓">서버 소켓과 클라이언트 소켓&lt;/h3>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-socket/server-client-socket.jpeg"
width="2146"
height="1000"
srcset="https://umi0410.github.io/blog/golang/go-socket/server-client-socket_huc5be35f5857cc34672b838b13057c03e_282874_480x0_resize_q75_box.jpeg 480w, https://umi0410.github.io/blog/golang/go-socket/server-client-socket_huc5be35f5857cc34672b838b13057c03e_282874_1024x0_resize_q75_box.jpeg 1024w"
loading="lazy"
alt="server-client-socket.jpeg"
class="gallery-image"
data-flex-grow="214"
data-flex-basis="515px"
>&lt;/p>
&lt;p>소켓을 역할의 측면에서 분류한다면 서버 소켓과 클라이언트 소켓으로 나눌 수 있다. 동일한 구조의 소켓이지만 생성되는 시기나 역할이 다를 뿐이다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>서버 소켓&lt;/strong> - 클라이언트 소켓의 연결 요청을 받아들이기만 할 뿐. 실제 서버 측에서의 데이터의 송수신은 서버 소켓이 클라이언트 소켓의 연결 요청을 수락하면서 새로 만들어지는 소켓을 통해 수행.&lt;/li>
&lt;li>&lt;strong>클라이언트 소켓&lt;/strong> - 클라이언트가 서버와 통신하고자 할 때 생성하는 소켓. 클라이언트는 실제 데이터 송수신도 이 소켓을 통해 수행.&lt;/li>
&lt;/ul>
&lt;p>서버 소켓과 클라이언트 소켓이 단순한게 1:N으로만 통신하면 이렇게 서버 소켓이 클라이언트 소켓의 요청을 수락한 뒤 새로 소켓을 만들 필요 없지 않을까싶지만 그렇게 되면 서버가 각 클라이언트와 통신할 때 하나의 소켓을 이용하므로 올바르게 원하는 클라이언트와 통신할 수 없을테니 좋은 방식이 아닐 것이다.&lt;/p>
&lt;p>그렇다면 과연 &lt;strong>정말 서버에서는 연결을 accept 한 뒤 소켓을 새로 생성할까?&lt;/strong> 확인해보자.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">network&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;tcp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">address&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;0.0.0.0:8080&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">socket&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">net&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">network&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">connectedSocket&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Accept&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">connectedSocket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;pong\n&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">connectedSocket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>간단하게 TCP 통신프로그램을 하나 만들어봤다. 단순히 1초 간격으로 pong을 5번 출력한 뒤 연결을 끊는 프로그램이다.&lt;/p>
&lt;p>&lt;strong>요청 전&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ netstat --tcp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Active Internet connections &lt;span class="o">(&lt;/span>w/o servers&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Proto Recv-Q Send-Q Local Address Foreign Address State
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tcp &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> ip-172-31-34-13.ap-:ssh 124.50.93.166:60082 ESTABLISHED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tcp &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> ip-172-31-34-13.ap-:ssh 124.50.93.166:60084 ESTABLISHED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tcp &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> ip-172-31-34-13.ap-:ssh 124.50.93.166:60078 ESTABLISHED
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>요청 수락 후 통신 중&lt;/strong> - 소켓이 하나 생성되어 ESTABLISHED 상태&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ netstat --tcp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Active Internet connections &lt;span class="o">(&lt;/span>w/o servers&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Proto Recv-Q Send-Q Local Address Foreign Address State
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tcp &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> ip-172-31-34-13.ap-:ssh 124.50.93.166:60082 ESTABLISHED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tcp &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> ip-172-31-34-13.ap-:ssh 124.50.93.166:60084 ESTABLISHED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tcp &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> ip-172-31-34-13.ap-:ssh 124.50.93.166:60078 ESTABLISHED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tcp6 &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> ip-172-31-34-1:http-alt 124.50.93.166:42434 ESTABLISHED
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>통신 종료&lt;/strong> - 생성되었던 소켓이 TIME_WAIT 상태. 잠시 후 사라진다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ netstat --tcp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Active Internet connections &lt;span class="o">(&lt;/span>w/o servers&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Proto Recv-Q Send-Q Local Address Foreign Address State
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tcp &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> ip-172-31-34-13.ap-:ssh 124.50.93.166:60082 ESTABLISHED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tcp &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> ip-172-31-34-13.ap-:ssh 124.50.93.166:60084 ESTABLISHED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tcp &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> ip-172-31-34-13.ap-:ssh 124.50.93.166:60078 ESTABLISHED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tcp6 &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> ip-172-31-34-1:http-alt 124.50.93.166:42434 TIME_WAIT
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>깔끔한 네트워크 정보를 보기 위해 순수한 AWS EC2 t2.micro 인스턴스에서 작업해보았다. 맨 위 3줄에 나온 소켓 정보는 ssh 접속으로 인한 소켓 정보이다.&lt;/p>
&lt;p>또한 서버 소켓은 출력되지 않았는데 이는 우리는 평소에 listen 중인 포트나 서버 소켓을 보기 위해 netstat에 -l 옵션을 전달한 반면 이번엔 &amp;ndash;tcp 옵션을 통해 listen 중인 서버 소켓이 아닌 클라이언트의 요청을 수락한 뒤 생성되는 소켓을 보려하고있기 때문이다.&lt;/p>
&lt;/blockquote>
&lt;p>4번 째 줄의 소켓 정보가 바로 우리가 생각하는 서버 소켓이 client의 연결 요청을 accept 후 생성하는 socket이다. 클라이언트의 요청을 accept 후에 새로운 소켓이 생성되며 통신 종료 후 잠시 기다린 뒤 사라진다.&lt;/p>
&lt;h3 id="network-socket">Network Socket&lt;/h3>
&lt;p>&lt;code>Network socket&lt;/code>은 네트워크 통신이 필요한 작업을 수행할 때 이용하는 소켓의 한 종류로 다시 동작 방식에 따라 TCP 프로토콜을 이용하는 stream socket과 UDP 프로토콜을 이용하는 datagram socket으로 구분할 수 있다. 사용자는 socket에 데이터를 적기만 하면 네트워크와 관련된 작업은 socket이 알아서 수행해준다. 읽을 때에도 마찬가지이다.&lt;/p>
&lt;p>TCP socket이라고 부르는 사람도 있고 stream socket, TCP/IP socket이라 부르는 사람도 있는 것 같다. 정확한 명칭은 모르겠지만 사용하거나 이해하는 데에는 무리가 없을 것 같다.
TCP를 이용하는 stream type의 Network socket과 stream type의 Unix domain socket은 사용 방법이 매우 유사하다. 둘 다 stream type이고, 소켓에 데이터를 적은 뒤의 작업은 소켓이 알아서 수행해주기 때문이다. 각각의 소켓을 이용해 서버를 띄우는 작업은 인자의 값만 조금 달라질 뿐이다. 이는 글의 하부의 코드에서 확인해볼 수 있다.&lt;/p>
&lt;h4 id="socket과-port">Socket과 Port&lt;/h4>
&lt;p>Network socket에 대해서는 socket과 port의 구분이나 역할이 애매하게 느껴질 수 있다. 통신을 할 때 IP 주소를 이용해 목적지인 Host를 찾을 수는 있지만 그 Host의 어떤 프로세스과 통신하려는 것인지는 알 수 없다. 올바른 프로세스를 찾을 수 있도록 프로세스와 어떠한 숫자를 매핑시키는데 이 숫자를 Port 번호라고 한다. 예를 들어 123.123.123.123:8080으로 요청을 보내는 것은 123.123.123.123의 IP 주소를 갖는 Host의 8080번 포트에 맵핑된 프로세스에 요청을 보내는 것이다.&lt;/p>
&lt;p>이 때 Port와 프로세스를 그냥 연결할 수는 없고 Socket이라는 녀석이 필요하다. Socket은 실질적으로 어떤 프로세스를 어떤 포트에 맵핑시킬지에 대한 정보가 필요하고 네트워크 작업을 알아서 수행한다.&lt;/p>
&lt;p>조금 비유를 해보자면 회사내에 어떤 부서가 있고 외부에서 해당 부서와 작업하기 위해선 어떠한 고유한 부서 번호가 필요하고, 이때 외부와 해당 부서간에 오가는 통신을 담당하는 담당자가 있어야하는 경우에 비유해 볼 수 있다. &amp;ldquo;어떤 부서&amp;quot;는 프로세스이고 &amp;ldquo;고유한 부서 번호&amp;quot;는 포트 번호, 통신을 담당하는 담당자는 소켓에 해당한다.&lt;/p>
&lt;h3 id="unix-domain-socket">Unix Domain Socket&lt;/h3>
&lt;p>Unix Domain Socket은 IPC(Inter-Process Communication, 프로세스 간 통신)의 여러 방법 중 가장 자유로우면서 사용하는 데에 있어 제한이 별로 없는 방법이다. 네트워크 소켓과 달리 같은 호스트 내의 프로세스 간 통신을 담당하기 때문에 아무런 네트워크 작업이 필요 없다. 하지만 TCP나 UDP를 이용하는 Network socket을 이용할 때와 인자 값만 조금 바꾸어 동일한 방식으로 사용이 가능하다.&lt;/p>
&lt;h4 id="-상상의-나래---우리가-알게-모르게-겪었던-unix-domain-socket의-permission오류에-대해">🌈 상상의 나래 - 우리가 알게 모르게 겪었던 Unix domain socket의 Permission오류에 대해&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">stat /var/lib/mysql/mysql.sock
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">stat: cannot stat &lt;span class="s1">&amp;#39;/var/lib/mysql/mysql.sock&amp;#39;&lt;/span>: Permission denied
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ docker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker: Got permission denied &lt;span class="k">while&lt;/span> trying to connect to the Docker daemon socket at unix:///var/run/docker.sock
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>주로 우리가 &lt;code>MySQL&lt;/code>이나 &lt;code>Docker&lt;/code>를 &lt;code>localhost&lt;/code>에서 사용할 때 &lt;strong>unix socket에 대한 permission 에러&lt;/strong>를 겪은 적이 있을 것이다. MySQL이나 Docker를 비롯한 많은 오픈소스들이 아마 성능상의 이점을 위해 localhost에서 서비스를 이용할 경우 Network socket이 아닌 Unix domain socket을 많이들 이용하는 것으로 알고있다. 그렇기 때문에 주로 MySQL 설치 이후 Remote에서는 접속이 되는데 &lt;strong>localhost에서는 권한 문제로 접속이 안된다거나 Docker 설치 이후 사용자를 docker group에 넣어주는 경우&lt;/strong>가 많이 있다.&lt;/p>
&lt;p>아마도 네트워크 통신을 통해 서버 소켓에 접근하는 네트워크 소켓과 달리 unix domain socket은 client process가 직접 server의 socket file에 접근하기 때문에 이때 쓰기 권한 때문에 그런 권한 오류가 생기는 것이 아닐까라는 상상의 나래를 펼쳐본다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ubuntu 사용자로 unix domain socket server 프로세스를 띄운 경우&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ubuntu 사용자로는 잘 접속이 된다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ubuntu@ec2 $ go &lt;span class="nb">test&lt;/span> -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">===&lt;/span> RUN &lt;span class="nv">TestSocket&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">===&lt;/span> RUN TestSocket/tcp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2021/02/13 12:59:06 &lt;span class="nv">pong&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">===&lt;/span> RUN TestSocket/unix
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2021/02/13 12:59:06 pong
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--- PASS: TestSocket &lt;span class="o">(&lt;/span>0.00s&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --- PASS: TestSocket/tcp &lt;span class="o">(&lt;/span>0.00s&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --- PASS: TestSocket/unix &lt;span class="o">(&lt;/span>0.00s&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PASS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ok uds 0.004s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># server가 생성한 unix domain socket에 write 권한이 없는&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># guest1이라는 사용자로는 server와 unix domain socket으로는 통신할 수 없고,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 앞서 오픈소스를 이용하며 겪었던 에러와 마찬가지로 권한 이슈가 발생한다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 하지만 TCP 소켓을 이용한 경우는 원활히 ping-pong test가 성공한 것을 볼 수 있다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">guest1@ec2 $ go &lt;span class="nb">test&lt;/span> -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">===&lt;/span> RUN &lt;span class="nv">TestSocket&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">===&lt;/span> RUN TestSocket/tcp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2021/02/13 12:59:01 &lt;span class="nv">pong&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">===&lt;/span> RUN TestSocket/unix
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> main_test.go:21:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Error Trace: main_test.go:21
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Error: Received unexpected error:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dial unix jinsu.sock: connect: permission denied
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Test: TestSocket/unix
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--- FAIL: TestSocket &lt;span class="o">(&lt;/span>0.00s&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --- PASS: TestSocket/tcp &lt;span class="o">(&lt;/span>0.00s&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --- FAIL: TestSocket/unix &lt;span class="o">(&lt;/span>0.00s&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 하지만 재미있게도 guest1도 socket에 write할 수 있도록 권한을 수정해주니&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># guest1도 unix domain socket으로 무리 없이 통신이 가능했다!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">guest1@ec2 $ sudo chmod &lt;span class="m">777&lt;/span> jinsu.sock
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">guest1@ec2 $ go &lt;span class="nb">test&lt;/span> -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">===&lt;/span> RUN &lt;span class="nv">TestSocket&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">===&lt;/span> RUN TestSocket/tcp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2021/02/13 12:59:06 &lt;span class="nv">pong&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">===&lt;/span> RUN TestSocket/unix
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2021/02/13 12:59:06 pong
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--- PASS: TestSocket &lt;span class="o">(&lt;/span>0.00s&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --- PASS: TestSocket/tcp &lt;span class="o">(&lt;/span>0.00s&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --- PASS: TestSocket/unix &lt;span class="o">(&lt;/span>0.00s&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PASS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ok uds 0.004s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>따라서 ubuntu 사용자로 TCP socket과 Unix domain socket 두 가지 방법으로 서버 역할을 할 수 있는 프로세스를 띄운 뒤 ubuntu 사용자와 guest1 사용자로 통신 테스트를 진행해보았다.&lt;/p>
&lt;p>서버가 생성한 unix domain socket은 &lt;code>srwxrwxr-x&lt;/code> 의 형식과 권한을 갖고 있기 때문에 guest1은 이 소켓에 대해 read와 execute 권한 뿐이고, write는 불가능하기에 unix domain socket을 이용해서는 통신할 수 없다. 따라서 우리가 평소에 오픈소스를 localhost에서 이용하면서 종종 맞이했던 소켓에 대한 permission error을 만나볼 수 있었다! 반면 socket에 대한 접근 권한이 필요 없는 TCP로는 통신이 가능했고, 놀랍게도 guest1에게 소켓 파일에 대한 write 권한을 부여해주자 Unix domain socket으로도 통신이 가능해진 것을 볼 수 있다.&lt;/p>
&lt;p>&lt;strong>상상의 나래 정리: unix domain socket을 통해 접속을 시도할 때에는 unix domain socket file에 대한 접근을 하는 프로세스가 해당 socket file에 대한 적절한 permission을 갖고 있어야한다.&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>또한 구글링 도중 보았던 재미있는 예시는 database를 통해 authentication/authorization을 수행하는 일반적인 서비스와 달리 Unix domain socket을 이용하는 경우에는 linux user 시스템을 이용해서도 권한/인증 관리를 수행하는 경우도 존재할 수 있다는 것이었다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="벤치마킹-unix-domain-socket-vs-network-socket">벤치마킹 Unix domain socket vs Network socket&lt;/h2>
&lt;p>Unix domain socket과 Network socket의 성능을 비교하는 벤치마크를 작성했다.
두 경우 모두 Stream type의 socket을 이용하도록 했고, Network socket의 경우는 특히나 이 경우 TCP 프로토콜을 이용하게 된다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main.go
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 한 프로세스 내에서 TCP Socket과 Unix Domain Socket 두 가지를 이용해
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 통신할 수 있는 프로그램
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;errors&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="nf">RunTCPSocketServer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="nf">RunUnixDomainSocketServer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Dummy waiting...&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Minute&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">RunTCPSocketServer&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Run TCPSocketServer...&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;tcp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;0.0.0.0:8080&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">RunUnixDomainSocketServer&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Run UnixDomainSocketServer...&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">serverSocketName&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;jinsu.sock&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">serverSocketName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unix&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">serverSocketName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// TCP socket을 이용해 서버를 띄우든 Unix Domain Socket을 이용해 서버를 띄우든
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 간단히 인자 값만 변경해서 이용할 수 있다!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">network&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">address&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">buf&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">socket&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">net&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">network&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">connectedSocket&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Accept&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">connectedSocket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Is&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">EOF&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;[Error]&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">network&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Client sent:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">connectedSocket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;pong&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">connectedSocket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main_test.go
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// tcp socket과 unix domain socket을 이용해 성공적으로 서버와 통신이
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 이루어지는지 테스트하는 테스트 코드
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// tcp와 unix domain socket의 성능을 비교하는 벤치마크 코드
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;errors&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;github.com/stretchr/testify/assert&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;testing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">TestSocket&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">args&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[][]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;tcp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;0.0.0.0:8080&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;unix&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;jinsu.sock&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">arg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arg&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">conn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">net&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Dial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arg&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">arg&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">assert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NoError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">buf&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ping&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Is&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">EOF&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">BenchmarkSocket&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">args&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[][]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;tcp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;0.0.0.0:8080&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;unix&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;jinsu.sock&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">arg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arg&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//log.Println(&amp;#34;Out&amp;#34;) // b.N과 상관 없이 args의 길이에 따라 출력됨.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">net&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Dial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arg&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">arg&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">assert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NoError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">buf&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//log.Println(&amp;#34;In&amp;#34;) // b.N만큼 수행됨
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ping&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">assert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NoError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Is&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">EOF&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fail&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ go &lt;span class="nb">test&lt;/span> -bench&lt;span class="o">=&lt;/span>. -benchtime&lt;span class="o">=&lt;/span>100000x
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">goos: linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">goarch: amd64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pkg: uds
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">BenchmarkSocket/tcp 100000 &lt;span class="m">104537&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">BenchmarkSocket/unix 100000 &lt;span class="m">83456&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PASS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ok uds 18.808s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>10000번의 ping-pong을 수행하는 벤치마크를 수행했다.
그 결과 &lt;strong>TCP socket을 이용할 경우는 한 번의 ping-pong에 약 104537ns, unix domain socket을 이용할 경우는 한 번의 ping-pong에 약 83456ns&lt;/strong>가 소요된 것을 보아 &lt;strong>예상대로 네트워크 통신이 일절 필요하지 않은 unix domain socket이 좀 더 성능이 좋은 것으로 보여졌다&lt;/strong>. 사전에 자료 조사를 할 때에는 unix domain socket이 tcp socket을 이용할 때보다 약 2배가량 성능이 우월할 것이라고 들었는데, 그렇게 많은 차이가 나는 것 같지는 않다. 하지만 어느 정도 데이터의 크기나 버퍼의 크기에 따라 달라질 수도 있을 것 같고 더 깊은 원리들이 존재할 것 같아 더 자세히는 측정해보지 못했다.&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>사실 이번에 다룬 소켓이라는 주제는 Go로 적용해보는 Computer Science라는 이 시리즈를 정리해나가던 초기에 2번 째 글로 시도했던 주제였는데 당시엔 Go benchmark도 처음 사용해봤었고 내용이 어려웠던 터라 벤치마크도 제대로 되지 않고 정리도 하기 힘들어서 중단했던 주제이다. 하지만 이번엔 같은 내용에 대해 두 번째 정리해서인지 전보다 내용도 잘 이해됐고, 벤치마킹 코드와 결과도 깔끔하게 나왔던 것 같아 뿌듯하다.&lt;/p>
&lt;p>그리고 그 동안 도커나 MySQL 같은 오픈소스들을 사용하면서 간혹 소켓에 대한 오류를 접할 때나 이런 저런 글에서 소켓 관련한 내용이 등장할 때 정확히 어떤 역할인지 이유가 뭔지 자세히 알지 못했는데 이번 기회덕에 앞으로는 좀 더 잘 이해해볼 수 있을 것 같다.&lt;/p>
&lt;h2 id="참고">참고&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>소켓 &lt;a class="link" href="http://www.ktword.co.kr/abbr_view.php?nav=&amp;amp;m_temp1=280&amp;amp;id=742" target="_blank" rel="noopener"
>http://www.ktword.co.kr/abbr_view.php?nav=&amp;m_temp1=280&amp;id=742&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>네트워크 소켓 &lt;a class="link" href="https://ko.wikipedia.org/wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC_%EC%86%8C%EC%BC%93" target="_blank" rel="noopener"
>https://ko.wikipedia.org/wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC_%EC%86%8C%EC%BC%93&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>소켓 프로그래밍 &lt;a class="link" href="https://recipes4dev.tistory.com/153" target="_blank" rel="noopener"
>https://recipes4dev.tistory.com/153&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>UDS (Unix Domain Socket) &lt;a class="link" href="http://www.dreamy.pe.kr/zbxe/CodeClip/119393" target="_blank" rel="noopener"
>http://www.dreamy.pe.kr/zbxe/CodeClip/119393&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>[Linux/UDS/Unix Domain Socket] UDS &lt;a class="link" href="https://yaaam.tistory.com/entry/LinuxUDSUnix-Domain-Socket-UDS" target="_blank" rel="noopener"
>https://yaaam.tistory.com/entry/LinuxUDSUnix-Domain-Socket-UDS&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Unix file type &lt;a class="link" href="https://en.wikipedia.org/wiki/Unix_file_types" target="_blank" rel="noopener"
>https://en.wikipedia.org/wiki/Unix_file_types&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>C# - .NET Core Unix Domain Socket 사용 예제 &lt;a class="link" href="https://www.sysnet.pe.kr/2/0/11963" target="_blank" rel="noopener"
>https://www.sysnet.pe.kr/2/0/11963&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Unix Domain Socket &lt;a class="link" href="https://www.joinc.co.kr/w/Site/system_programing/IPC/Unix_Domain_Socket" target="_blank" rel="noopener"
>https://www.joinc.co.kr/w/Site/system_programing/IPC/Unix_Domain_Socket&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Unix Domain Socket - UDP &lt;a class="link" href="https://www.joinc.co.kr/w/Site/system_programing/IPC/Unix_Domain_Socket_UDP" target="_blank" rel="noopener"
>https://www.joinc.co.kr/w/Site/system_programing/IPC/Unix_Domain_Socket_UDP&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>What is the difference between Unix sockets and TCP/IP sockets? &lt;a class="link" href="https://serverfault.com/questions/124517/what-is-the-difference-between-unix-sockets-and-tcp-ip-sockets" target="_blank" rel="noopener"
>https://serverfault.com/questions/124517/what-is-the-difference-between-unix-sockets-and-tcp-ip-sockets&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>개발 썰 - Go Memory Leak(메모리 누수) 관련 이슈</title><link>https://umi0410.github.io/blog/golang/go-memory-leak-issue/</link><pubDate>Wed, 27 Jan 2021 15:25:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/go-memory-leak-issue/</guid><description>&lt;img src="https://umi0410.github.io/blog/golang/go-memory-leak-issue/memory-leak-graph.png" alt="Featured image of post 개발 썰 - Go Memory Leak(메모리 누수) 관련 이슈" />&lt;h2 id="시작하며">시작하며&lt;/h2>
&lt;blockquote>
&lt;p>이 글은 Go 1.15 버전을 바탕으로 개발하며 겪은 이슈에 대해 설명하고 있으며 Go 1.16에서는 해당 이슈가 개선될 것이라고 합니다.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-memory-leak-issue/memory-leak-graph.png"
width="478"
height="253"
srcset="https://umi0410.github.io/blog/golang/go-memory-leak-issue/memory-leak-graph_hu1f014e9e399a42abc11cd4e02aac56df_8940_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-memory-leak-issue/memory-leak-graph_hu1f014e9e399a42abc11cd4e02aac56df_8940_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="memory-leak-graph.png"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="453px"
>&lt;/p>
&lt;p>진행 중인 &lt;a class="link" href="https://github.com/search?q=topic%3Akhumu&amp;#43;org%3Akhu-dev&amp;#43;fork%3Atrue" target="_blank" rel="noopener"
>쿠뮤&lt;/a>라는 프로젝트에서 Go를 이용해 이미지에 대한 url 해싱, 리사이징, 섬네일, 센터 크롭 작업을 하는 이미지 프로세싱 마이크로서비스를 개발하고있었다. 1차적으로 어느 정도 개발이 끝난 뒤 벤치마크 겸 부하 테스트 겸해서 얼마나 해당 마이크로서비스가 잘 버티면서 작업을 수행하는지 확인해보려 했으나 &lt;strong>Memory가 한 번 치솟게되면 어느 정도 이하로 떨어지지 않는 이슈&lt;/strong>가 발견되었다.&lt;/p>
&lt;p>허용할 수 있는 양보다 많은 요청을 보낼 경우 애플리케이션 레벨 이전에서 요청을 차단해주지 않으면 애플리케이션 단에서는 터지거나 문제가 생기는 것은 당연하겠지만 사진처럼 &lt;strong>작업을 다 수행한 뒤에도 메모리가 제대로 해제되지 않는 것이 이슈&lt;/strong>였다.&lt;/p>
&lt;h2 id="이슈의-원인을-파헤치기-위해-했던-노력들">이슈의 원인을 파헤치기 위해 했던 노력들&amp;hellip;&lt;/h2>
&lt;p>이 이슈를 잡아보려 여러 가지 디버깅 작업을 해봤으나 계속해서 메모리 이슈가 발생했고, 각종 커뮤니티에서 도움을 구해보고자했다. Go 오픈 카톡방, Reddit, Slack 등에서 의견을 구해보았다. 재미있는 경험이었으며 덕분에 원인을 파악할 수 있던 것 같다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-memory-leak-issue/slack-thread.png"
width="848"
height="1150"
srcset="https://umi0410.github.io/blog/golang/go-memory-leak-issue/slack-thread_hu69f0526f70cab8af73be7fa93df29141_179801_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-memory-leak-issue/slack-thread_hu69f0526f70cab8af73be7fa93df29141_179801_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="slack-thread.png"
class="gallery-image"
data-flex-grow="73"
data-flex-basis="176px"
>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-memory-leak-issue/reddit.png"
width="765"
height="846"
srcset="https://umi0410.github.io/blog/golang/go-memory-leak-issue/reddit_hu42e416b3ff1d468e25261abe6aea76a6_136808_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-memory-leak-issue/reddit_hu42e416b3ff1d468e25261abe6aea76a6_136808_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="reddit.png"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="217px"
>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="어떤-상황에-memory-leak이-발생한-것일까">어떤 상황에 Memory Leak이 발생한 것일까?&lt;/h2>
&lt;p>그럼 자세히 어떤 이슈가 있었고, 어떻게 그 상황을 분석할 수 있었으며 어떻게 해결할 수 있을지 알아보도록하겠다.&lt;/p>
&lt;p>&lt;strong>tl;dr - 자세한 묘사보다는 그냥 딱 원인/결과만 궁금하신 분들을 위한 요약&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>원인 - 힙 메모리에 메모리를 할당받았는데 혹시 &lt;strong>재사용할 수도 있어 OS에게 바로 메모리를 반환하지 않음&lt;/strong>.&lt;/li>
&lt;li>결과 - &lt;strong>OS가 메모리 부족하니 달라고 하면 그때 힙 메모리 사이즈를 실제로 줄인다&lt;/strong>. (&lt;em>하지만 go 1.16 버전부터는 개선될 예정이다.&lt;/em>)&lt;/li>
&lt;li>정확히 이러한 것을 메모리 누수라고 하는지는 명확하지 않다. Go 런타임이 놀고 있는 메모리를 갖고는 있지만 언제든 OS에게 반환해줄 수는 있기 때문이다. (&lt;em>하지만 매끄럽게 OS에게 반환해주는 느낌은 아니긴했다.&lt;/em>)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">routine&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">routine&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">routine&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">DoFloat&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// dummy waiting..
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">DoFloat&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">tmp&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">400000000&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">float64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">tmp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1">// tmp에 접근하지 않으면 unused variable이 되기 때문에 dummy한 access 작업 수행
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>처음엔 이미지 리사이징 시 메모리가 제대로 해제되지않는 것을 보고 이슈를 발견했지만, 사람들에게 도움을 구하고자 할 때, 이슈에 대해 설명할 때 전체 프로그램 코드를 첨부할 수는 없었기에 &lt;strong>문제 상황을 간단하게 표현할 수 있는 코드를 짜보고자&lt;/strong>했다. 이리 저리 프로그램을 간소화하면서 &lt;strong>커다란 배열 생성시에도 같은 메모리 이슈&lt;/strong>가 발생한다는 것을 알게되었다.&lt;/p>
&lt;p>그래서 아주 간단한 배열 생성 예시를 통해 사람들에게 이 이슈에 대해 설명해보고자했다. 이 예시에서는 &lt;code>8바이트의 float6&lt;/code>4로 이루어진 &lt;code>400000000칸의 배열 tmp&lt;/code>를 선언한다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-memory-leak-issue/unit-conversion.png"
width="569"
height="167"
srcset="https://umi0410.github.io/blog/golang/go-memory-leak-issue/unit-conversion_hufbecc09a52a79e4f645bd7e3e96526f8_8388_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-memory-leak-issue/unit-conversion_hufbecc09a52a79e4f645bd7e3e96526f8_8388_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="unit-conversion.png"
class="gallery-image"
data-flex-grow="340"
data-flex-basis="817px"
>&lt;/p>
&lt;p>8바이트가 400000000칸이면 &lt;code>400000000 * 8 / 1024(KB) / 1024(MB) / 1024(GB) = 약 2.9GB&lt;/code> 혹은 그대로 1000단위 씩으로 나눠 &lt;code>3.2GB&lt;/code>을 할당하는 것이다.&lt;/p>
&lt;p>원래는 스택 메모리에 할당된 뒤 다른 곳에서 이 녀석을 참조하는 일이 없기 때문에 바로 release되어 스택 메모리에서 점유가 해제되어야한다. 하지만 몇몇 경우에 스택이 아닌 힙에 데이터가 저장될 수 있다고 하는데, 이 경우에는 너무 큰 값을 선언하여 스택이 아닌 힙에 데이터가 저장되었고, 힙이 할당받은 메모리를 해제해주지 않아 생기는 문제였다. 사실 이런 현상도 정확히 메모리 누수 혹은 Memory Leak라고 하는지는 잘 모르겠다. 왜냐하면 &lt;strong>메모리에서 해제할 수 없는 수준으로 그 값의 주소를 잃어버려 실제로 그 공간이 누수가 되는 것이 아니라 아직 딱히 OS가 부담을 느끼지 않기 때문에 Go Runtime의 Heap에서 해당 주소는 비워뒀지만 OS에게 반납은 안 한 상태&lt;/strong>인 것이기 때문이다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-memory-leak-issue/top-memory-leak.png"
width="1011"
height="168"
srcset="https://umi0410.github.io/blog/golang/go-memory-leak-issue/top-memory-leak_hu95afae50a0e35fe52fc1dc07fc2fa740_148991_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-memory-leak-issue/top-memory-leak_hu95afae50a0e35fe52fc1dc07fc2fa740_148991_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="top-memory-leak.png"
class="gallery-image"
data-flex-grow="601"
data-flex-basis="1444px"
>&lt;/p>
&lt;p>실행해보면 10번의 DoFloat() 후에 그냥 for loop에서 time.Sleep 중이기에 &lt;strong>CPU를 거의 사용하지 않고 있는 반면 내 Laptop의 16GB의 Memory 중 20.5%인 3.2GB를 사용 중&lt;/strong>인 것을 확인할 수 있었다.&lt;/p>
&lt;h2 id="해결-해보기">해결 해보기&lt;/h2>
&lt;h3 id="go-runtime은-os에게-더-이상-이-메모리가-필요하지-않다고-알려주기만-하지-그-memory를-실제로-회수할-지-말지는-os에게-달려있다">Go runtime은 OS에게 더 이상 이 메모리가 필요하지 않다고 알려주기만 하지 그 Memory를 실제로 회수할 지 말지는 OS에게 달려있다.&lt;/h3>
&lt;blockquote>
&lt;p>The Go runtime only advises the OS when it no longer needs memory and it is up to the OS to reclaim it - @justinisrael&lt;/p>
&lt;/blockquote>
&lt;p>내가 Reddit에서 사람들께 여쭤봤던 글에 담긴 한 댓글을 인용해보았다. 과연 저 말이 사실일까? 프로세스를 여러번 띄워보았다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-memory-leak-issue/top-multiple-process.png"
width="766"
height="180"
srcset="https://umi0410.github.io/blog/golang/go-memory-leak-issue/top-multiple-process_hufe31e37f113f3799dd881c2f2d7ba7ae_38707_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-memory-leak-issue/top-multiple-process_hufe31e37f113f3799dd881c2f2d7ba7ae_38707_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="top-multiple-process.png"
class="gallery-image"
data-flex-grow="425"
data-flex-basis="1021px"
>&lt;/p>
&lt;p>프로세스를 하나 띄웠을 때에는 아까는 Dummy waiting 중이면서도 &lt;strong>Memory를 20% 가까이 점유하고 있었는데 여러 프로세스를 띄우면서 메모리가 부족해지자 놀고있던 Heap memory를 반환하여 거의 약 0.6%의 메모리만 점유&lt;/strong> 중인 것을 볼 수 있다.&lt;/p>
&lt;p>마지막 프로세스는 아직 DoFloat() 작업을 진행 중이므로 여전히 19.8%의 메모리를 점유 중이고, 작업이 완료된 뒤에도 OS가 Reclaim(다시 메모리를 가져가는 것)하기 전까지는 약 20%대를 유지하는 것으로 보여졌다.&lt;/p>
&lt;p>하지만 좀 더 자세히 기록해보고싶었다. Go의 내장 패키지 &lt;code>runtime&lt;/code>의 Memory 관련 기능을 이용하면 될 것 같았다. &lt;code>runtime.ReadMemStats(*runtime.MemStats)&lt;/code>를 이용하면 런타임 도중 자신의 런타임 상황을 알아볼 수 있다. 자세한 사용법은 구글링을 통해 쉽게 얻을 수 있으니 지면 관계상 생략한다.&lt;/p>
&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-memory-leak-issue/runtime-memory-leak.png"
width="387"
height="231"
srcset="https://umi0410.github.io/blog/golang/go-memory-leak-issue/runtime-memory-leak_hub8c90c70b0c23dfa44a0b6e91e7a7e33_13785_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-memory-leak-issue/runtime-memory-leak_hub8c90c70b0c23dfa44a0b6e91e7a7e33_13785_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="runtime-memory-leak.png"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="402px"
>&lt;/p>
&lt;p>즉 힙 메모리가 확보간 공간은 거대한 배열을 생성하는 함수인 DoFloat을 진행하는 동안은 실제로 Allocate 할당하여 사용하는 반면 DoFloat을 모두 마친 뒤에는 &lt;strong>힙 메모리는 공간을 확보하고는 있지만 Idle(놀고 있는) 상태로 존재&lt;/strong>하는 것이었다.&lt;/p>
&lt;p>나는 이러한 경우를 처음 맞이했지만, &lt;strong>각종 가비지 컬렉터가 있는 언어에서 각각의 가비지 컬렉터나 런타임을 구현하는 방법에 따라 이런 식으로 힙 메모리를 재사용하는 경우를 대비해 한 번 할당받은 메모리를 완전히 OS에게 반환하지 않는 경우가 있다&lt;/strong>고 한다.&lt;/p>
&lt;h3 id="go-116-버전부터는-메모리-계산-방식이-바뀔-것이다-그래서-괜찮을-것이다">Go 1.16 버전부터는 메모리 계산 방식이 바뀔 것이다. (그래서 괜찮을 것이다.)&lt;/h3>
&lt;blockquote>
&lt;p>&amp;ldquo;There was a change to how memory is calculated on 1.16&amp;rdquo; - @gopj&lt;/p>
&lt;/blockquote>
&lt;p>과연 사실일지 확인해보자. 간단히 Docker를 통해 나의 Local 환경에서 별 다른 세팅 없이 Go 버전을 다르게 하여 실행할 수 있었다. 실제로 이 이슈를 커뮤니티에 제기하기 전에도 Docker를 이용해 1.2, 1.3, 1.4 등의 버전에서도 실행해보았다. 나의 랩탑은 1.5 버전을 사용 중이었다. 1.16 버전은 아직 rc는 Release Candidate의 줄임말로 보통 배포 후보 버전을 의미한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-docker" data-lang="docker">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># Dockerfile&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> golang:1.16-rc&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> main.go main.go&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;go&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;run&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;./main.go&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 이미지 빌드 후 컨테이너 실행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ docker build . -t tmp &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> docker run --rm --it tmp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://umi0410.github.io/blog/golang/go-memory-leak-issue/go-1.16-memory-not-leaking.png"
width="759"
height="63"
srcset="https://umi0410.github.io/blog/golang/go-memory-leak-issue/go-1.16-memory-not-leaking_hue8ad343e4b80c73af1daf2aadf5c34cb_12663_480x0_resize_box_3.png 480w, https://umi0410.github.io/blog/golang/go-memory-leak-issue/go-1.16-memory-not-leaking_hue8ad343e4b80c73af1daf2aadf5c34cb_12663_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="go-1.16-memory-not-leaking.png"
class="gallery-image"
data-flex-grow="1204"
data-flex-basis="2891px"
>&lt;/p>
&lt;p>&lt;code>1.16-rc&lt;/code> 버전을 사용하자 결과적으로 다른 메모리 부하가 심한 프로세스를 실행시키지 않았지만 &lt;strong>수십 초 이내에 사용하지 않는 힙 메모리가 OS에게 반환&lt;/strong>되었다!!!&lt;/p>
&lt;blockquote>
&lt;p>하지만 여전히 runtime.MemStats에서는 HeapMemory에 Idle한 메모리 크기가 크게 잡혀있었는데, 이 부분은 rc 버전이기 때문에 runtime까지 완전히 기능이 개발되지 않아서인지 이전에도 메모리는 반환했지만 메모리를 표시하기 위한 계산의 문제만 개선이 된 것인지는 확실하진 않지만 여튼 이슈에 대해서는 파악할 수 있었다!&lt;/p>
&lt;/blockquote>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>개발이나 운영을 하면서 이런 저런 이슈들이 있었지만 이번 경우처럼 로우 레벨스럽게 들어가서 런타임 동안 메모리 관리가 어떻게 되는지까지 탐구해본 적은 드물었던 것 같다. 도저히 원인을 모르겠어서 &amp;lsquo;&lt;em>하 결국 포기하고 이 마이크로서비스는 Lambda로 돌려야하나&amp;hellip;&lt;/em>&amp;rsquo; 싶었다. 하지만 몇 시간을 고생하고 직접 의견을 구하러 다니면서 새로 배우게 된 내용도 많았고, 외국에 계신 몇몇 개발자 분들과도 이렇게 소통할 수 있다는 것이 신기했다. (&lt;em>그리고 참 세세한 지식까지 겸비한 분들이 많다는 것이 놀라웠다&amp;hellip;&lt;/em>)&lt;/p>
&lt;p>결과적으로 해당 이슈는 아마 Go의 &lt;code>1.16&lt;/code> 버전이 패치되면 완전히 해결 가능할 것 같고 그 이전에도 사실 Host에서 메모리 부담을 느끼면 Go runtime이 안 쓰고 있는 힙 메모리를 반환해준다고 하니 큰 문제는 없을 것 같다. 하지만 실제로 Host가 부담을 느끼는 선 이전에 메모리를 반환받고 싶다면 Pod level에서 메모리 리소스를 제한해볼 수는 있을 것 같다.&lt;/p>
&lt;p>혹시 다음에도 이런 흔치 않은 고된 이슈를 맞이한다면 그 원인과 해법을 이렇게 또 기록할 수 있기를 바래본다.&lt;/p></description></item></channel></rss>