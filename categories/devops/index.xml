<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>devops on Jinsu Playground</title><link>https://umi0410.github.io/categories/devops/</link><description>Recent content in devops on Jinsu Playground</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Thu, 11 Aug 2022 03:20:00 +0900</lastBuildDate><atom:link href="https://umi0410.github.io/categories/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Virtual Service와 Destination Rule을 이용해 mesh 내부 트래픽을 원하는 대로 라우팅해보기</title><link>https://umi0410.github.io/blog/devops/virtual-service-destination-rule-mesh-internal-traffic/</link><pubDate>Thu, 11 Aug 2022 03:20:00 +0900</pubDate><guid>https://umi0410.github.io/blog/devops/virtual-service-destination-rule-mesh-internal-traffic/</guid><description>시작하며 데브옵스 엔지니어로 입사한 뒤 주로 맡고 있는 작업은 Istio 관련 작업이다. 평소 참 관심 있었던 분야이기도 하고 istio 뿐만 아니라 네트워크에 대해 개인적으로 정말 공부해보고싶었는데 덕분에 재미있게 공부하고 성장하며 근무하고 있는 것 같다. 😊
근데 요즘 들어 점점 단순히 ‘어떻게 저떻게 하니까 돌아는가네~ 오.. 나 istio 좀 파악한듯?ㅋㅋ’ 수준의 자세로는 트러블슈팅을 하거나 올바르게 설계하기가 쉽지 않은 경우들이 잦아졌다.
따라서 평소 궁금했던 내용 중 하나를 살짝 파헤쳐볼까한다.
나는 주로 istio ingress gateway와 관련된 작업을 많이 했었고 이 경우 Virtual Service는 항상 ingress gateway를 참조하도록 설정해왔다.</description></item><item><title>istio와 envoy proxy를 통해 경험해보는 네트워크 인터페이스 (istio 1.10)</title><link>https://umi0410.github.io/blog/devops/istio-1-10-network-interface/</link><pubDate>Sun, 17 Jul 2022 22:00:00 +0900</pubDate><guid>https://umi0410.github.io/blog/devops/istio-1-10-network-interface/</guid><description>시작하며 요즘 istio를 공부하던 중 istio가 변화해온 과정에 대해서도 흥미가 생겨 지난 버전들의 릴리즈 노트들도 읽어보고 있습니다. 그러던 중 현 시점(2022년 7월)에는 이미 공식적인 End of Life가 지난 2021년 3월 처음 릴리즈된 istio 1.10의 릴리즈 노트를 보다가 재미있는 점을 하나 발견할 수 있었는데요.
바로 envoy proxy가 eth0에 대한 요청을 넘겨주는 container의 network interface가 lo 에서 eth0 로 변경되었다는 점입니다. 네트워크에 대해, 그 중에서도 특히 네트워크 인터페이스에 대해 잘 몰랐던 때에는 이 변경사항에 그닥 관심이 안 갔을 것 같은데 최근 네트워크 인터페이스에 대해 공부를 해서인지 이 변경사항에 관심이 갔습니다.</description></item><item><title>쿠버네티스로 Clova AI Custom Extension 배포하기 (feat. Istio, Cert Manager)</title><link>https://umi0410.github.io/blog/clova-ai-on-k8s/</link><pubDate>Wed, 13 Jul 2022 23:00:00 +0900</pubDate><guid>https://umi0410.github.io/blog/clova-ai-on-k8s/</guid><description>시작하며 Clova AI 스피커 올해에는 많은 변화가 있었다!
💼 데브옵스 엔지니어로 회사를 가게 됐고 아주 만족 중이다! 🏠 회사의 좋은 보상, 복지에 힘입어 생애 첫 자취를 하게 됐다. 💻 네트워크나 리눅스, 보안 등 딥한 영역에 좀 더 관심을 갖게 됐다. 🎸 기타를 꾸준히 다니고 있다. 그런 변화들 속에서 자취방에 인터넷 설치를 하게 됐는데 클로바 AI 스피커를 공짜로 주더라.
본가에 있을 때도 쓰긴 했는데 딱히 관심 없다가 직접 클로바 앱을 깔아서 이것저것 써보니 &amp;lsquo;전보다 재밌네.</description></item><item><title>ArgoCD 선언적으로 이용해나가기 - Github을 통한 SSO 및 RBAC</title><link>https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/</link><pubDate>Sat, 07 May 2022 22:00:00 +0900</pubDate><guid>https://umi0410.github.io/blog/devops/declarative-argocd-helm-rbac/</guid><description>시작하며 저번 글(&amp;ldquo;ArgoCD 선언적으로 이용해나가기 - Helm, App of App&amp;rdquo;)에서는 Helm과 App of App 패턴을 이용해 ArgoCD를 선언적으로 이용해나가는 방법을 다뤘습니다.
바~로 ArgoCD를 좀 더 선언적으로 이용해나가는 것과 관련된 팁부터 글을 적어나가기는 좀 무리가 있을 것 같아 해당 글에서는
배경지식들에 대한 간략한 정리와 핸즈온 같은 느낌의 내용들도 많이 포함하게 됐던 것 같아요.
이번 글에서는 ArgoCD를 실제로 이용하기 위해 필요할만한 이런 저런 설정들을 어떻게 선언적으로 정의해볼 수 있을지를 소개해보려해요!
그리고 그 예시로 RBAC 설정을 해보겠습니다.</description></item><item><title>ArgoCD 선언적으로 이용해나가기 - Helm, App of App</title><link>https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/</link><pubDate>Fri, 22 Apr 2022 14:11:07 +0900</pubDate><guid>https://umi0410.github.io/blog/devops/declarative-argocd-helm-app-of-app/</guid><description>시작하며 취준생 기간을 마무리하고 데브옵스 엔지니어로서 커리어를 시작하게 됐습니다! 🎉
근무를 시작하기 전까지 기간이 좀 남아있어서 그 전까지 뭘 해보면 재밌을까 고민하던 중에 새로 생긴 클라우드 동아리인 Cloud Club에서 클라우드와 인프라에 관한 주제로 발표할 기회가 주어져 ArgoCD를 토픽으로 발표를 해보려합니다. 그리고 관련된 내용을 한 번 더 블로그에 정리해보려해요!
주제는 &amp;ldquo;ArgoCD 선언적으로 이용해나가기&amp;rdquo; 이고 주로 다룰 내용은 어떻게 ArgoCD를 좀 더 선언적으로 관리하고 이용해나갈 수 있을지입니다.
ArgoCD가 뭔지, 어떻게 Getting Started할지, GitOps가 뭔지 등을 다루지 않으려는 이유는 이미 그 내용으로는 충분한 양질의 자료가 존재한다고 생각하기 때문입니다.</description></item></channel></rss>