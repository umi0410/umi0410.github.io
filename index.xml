<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>About Jinsu Park (umi0410) on Jinsu Playground</title><link>https://umi0410.github.io/</link><description>Recent content in About Jinsu Park (umi0410) on Jinsu Playground</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Fri, 04 Sep 2020 11:46:14 +0900</lastBuildDate><atom:link href="https://umi0410.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>EKS K8s에서 ELB(ALB, NLB) 제대로 설정하며 사용하기</title><link>https://umi0410.github.io/blog/aws/aws_eks_elb/</link><pubDate>Sun, 06 Sep 2020 19:11:07 +0900</pubDate><guid>https://umi0410.github.io/blog/aws/aws_eks_elb/</guid><description>🐶 시작하며 본 게시글은 AWS 대학생 유저그룹인 AUSG의 활동 중 하나로서 본인(박진수)이 작성한 게시물을 포워딩한 것입니다.
데브옵스 인턴으로 근무한 지가 벌써 두 달이 되어갑니다. 이것 저것 배운 것이 많았던 시간이었는데, 그 중 꽤나 삽질을 했던 Kubernetes 와 ELB를 이용하는 부분에 대해 정리를 해볼까합니다. jenkins, spinnaker, argo, terraform, ansible, github action, &amp;hellip; 등등 다양한 내용을 경험할 수 있던 시간이었지만, 그 중 kubernetes에서 무슨 작업을 하던 빼놓을 수 없으면서 어딘가 깔끔히 그 흐름이 정리된 곳을 보기 힘들었던 service를 ELB에 연결하기에 대한 내용을 정리해보겠습니다.</description></item><item><title>Go vs Java - Go에서의 객체 지향</title><link>https://umi0410.github.io/blog/golang/go-vs-java-oop/</link><pubDate>Sat, 09 Jan 2021 12:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/go-vs-java-oop/</guid><description>Table of Contents 시작하며 예시 코드 객체지향적 관점에서의 Go에 대해 💊 Encapsulation(캡슐화) 👩‍👧‍👦 Inheriatance(상속) Abstraction(추상화) 🌒🌓🌕 Polymorphism(다형성) Go에서의 객체 지향의 한계점과 장점 마무리 참고 시작하며 요즘 Go와 Java 모두를 이용해 개발을 하다보니 각각의 장단점에 대해 느껴볼 수 있었다. Go는 리소스를 적게 먹으며 코드가 간결하고 라이브러리나 프레임워크 또한 심플해서 적용하기 편하다. Java는 이런 저런 기능이 많은 반면 그런 기능을 이용하기 위해 이해해야하는 내용들이 많고, 코드가 투명하지는 않다(다양한 Annotation을 이용하게 되면서 코드가 투명하게 그 동작을 나타내지 않음).</description></item><item><title>Stargate라는 인프라 구축기</title><link>https://umi0410.github.io/experiences/megazone-cloud/stargate-infra/</link><pubDate>Fri, 04 Sep 2020 12:46:54 +0900</pubDate><guid>https://umi0410.github.io/experiences/megazone-cloud/stargate-infra/</guid><description>Table of Contents Stargate라는 개발 인프라 구축기 Terraform으로 처음 접해 본 IaC Terraform 단점 Terraform 장점 개발 관련 다양한 서비스 배포 인프라 구축에 대한 정리 Stargate라는 개발 인프라 구축기 chart by Jinsu Park
저희 팀의 개발 인프라는 위와 같습니다. 마침 제가 입사할 쯤이 기존에 존재하던 인프라를 새로운 환경으로 이전해야할 시점이었습니다. 덕분에 저는 저희 개발 환경을 처음부터 구축하고, 우리의 서비스를 배포해보고, 그 후 운영하면서 여러 경험들을 할 수 있었습니다.</description></item><item><title>Go concurrency pattern - channel을 통해 간단히 세마포어처럼 동시 작업 속도 조절하기 (feat. 조회수 증가 기능)</title><link>https://umi0410.github.io/blog/golang/go-concurrency-pattern-use-case-view-count/</link><pubDate>Sat, 08 May 2021 12:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/go-concurrency-pattern-use-case-view-count/</guid><description>Table of Contents 시작하며 이번에 다룰 Concurrency pattern&amp;hellip; 언제 쓰면 좋은 것이냐 도대체..! 유즈케이스 예시 - 게시글의 조회수 증가 기능 조회수 증가는 수행되지 못해도 크게 상관은 없다. 동시적 조회 요청 발생 시 조회수 증가 작업은 동기화가 보장되는 것이 좋다. 동시성 제어에서 Node.js의 한계 예시 - 동시적 조회 시 동시적 조회수 증가 작업을 제어하기 힘듦. Goroutine과 Channel을 이용해 간단히 동시성 제어 - chan에 조회수를 증가할 게시물을 전달해 동기화하여 작업 심화) 동기화는 조금 양보하고 Goroutine을 scale out하기 마치며 부록 - 게시물에 조회수 필드를 두는 이유 참고 자료 시작하며 얼마 전 Channel use case 라는 Go에서의 채널 사용에 관한 글을 하나 읽었다.</description></item><item><title>Github Action, Spinnaker을 이용한 CI/CD 파이프라인 구축기</title><link>https://umi0410.github.io/experiences/megazone-cloud/ci-cd-pipeline/</link><pubDate>Fri, 04 Sep 2020 12:46:54 +0900</pubDate><guid>https://umi0410.github.io/experiences/megazone-cloud/ci-cd-pipeline/</guid><description>Table of Contents Github Action을 사용하게 된 배경 Github Action vs Jenkins 그래서 어떤 CI/CD를 자동화하였나요? Github Action을 다뤄보면서 느낀 점 Github Action을 사용하게 된 배경 저희 팀은 원래 CI용으로 Jenkins를 사용했습니다만 팀이 개발 중이던 서비스가 오픈소스가 목표인 프로젝트였고, Github Action이 빠르게 발전해나가면서 비용도 무료가 되었고, 좋은 Action들이 많이 생겨나고 있었기에 어느 정도 프로젝트 구조가 잡힌 뒤에는 Github의 Public Repository로 프로젝트를 관리하고 Github Action을 CI 도구로 채택하게되었습니다.</description></item><item><title>Argo Project들에 대한 PoC(개념 증명) 진행</title><link>https://umi0410.github.io/experiences/megazone-cloud/argo-poc/</link><pubDate>Fri, 04 Sep 2020 12:46:54 +0900</pubDate><guid>https://umi0410.github.io/experiences/megazone-cloud/argo-poc/</guid><description>Table of Contents Argo PoC를 진행하게 된 배경 Argo Project 구조 Argo Event (Official site) Argo, Argo Workflow (Official site) ArgoCD (Official site) Argo Project를 조합한 CI/CD 파이프라인 구축기 파이프라인 수행 과정 Argo Project들에 대한 PoC를 진행하며 느낀 점 Argo PoC를 진행하게 된 배경 입사 초기부터 Argo에 대해 간간히 이야기를 들어왔습니다. 저희는 원래 Spinnaker을 사용했는데, 쿠버네티스 환경에 좀 더 친화적이라는 Argo를 도입해보는 것은 어떨까에 대한 얘기였는데요.</description></item><item><title>SpaceONE Helm Chart 개발</title><link>https://umi0410.github.io/experiences/megazone-cloud/spaceone-helm/</link><pubDate>Fri, 04 Sep 2020 12:46:54 +0900</pubDate><guid>https://umi0410.github.io/experiences/megazone-cloud/spaceone-helm/</guid><description>Table of Contents SpaceONE Helm Chart란? spaceone-helm 설계 spaceone-helm chart 구조 마이크로서비스들의 버전 관리를 시작 Helm Chart를 통해 패키지화하며 느낀 점 SpaceONE Helm Chart란? spaceone-helm 은 저희 CloudOne 팀이 개발하는 서비스인 SpaceONE을 helm chart를 이용해 패키지화하는 프로젝트입니다. 원래의 저희 환경은 MicroService들을 개별 배포하고있었지만 오픈소스로 개발되는 저희 서비스를 저희 팀원들 뿐만아니라 다른 개발자들이 쉽게 개발할 수 있고, SpaceONE을 모르던 사용자들도 쉽게 SpaceONE을 구축해볼 수 있도록 하기 위해 패키지화도 진행하게되었습니다.</description></item><item><title>Go 언어로 적용해보는 Computer Science - Mutex와 Semaphore</title><link>https://umi0410.github.io/blog/golang/go-mutex-semaphore/</link><pubDate>Wed, 20 Jan 2021 15:25:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/go-mutex-semaphore/</guid><description>Table of Contents Mutex Mutex를 이용한 Go program - Counter 💡 Mutex.. 그래서 언제 써요? Semaphore Mutex와 Binary semaphore의 유사한 점 Semaphore를 이용한 Go Program 1 - Counter Buffered channel을 이용한 Semaphore in Go 💡 Semaphore.. 그래서 언제 쓰나요? Semaphore을 이용한 Go Program 2 - 이미지 크기 변환기 마치며 참고 Go 언어로 적용해보는 Computer Science의 첫 번째 내용으로 OS 관련 내용 중 이론적으로는 흔하게 접할 수 있지만 실제 적용에 대한 내용은 찾아보기 힘들었던 Mutex, Semaphore에 대해 알아보려한다.</description></item><item><title>SpaceONE CLI Client인 spacectl 설계 및 개발</title><link>https://umi0410.github.io/experiences/megazone-cloud/spacectl/</link><pubDate>Fri, 04 Sep 2020 12:46:54 +0900</pubDate><guid>https://umi0410.github.io/experiences/megazone-cloud/spacectl/</guid><description>Table of Contents spacectl이란? 소개 사용 예시 설계를 하며 느낀 점 개발하면서 느낀 점 spacectl이란? 소개 spacectl 은 저희팀이 개발하는 서비스인 SpaceONE의 gRPC API request를 CLI로 손쉽게 수행할 수 있도록 해주는 도구입니다. 파이썬을 통해 개발했고 Click 이라는 모듈로 CLI 환경을 손쉽게 사용할 수 있었고, Jinja2를 통해 상세한 Manifest 들에서 변수 치환, 분기 등을 수행할 수 있었습니다.
사용 예시 A simple example 간단하게 spacectl이 어떤 식으로 이용되는 도구인지 예시를 보여드리겠습니다.</description></item><item><title>Go 언어로 적용해보는 Computer Science - Deadlock</title><link>https://umi0410.github.io/blog/golang/go-deadlock/</link><pubDate>Sun, 31 Jan 2021 18:25:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/go-deadlock/</guid><description>시작하며 개발 공부를 시작하고 여태까지 몇 년간 데드락을 실제로 접할 일은 없었다. 사실 동시성을 주의해야하는 작업을 해본 적도 없었고, 트랜잭션에 대한 개념도 없었기 때문일 수도 있다. 전공 과목에서 데드락에 대한 내용을 듣고서도 &amp;lsquo;아 이런 게 있구나&amp;rsquo; 정도로만 생각하고 넘겼었다. 하지만 Go 언어를 통해 개발을 하던 도중 Channel이나 Mutex로 인해 종종 데드락을 경험할 수 있었고, 이 경우 프로그램이 완전히 멈춰버리는 크리티컬한 문제가 발생하기도 했고, 디버깅하기 힘든 경우도 있었다. 그런 경험을 하면서 &amp;lsquo;데드락 이 녀석&amp;hellip; 만만치 않구나&amp;lsquo;라는 생각을 하곤 했다.</description></item><item><title>Go 언어로 적용해보는 Computer Science - Cache</title><link>https://umi0410.github.io/blog/golang/go-cpu-cache/</link><pubDate>Wed, 27 Jan 2021 15:25:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/go-cpu-cache/</guid><description>Table of Contents 시작하며 캐시란 Spatial locality Temporal locality 두 지역성 비교 공간 지역성에 치우친 캐시 구조 시간 지역성에 치우친 캐시 구조 프로그램을 통한 벤치마킹 마치며 참고 시작하며 저번 학기에 컴퓨터 구조를 수강하면서 간과하고 있던 로우 레벨의 지식에도 흥미가 생겼었다. 그 중 CPU와 Memory, Disk의 역할에 대해 알아볼 수 있었고 캐시는 CPU와 Memory 사이에 위치해 메모리 대신 빠르게 CPU에게 데이터를 제공하는 녀석이라고 배웠다.</description></item><item><title>Go 언어로 적용해보는 Computer Science - Concurrency vs Parallelism</title><link>https://umi0410.github.io/blog/golang/go-concurrency-vs-parallelism/</link><pubDate>Thu, 04 Feb 2021 12:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/go-concurrency-vs-parallelism/</guid><description>Table of Contents 시작하며 Concurrency is not parallelism 예시로 보는 동시성 vs 병렬성 프로그램으로 알아보는 Concurrency vs Parallelism Concurrency - Block이 많은 작업에 유리 Parallelism - CPU bound한 작업에 유리 마치며 참고 시작하며 Go 언어를 처음 배울 때 channel이나 goroutine에 대해 배우면서 Concurrency 즉 동시성으로 인해 많이 힘들었던 기억이 난다. &amp;lsquo;동시성과 병렬성이 도대체 뭐가 다르다는 것이냐..!&amp;rsquo; Rob Pike 아저씨가 동시성에 관해 했던 세미나 영상들을 보며 같이 스터디 하던 멤버들과 멘붕에 빠지기도 했고, 이런 저런 의견 교류도 했다가 며칠 지나고 보면 다시 병렬성과 헷갈리고, 제대로 된 한글 자료는 찾기 힘들었다.</description></item><item><title>Go 언어로 적용해보는 Computer Science - Socket (Unix Domain Socket, Network/TCP/UDP Socket)</title><link>https://umi0410.github.io/blog/golang/go-socket/</link><pubDate>Sat, 13 Feb 2021 14:10:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/go-socket/</guid><description>시작하며 개발 공부를 처음 시작한 지 언제 안 됐을 무렵, 의경 복무를 하며 자바로 TCP Socket을 이용해 옆 컴퓨터와 채팅을 하는 프로그램을 만들어 보는 것을 시작으로 docker나 mysql과 같은 다양한 오픈소스들을 이용해보면서나 네트워크를 공부하면서 다양하게 들어왔던 소켓이지만 정확히 어떤 역할을 하는지 어떤 종류가 있는지 어떻게 동작하는지 알지 못했다.
오늘은 그렇게 알쏭달쏭한 존재였던 소켓을 크게 Unix Domain Socket와 Network Socket 두 가지로 나눠 정리해보고 Unix Domain Socket과 TCP를 사용하는 Network Socket을 벤치마크해보고 어떤 차이가 있는지 확인해보도록 하겠다.</description></item><item><title>개발 썰 - Go Memory Leak(메모리 누수) 관련 이슈</title><link>https://umi0410.github.io/blog/golang/go-memory-leak-issue/</link><pubDate>Wed, 27 Jan 2021 15:25:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/go-memory-leak-issue/</guid><description>Table of Contents 시작하며 이슈의 원인을 파헤치기 위해 했던 노력들&amp;hellip; 어떤 상황에 Memory Leak이 발생한 것일까? 해결 해보기 Go runtime은 OS에게 더 이상 이 메모리가 필요하지 않다고 알려주기만 하지 그 Memory를 실제로 회수할 지 말지는 OS에게 달려있다. Go 1.16 버전부터는 메모리 계산 방식이 바뀔 것이다. (그래서 괜찮을 것이다.) 마치며 시작하며 이 글은 Go 1.15 버전을 바탕으로 개발하며 겪은 이슈에 대해 설명하고 있으며 Go 1.</description></item><item><title>Go의 Pipeline pattern. 언제 사용해야할까? - Golang concurrent patterns</title><link>https://umi0410.github.io/blog/golang/go-concurrent-pattern-pipeline/</link><pubDate>Mon, 11 Jan 2021 12:46:54 +0900</pubDate><guid>https://umi0410.github.io/blog/golang/go-concurrent-pattern-pipeline/</guid><description>Table of Contents ✋ 시작하며 ❓ Pipeline pattern이란? Pipeline pattern의 흔한 예시로 square 하는 예제를 설명하는 글들 🤔 언제 쓰는 게 좋을까? 예시 프로그램 프로그램 설명 📉 벤치마크 결과 비교 마무리 참고 ✋ 시작하며 Go를 공부하기 시작한 지도 벌써 몇 달이 지난 것 같다. 데브옵스 인턴을 마치면서 특히나 관심있었던 Go를 공부하기 시작했었고, 지난 몇 달간 AWS KRUG내의 소모임인 AUSG의 스터디 활동으로 Go를 주제로 공부해왔다.</description></item></channel></rss>